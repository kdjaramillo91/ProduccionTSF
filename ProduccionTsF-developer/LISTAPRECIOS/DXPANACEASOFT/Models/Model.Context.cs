//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DXPANACEASOFT.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBContext : DbContext
    {
        public DBContext()
            : base("name=DBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AccountDetailAssistantType> AccountDetailAssistantType { get; set; }
        public virtual DbSet<AccountFor> AccountFor { get; set; }
        public virtual DbSet<AccountingAssistant> AccountingAssistant { get; set; }
        public virtual DbSet<AccountingAssistantDetailType> AccountingAssistantDetailType { get; set; }
        public virtual DbSet<AccountPlan> AccountPlan { get; set; }
        public virtual DbSet<AccountType> AccountType { get; set; }
        public virtual DbSet<AccountTypeGeneral> AccountTypeGeneral { get; set; }
        public virtual DbSet<ActivityRise> ActivityRise { get; set; }
        public virtual DbSet<AddressType> AddressType { get; set; }
        public virtual DbSet<AssistantType> AssistantType { get; set; }
        public virtual DbSet<BasisForGeneralDiscounts> BasisForGeneralDiscounts { get; set; }
        public virtual DbSet<BoxCardAndBank> BoxCardAndBank { get; set; }
        public virtual DbSet<BranchOffice> BranchOffice { get; set; }
        public virtual DbSet<BusinessGroup> BusinessGroup { get; set; }
        public virtual DbSet<CalendarPriceList> CalendarPriceList { get; set; }
        public virtual DbSet<CalendarPriceListType> CalendarPriceListType { get; set; }
        public virtual DbSet<CategoryActivityRise> CategoryActivityRise { get; set; }
        public virtual DbSet<CategoryRise> CategoryRise { get; set; }
        public virtual DbSet<Certification> Certification { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Class> Class { get; set; }
        public virtual DbSet<ClassShrimp> ClassShrimp { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<ComparisonOperator> ComparisonOperator { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Country_IdentificationType> Country_IdentificationType { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerType> CustomerType { get; set; }
        public virtual DbSet<DataType> DataType { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<DiscountToDetailApplyTo> DiscountToDetailApplyTo { get; set; }
        public virtual DbSet<Division> Division { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<DocumentState> DocumentState { get; set; }
        public virtual DbSet<DocumentStateChange> DocumentStateChange { get; set; }
        public virtual DbSet<DocumentType> DocumentType { get; set; }
        public virtual DbSet<DrainingTest> DrainingTest { get; set; }
        public virtual DbSet<DrainingTestDetail> DrainingTestDetail { get; set; }
        public virtual DbSet<EconomicGroup> EconomicGroup { get; set; }
        public virtual DbSet<EmissionPoint> EmissionPoint { get; set; }
        public virtual DbSet<EmissionType> EmissionType { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EnvironmentType> EnvironmentType { get; set; }
        public virtual DbSet<GeneralContactData> GeneralContactData { get; set; }
        public virtual DbSet<GroupPersonByRol> GroupPersonByRol { get; set; }
        public virtual DbSet<GroupPersonByRolDetail> GroupPersonByRolDetail { get; set; }
        public virtual DbSet<GroupPersonByRolhomologation> GroupPersonByRolhomologation { get; set; }
        public virtual DbSet<IdentificationType> IdentificationType { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<ItemSaleInformation> ItemSaleInformation { get; set; }
        public virtual DbSet<ItemSize> ItemSize { get; set; }
        public virtual DbSet<ItemSizeClass> ItemSizeClass { get; set; }
        public virtual DbSet<ItemSizeProcessPLOrder> ItemSizeProcessPLOrder { get; set; }
        public virtual DbSet<ItemSizeProcessTypePriceList> ItemSizeProcessTypePriceList { get; set; }
        public virtual DbSet<ItemTaxation> ItemTaxation { get; set; }
        public virtual DbSet<LiquidationMaterialSupplies> LiquidationMaterialSupplies { get; set; }
        public virtual DbSet<LiquidationMaterialSuppliesDetail> LiquidationMaterialSuppliesDetail { get; set; }
        public virtual DbSet<LoginLog> LoginLog { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<MetricType> MetricType { get; set; }
        public virtual DbSet<MetricUnit> MetricUnit { get; set; }
        public virtual DbSet<MetricUnitConversion> MetricUnitConversion { get; set; }
        public virtual DbSet<Module> Module { get; set; }
        public virtual DbSet<ModuleTController> ModuleTController { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<Origin> Origin { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<PaymentMethodPaymentTerm> PaymentMethodPaymentTerm { get; set; }
        public virtual DbSet<PaymentTerm> PaymentTerm { get; set; }
        public virtual DbSet<PenalityClassShrimp> PenalityClassShrimp { get; set; }
        public virtual DbSet<PenalityClassShrimpDetails> PenalityClassShrimpDetails { get; set; }
        public virtual DbSet<Permission> Permission { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<PersonType> PersonType { get; set; }
        public virtual DbSet<PoundsRange> PoundsRange { get; set; }
        public virtual DbSet<PriceList> PriceList { get; set; }
        public virtual DbSet<PriceListClassShrimp> PriceListClassShrimp { get; set; }
        public virtual DbSet<PriceListItemSizeDetail> PriceListItemSizeDetail { get; set; }
        public virtual DbSet<PriceListPersonPersonRol> PriceListPersonPersonRol { get; set; }
        public virtual DbSet<ProcessType> ProcessType { get; set; }
        public virtual DbSet<ProductionLot> ProductionLot { get; set; }
        public virtual DbSet<ProductionLotDetail> ProductionLotDetail { get; set; }
        public virtual DbSet<ProductionLotState> ProductionLotState { get; set; }
        public virtual DbSet<Provider> Provider { get; set; }
        public virtual DbSet<ProviderAccountingAccounts> ProviderAccountingAccounts { get; set; }
        public virtual DbSet<ProviderGeneralData> ProviderGeneralData { get; set; }
        public virtual DbSet<ProviderGeneralDataEP> ProviderGeneralDataEP { get; set; }
        public virtual DbSet<ProviderGeneralDataRise> ProviderGeneralDataRise { get; set; }
        public virtual DbSet<ProviderMailByComDivBra> ProviderMailByComDivBra { get; set; }
        public virtual DbSet<ProviderPassportImportData> ProviderPassportImportData { get; set; }
        public virtual DbSet<ProviderPaymentMethod> ProviderPaymentMethod { get; set; }
        public virtual DbSet<ProviderPaymentTerm> ProviderPaymentTerm { get; set; }
        public virtual DbSet<ProviderPaymentTermMethod> ProviderPaymentTermMethod { get; set; }
        public virtual DbSet<ProviderPersonAuthorizedToPayTheBill> ProviderPersonAuthorizedToPayTheBill { get; set; }
        public virtual DbSet<ProviderRelatedCompany> ProviderRelatedCompany { get; set; }
        public virtual DbSet<ProviderRetention> ProviderRetention { get; set; }
        public virtual DbSet<ProviderSeriesForDocuments> ProviderSeriesForDocuments { get; set; }
        public virtual DbSet<ProviderType> ProviderType { get; set; }
        public virtual DbSet<PurchaseOrderShippingType> PurchaseOrderShippingType { get; set; }
        public virtual DbSet<PurchaseReason> PurchaseReason { get; set; }
        public virtual DbSet<Rate> Rate { get; set; }
        public virtual DbSet<ResultProdLotReceptionDetail> ResultProdLotReceptionDetail { get; set; }
        public virtual DbSet<ResultReceptionDispatchMaterial> ResultReceptionDispatchMaterial { get; set; }
        public virtual DbSet<ResultReceptionDispatchMaterialDetail> ResultReceptionDispatchMaterialDetail { get; set; }
        public virtual DbSet<Retention> Retention { get; set; }
        public virtual DbSet<RetentionGroup> RetentionGroup { get; set; }
        public virtual DbSet<RetentionSeriesForDocumentsType> RetentionSeriesForDocumentsType { get; set; }
        public virtual DbSet<RetentionType> RetentionType { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<RtInternational> RtInternational { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<SettingDataType> SettingDataType { get; set; }
        public virtual DbSet<SettingDetail> SettingDetail { get; set; }
        public virtual DbSet<SettingNotification> SettingNotification { get; set; }
        public virtual DbSet<SettingPriceList> SettingPriceList { get; set; }
        public virtual DbSet<StateOfContry> StateOfContry { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TAction> TAction { get; set; }
        public virtual DbSet<TaxType> TaxType { get; set; }
        public virtual DbSet<tbsysDocumentTypeDocumentState> tbsysDocumentTypeDocumentState { get; set; }
        public virtual DbSet<TController> TController { get; set; }
        public virtual DbSet<TypeBoxCardAndBank> TypeBoxCardAndBank { get; set; }
        public virtual DbSet<TypeFiltersConfiguration> TypeFiltersConfiguration { get; set; }
        public virtual DbSet<TypeFiltersConfigurationComparisonOperator> TypeFiltersConfigurationComparisonOperator { get; set; }
        public virtual DbSet<TypeINP> TypeINP { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<UserGroupMenu> UserGroupMenu { get; set; }
        public virtual DbSet<UserMenu> UserMenu { get; set; }
        public virtual DbSet<UserRol> UserRol { get; set; }
        public virtual DbSet<UserRolUser> UserRolUser { get; set; }
        public virtual DbSet<Vendor> Vendor { get; set; }
        public virtual DbSet<VisualizationTypeData> VisualizationTypeData { get; set; }
        public virtual DbSet<DocumentStateChangeResp> DocumentStateChangeResp { get; set; }
        public virtual DbSet<DocumentTemporalesvm> DocumentTemporalesvm { get; set; }
        public virtual DbSet<ItemSizePriceClass> ItemSizePriceClass { get; set; }
        public virtual DbSet<MailConfiguration> MailConfiguration { get; set; }
        public virtual DbSet<Prcarga> Prcarga { get; set; }
        public virtual DbSet<PrcargaCola> PrcargaCola { get; set; }
        public virtual DbSet<PriceListItemSizeDetailResp> PriceListItemSizeDetailResp { get; set; }
    
        public virtual ObjectResult<par_AGRUPACION_Result> par_AGRUPACION()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<par_AGRUPACION_Result>("par_AGRUPACION");
        }
    
        public virtual ObjectResult<par_ListaCalendario_Result> par_ListaCalendario(string str_FEmisionDateStart, string str_FEmisionDateEnd)
        {
            var str_FEmisionDateStartParameter = str_FEmisionDateStart != null ?
                new ObjectParameter("str_FEmisionDateStart", str_FEmisionDateStart) :
                new ObjectParameter("str_FEmisionDateStart", typeof(string));
    
            var str_FEmisionDateEndParameter = str_FEmisionDateEnd != null ?
                new ObjectParameter("str_FEmisionDateEnd", str_FEmisionDateEnd) :
                new ObjectParameter("str_FEmisionDateEnd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<par_ListaCalendario_Result>("par_ListaCalendario", str_FEmisionDateStartParameter, str_FEmisionDateEndParameter);
        }
    
        public virtual ObjectResult<par_ListaPreciosCR_Result> par_ListaPreciosCR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<par_ListaPreciosCR_Result>("par_ListaPreciosCR", idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spc_ListaPrecioReport(Nullable<System.DateTime> fechaEmisionInicio, Nullable<System.DateTime> fechaEmisionFinal)
        {
            var fechaEmisionInicioParameter = fechaEmisionInicio.HasValue ?
                new ObjectParameter("fechaEmisionInicio", fechaEmisionInicio) :
                new ObjectParameter("fechaEmisionInicio", typeof(System.DateTime));
    
            var fechaEmisionFinalParameter = fechaEmisionFinal.HasValue ?
                new ObjectParameter("fechaEmisionFinal", fechaEmisionFinal) :
                new ObjectParameter("fechaEmisionFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spc_ListaPrecioReport", fechaEmisionInicioParameter, fechaEmisionFinalParameter);
        }
    
        public virtual int par_ListaPreciosDestinoClase1CR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("par_ListaPreciosDestinoClase1CR", idParameter);
        }
    
        public virtual int par_ListaPreciosDestinoClase2CR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("par_ListaPreciosDestinoClase2CR", idParameter);
        }
    
        public virtual int par_ListaPreciosDestinoClase3CR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("par_ListaPreciosDestinoClase3CR", idParameter);
        }
    
        public virtual int par_ListaPreciosDestinoClase4CR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("par_ListaPreciosDestinoClase4CR", idParameter);
        }
    
        public virtual int par_ListaPreciosDestinoClase5CR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("par_ListaPreciosDestinoClase5CR", idParameter);
        }
    
        public virtual int par_ListaPreciosDestinoClase6CR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("par_ListaPreciosDestinoClase6CR", idParameter);
        }
    
        public virtual ObjectResult<par_ListaPreciosDestinoCR_Result> par_ListaPreciosDestinoCR(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<par_ListaPreciosDestinoCR_Result>("par_ListaPreciosDestinoCR", idParameter);
        }
    }
}
