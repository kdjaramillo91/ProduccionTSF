@using System.Web.Mvc.Html
@using DevExpress.XtraReports.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.ProviderPaymentMethod>

@{
    var grid = Html.DevExpress().GridView<ProviderPaymentMethod>(settings => {
        settings.Name = "ProviderPaymentMethods";
        settings.CallbackRouteValues = new { Controller = "Person", Action = "ProviderPaymentMethod" };

        settings.ClientSideEvents.BeginCallback = "ProviderPaymentTerm_OnBeginCallback";

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Person", Action = "ProviderPaymentMethodAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Person", Action = "ProviderPaymentMethodUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Person", Action = "ProviderPaymentMethodDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;

        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.CommandColumn.Width = Unit.Percentage(8);

        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["isActive"] = true;
            e.NewValues["isPredetermined"] = false;
        };

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_company";
            column.Name = "id_companyPM";
            column.Caption = "Compañía";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_company = (int)DataBinder.Eval(c.DataItem, "id_company");
                Company company = DataProviderCompany.CompanyById(id_company);

                if (company != null)
                {
                    ViewContext.Writer.Write(company.businessName);
                }
            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_companyPM";
                p.DataSource = DataProviderCompany.AllCompanies();
                //p.TextField = "businessName";
                p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.ValueType = typeof(int);

                p.Columns.Add("code", "Cod.", 50);
                p.Columns.Add("businessName", "Nombre", 100);

                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;

                //p.EnableSynchronization = DefaultBoolean.False;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.ClientSideEvents.Validation = "OnProviderControlComboValidation";
                p.ClientSideEvents.Init = "ProviderPaymentMethodCompanyCombo_Init";
                p.ClientSideEvents.SelectedIndexChanged = "ProviderPaymentMethodCompanyCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_division";
            column.Name = "id_divisionPM";
            column.Caption = "División";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_division = (int)DataBinder.Eval(c.DataItem, "id_division");
                Division division = DataProviderDivision.DivisionById(id_division);

                if (division != null)
                {
                    ViewContext.Writer.Write(division.name);
                }
            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_divisionPM";
                p.DataSource = DataProviderDivision.AllDivisions();
                //p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.ValueType = typeof(int);

                p.Columns.Add("code", "Cod.", 50);
                p.Columns.Add("name", "Nombre", 100);

                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;

                //p.EnableSynchronization = DefaultBoolean.False;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.ClientSideEvents.Validation = "OnProviderControlComboValidation";
                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                p.ClientSideEvents.SelectedIndexChanged = "ProviderPaymentMethodDivisionCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_branchOffice";
            column.Name = "id_branchOfficePM";
            column.Caption = "Sucursal";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_branchOffice = (int)DataBinder.Eval(c.DataItem, "id_branchOffice");
                BranchOffice branchOffice = DataProviderBranchOffice.BranchOfficeById(id_branchOffice);

                if (branchOffice != null)
                {
                    ViewContext.Writer.Write(branchOffice.name);
                }
            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_branchOfficePM";
                p.DataSource = DataProviderBranchOffice.AllBranchOffices();
                //p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.ValueType = typeof(int);

                p.Columns.Add("code", "Cod.", 50);
                p.Columns.Add("name", "Nombre", 100);

                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;

                //p.EnableSynchronization = DefaultBoolean.False;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.ClientSideEvents.Validation = "OnProviderControlComboValidation";
                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemBranchOfficeCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_paymentMethod";
            column.Name = "id_paymentMethod";
            column.Caption = "Forma de Pago";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_paymentMethod = (int)DataBinder.Eval(c.DataItem, "id_paymentMethod");
                PaymentMethod paymentMethod = DataProviderPaymentMethod.PaymentMethodById(id_paymentMethod);

                if (paymentMethod != null)
                {
                    ViewContext.Writer.Write(paymentMethod.name);
                }
            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_paymentMethod";
                p.DataSource = DataProviderPaymentMethod.AllPaymentMethods();
                //p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.ValueType = typeof(int);

                p.Columns.Add("code", "Cod.", 50);
                p.Columns.Add("name", "Nombre", 100);

                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;

                //p.EnableSynchronization = DefaultBoolean.False;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.ClientSideEvents.Validation = "OnProviderPaymentMethodPaymentMethodComboValidation";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemBranchOfficeCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "isPredetermined";
            column.Name = "isPredeterminedPM";
            column.Caption = "¿Predeterminado?";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            //column.AutoFilterBy("Sí");
            //column.Settings.AllowAutoFilter = DefaultBoolean.True;

            column.EditorProperties().CheckBox(p =>
            {
                p.ClientInstanceName = "isPredeterminedPM";
            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Name = "isActive";
            column.Caption = "¿Activo?";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            //column.AutoFilterBy("Sí");
            //column.Settings.AllowAutoFilter = DefaultBoolean.True;

            column.EditorProperties().CheckBox(p =>
            {
                p.ClientInstanceName = "isActive";
            });

        });

    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()