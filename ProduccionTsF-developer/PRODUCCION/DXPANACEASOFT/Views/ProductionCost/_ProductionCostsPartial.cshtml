@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model IEnumerable<ProductionCost>

@{
	var gridView = Html.DevExpress().GridView(
		grid =>
		{
			grid.Name = "gvProductionCost";

			grid.CallbackRouteValues = new { Controller = "ProductionCost", Action = "ProductionCostPartial" };

			grid.SettingsEditing.AddNewRowRouteValues = new { Controller = "ProductionCost", Action = "ProductionCostPartialAddNew" };
			grid.SettingsEditing.UpdateRowRouteValues = new { Controller = "ProductionCost", Action = "ProductionCostPartialUpdate" };
			grid.SettingsEditing.DeleteRowRouteValues = new { Controller = "ProductionCost", Action = "ProductionCostPartialDelete" };

			grid.CustomActionRouteValues = new { Controller = "ProductionCost", Action = "DeleteSelectedProductionCost" };

			grid.KeyFieldName = "id";

			grid.Width = Unit.Percentage(100);


			#region GridView Behavior

			grid.SettingsBehavior.AllowSelectByRowClick = true;

			grid.CustomJSProperties = (s, e) =>
			{
				var gv = s as MVCxGridView;
				if (gv == null) { return; }

				e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
				e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
				e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

				if (ViewData["EditMessage"] != null)
				{
					e.Properties["cpEditMessage"] = ViewData["EditMessage"];
				}
			};

			grid.SettingsExport.EnableClientSideExportAPI = true;
			grid.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
			grid.SettingsExport.FileName = "CostosProduccion_" + DateTime.Now.ToString("yyyyMMdd_HHmmss");

			grid.Toolbars.Add(t =>
			{
				t.EnableAdaptivity = true;
				t.Items.Add(GridViewToolbarCommand.ExportToXls);
				t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
				t.Items.Add(GridViewToolbarCommand.ExportToCsv);
			});

			#endregion

			#region Edit Form

			grid.SettingsEditing.Mode = GridViewEditingMode.EditForm;
			grid.SettingsText.PopupEditFormCaption = "Editar Costo de Producción";

			grid.SettingsPopup.EditForm.Modal = true;
			grid.SettingsPopup.EditForm.Width = 800;
			grid.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
			grid.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

			grid.SettingsBehavior.ConfirmDelete = true;

			#endregion

			#region Pager

			grid.SettingsPager.Visible = true;

			#endregion

			#region Client Side Events

			grid.ClientSideEvents.Init = "OnGridViewInit";
			grid.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
			grid.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
			grid.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

			#endregion

			#region Search Panel

			grid.SettingsSearchPanel.Visible = true;
			grid.Styles.SearchPanel.CssClass = "searchPanel";

			#endregion

			#region Title Panel

			grid.Settings.ShowTitlePanel = true;
			grid.Styles.TitlePanel.CssClass = "titleContainer";

			grid.SetTitlePanelTemplateContent(c =>
			{
				ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Costos de Producción</span>");
			});

			#endregion

			#region Group Panel

			grid.Settings.ShowGroupPanel = true;

			#endregion

			#region Filter Row

			grid.Settings.ShowFilterRow = true;
			grid.Settings.ShowFilterRowMenu = true;
			grid.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

			#endregion

			#region Footer Row

			grid.Settings.ShowFooter = true;

			grid.SetFooterRowTemplateContent(c =>
			{
				ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");

				if (grid.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
				{
					ViewContext.Writer.Write(
						@"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>");
					ViewContext.Writer.Write(
						@"<a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""UnselectAllRows();"">Anular Selección</a>");
				}
			});

			#endregion

			#region Command Column

			grid.CommandColumn.Visible = true;
			grid.CommandColumn.Width = Unit.Percentage(2);
			grid.CommandColumn.ShowSelectCheckbox = true;
			grid.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

			#endregion

			#region Master-Details View

			grid.SettingsDetail.ShowDetailRow = false;

			#endregion

			#region Adaptivity Settings

			grid.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
			grid.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

			grid.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
			grid.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
			grid.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

			#endregion

			#region Columns

			grid.Columns.Add(column =>
			{
				column.FieldName = "code";
				column.Name = "code";
				column.Caption = "Código";
				column.ColumnType = MVCxGridViewColumnType.TextBox;
				column.Width = Unit.Percentage(8);
			});

			grid.Columns.Add(column =>
			{
				column.FieldName = "name";
				column.Name = "name";
				column.Caption = "Nombre";
				column.ColumnType = MVCxGridViewColumnType.TextBox;
			});

			grid.Columns.Add(column =>
			{
				column.FieldName = "order";
				column.Name = "order";
				column.Caption = "Orden";
				column.ColumnType = MVCxGridViewColumnType.SpinEdit;
				column.PropertiesEdit.DisplayFormatString = "G";
				column.Width = Unit.Percentage(8);
			});

			grid.Columns.Add(column =>
			{
				column.FieldName = "ProductionCostExecutionType.name";
				column.Name = "id_executionType";
				column.Caption = "Tipo de Ejecución";
				column.ColumnType = MVCxGridViewColumnType.ComboBox;
				column.Width = Unit.Percentage(15);
			});

			grid.Columns.Add(column =>
			{
				column.FieldName = "isActive";
				column.Name = "isActive";
				column.Caption = "¿Activo?";
				column.Width = Unit.Percentage(3);
				column.ColumnType = MVCxGridViewColumnType.CheckBox;

				column.AutoFilterBy("Sí");
				column.Settings.AllowAutoFilter = DefaultBoolean.True;

			});

			if (ShowEditButton() || ShowDeleteButton())
			{
				var commandColumn = new MVCxGridViewCommandColumn()
				{
					ShowEditButton = ShowEditButton(),
					ShowDeleteButton = false,
					Visible = true,
					VisibleIndex = 10,
					Width = Unit.Percentage(5),
					Caption = "Acciones",
				};

				if (ShowDeleteButton())
				{
					commandColumn.CustomButtons.Add(
						new GridViewCommandColumnCustomButton()
						{
							ID = "btnDeleteRow",
							Text = "Desactivar",
						});
				}

				grid.ClientSideEvents.CustomButtonClick = "GridViewItemsCustomCommandButton_Click";

				grid.Columns.Add(commandColumn);
			}

			#endregion

			#region Editor Form Layout

			grid.SetEditFormTemplateContent(content =>
			{
				var id_productionCost = (int?)DataBinder.Eval(content.DataItem, "id");

				var productionCost = id_productionCost.HasValue
					? DataProviderProductionCost.ProductionCostById((int)id_productionCost)
					: new ProductionCost { isActive = true };

				Html.RenderPartial("_ProductionCostEditFormPartial", productionCost);
			});

			#endregion

			grid.InitNewRow = (s, e) =>
			{
				e.NewValues["isActive"] = true;
				e.NewValues["order"] = 0;
			};
		});

	if (ViewData["EditError"] != null)
	{
		gridView.SetEditErrorText((string)ViewData["EditError"]);
	}
}

@gridView.Bind(this.Model).GetHtml()

@functions {
	int GetFilteredRowCountWithoutPage(MVCxGridView grid)
	{
		var selectedRowsOnPage = 0;
		foreach (var key in grid.GetCurrentPageRowValues("id"))
		{
			if (grid.Selection.IsRowSelectedByKey(key))
			{
				selectedRowsOnPage++;
			}
		}
		return grid.Selection.FilteredCount - selectedRowsOnPage;
	}

	bool ShowEditButton()
	{
		var permissions = (ViewData["permissions"] as List<int>);
		return (permissions != null && permissions.Contains(10));
	}

	bool ShowDeleteButton()
	{
		var permissions = (ViewData["permissions"] as List<int>);
		return (permissions != null && permissions.Contains(8));
	}
}