@using DXPANACEASOFT.DataProviders
@model DXPANACEASOFT.Models.MetricUnitConversion


    <table class="table table-condensed">
        <tr>
            <td style="width: 13%;">
                @Html.DevExpress().LabelFor(m => m.id_metricOrigin, settings =>
                {
                    settings.Text = "Métrica de Origen:*";
                    settings.AssociatedControlName = "id_metricOrigin";
                }).GetHtml()
            </td>
            <td colspan="2">
                @{
                    int? id_metricOrigin = (Model != null && Model.id_metricOrigin != 0) ? (int?)Model.id_metricOrigin : null;
                }
                @Html.DevExpress().ComboBoxFor(m => m.id_metricOrigin, settings =>
                {
                    settings.Properties.ClientInstanceName = "id_metricOrigin";

                    settings.Properties.ValueField = "id";
                    settings.Properties.TextField = "name";
                    settings.Properties.ValueType = typeof(int);

                    settings.Width = Unit.Percentage(100);

                    settings.Properties.NullText = "Seleccione Métrica de Origen";
                    settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                    settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                    settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                    settings.Properties.ClientSideEvents.Init = "ComboBoxMetricOrigins_Init";
                    settings.Properties.ClientSideEvents.SelectedIndexChanged = "ComboBoxMetricOrigins_SelectedIndexChanged";

                    settings.ShowModelErrors = true;
                    settings.Properties.ClientSideEvents.Validation = "OnMetricUnitConversionMetricOriginValidation";
                }).BindList(DataProviderMetricUnit.MetricUnitsByCompanyAndCurrent((int)ViewData["id_company"], (Model != null) ? Model.id_metricOrigin : 0)).Bind(id_metricOrigin).GetHtml()
            </td>
            <td style="width: 13%;">
                @Html.DevExpress().LabelFor(m => m.id_metricDestiny, settings =>
                {
                    settings.Text = "Métrica de Destino:*";
                    settings.AssociatedControlName = "id_metricDestiny";
                }).GetHtml()
            </td>
            <td colspan="2">
                @{
                    int? id_metricDestiny = (Model != null && Model.id_metricDestiny != 0) ? (int?)Model.id_metricDestiny : null;
                }
                @Html.DevExpress().ComboBoxFor(m => m.id_metricDestiny, settings =>
                {
                    settings.Properties.ClientInstanceName = "id_metricDestiny";

                    settings.Properties.ValueField = "id";
                    settings.Properties.TextField = "name";
                    settings.Properties.ValueType = typeof(int);

                    settings.Width = Unit.Percentage(100);

                    settings.Properties.NullText = "Seleccione Métrica de Destino";
                    settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                    settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                    settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;


                    settings.ShowModelErrors = true;
                    settings.Properties.ClientSideEvents.Validation = "OnMetricUnitConversionMetricDestinyValidation";
                }).BindList(DataProviderMetricUnit.MetricUnitsDestinyByCompanyOriginAndCurrent((int)ViewData["id_company"], (Model != null) ? Model.id_metricOrigin : 0, (Model != null) ? Model.id_metricDestiny : 0)).Bind(id_metricDestiny).GetHtml()
            </td>
        </tr>
        <tr>
            <td>
                @Html.DevExpress().LabelFor(m => m.factor, settings =>
                {
                    settings.Text = "Factor:*";
                    settings.AssociatedControlName = "factor";
                }).GetHtml()
            </td>
            <td colspan="2">
                @Html.DevExpress().SpinEditFor(m => m.factor, settings =>
                {
                    settings.Properties.ClientInstanceName = "factor";

                    settings.Width = Unit.Percentage(100);

                    settings.Properties.DisplayFormatString = "N6";
                    settings.Properties.DisplayFormatInEditMode = true;
                    settings.Properties.DecimalPlaces = 6;
                    settings.Properties.SpinButtons.ShowIncrementButtons = true;
                    settings.Properties.SpinButtons.ShowLargeIncrementButtons = true;
                    settings.Properties.Increment = 1.00M;
                    settings.Properties.LargeIncrement = 0.5M;
                    settings.Properties.MinValue = 0;
                    //settings.Properties.MaxValue = 100;
                    settings.Properties.NumberType = SpinEditNumberType.Float;
                    settings.Properties.NumberFormat = SpinEditNumberFormat.Custom;

                    settings.Properties.NullText = "0";
                    settings.ShowModelErrors = true;
                    settings.Properties.ClientSideEvents.Validation = "OnMetricUnitConversionFactorValidation";

                }).GetHtml()
            </td>
            <td>
                @Html.DevExpress().LabelFor(m => m.isActive, settings =>
                {
                    settings.Text = "¿Activo?:";
                    settings.AssociatedControlName = "isActive";
                }).GetHtml()
            </td>
            <td colspan="2">
                @Html.DevExpress().CheckBoxFor(m => m.isActive, settings =>
                {
                    settings.Properties.ClientInstanceName = "isActive";

                    settings.Width = Unit.Percentage(100);
                }).GetHtml()
            </td>
        </tr>
        <tr>
            
        </tr>
        <tr>
            <td colspan="6" style="text-align: right;">
                @Html.DevExpress().Button(settings =>
                {
                    settings.Name = "btnUpdate";
                    settings.Text = "Actualizar";
                    settings.RenderMode = ButtonRenderMode.Button;
                    settings.ImagePosition = ImagePosition.Left;
                    settings.Images.Image.IconID = IconID.ActionsSave16x16devav;
                    settings.UseSubmitBehavior = false;
                    settings.ClientSideEvents.Click = "ButtonUpdate_Click";
                }).GetHtml()
                @Html.DevExpress().Button(settings =>
                {
                    settings.Name = "btnCancel";
                    settings.Text = "Cancelar";
                    settings.RenderMode = ButtonRenderMode.Button;
                    settings.ImagePosition = ImagePosition.Left;
                    settings.Images.Image.IconID = IconID.ActionsClose16x16office2013;
                    settings.UseSubmitBehavior = false;
                    settings.ClientSideEvents.Click = "ButtonCancel_Click";
                }).GetHtml()
            </td>
        </tr>
        <tr id="metricUnitConversionAlertRow" style="display: none;">
            <td colspan="6">
                <div class="alert alert-danger fade in" style="margin-top:18px;">
                    <button type="button" class="close" data-dismiss="alert" aria-label="close" title="close" style="top: 0px; right: 0px;"><span aria-hidden="true">&times;</span></button>
                    <span id="metricUnitConversionErrorMessage"></span>
                </div>
            </td>
        </tr>
    </table>

<script src="~/Scripts/metricunitconversion/editform.js"></script>
