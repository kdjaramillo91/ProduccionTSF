@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models.RemGuide
@using DXPANACEASOFT.Models.RequestInventoryMoveDTO;

@{
	var grid = Html.DevExpress().GridView<ResultRequestInventoryMoveAll>(settings =>
	{
		settings.Name = "gvRequestInventoryMoveAll";
		settings.CallbackRouteValues = new { Controller = "RequestInventoryMove", Action = "RequestInventoryMoveAll" };

		settings.SettingsSearchPanel.Visible = true;
		settings.Styles.SearchPanel.CssClass = "searchPanel";

		settings.CommandColumn.Visible = true;
		settings.SettingsBehavior.ConfirmDelete = true;

		settings.KeyFieldName = "id";

		settings.SettingsPager.Visible = true;
		settings.Settings.ShowGroupPanel = true;
		settings.Settings.ShowFilterRow = true;
		settings.SettingsBehavior.AllowSelectByRowClick = true;

		settings.SettingsBehavior.SortMode = DevExpress.XtraGrid.ColumnSortMode.Custom;

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";
		settings.Settings.ShowFooter = true;

		settings.ClientSideEvents.Init = "OnGridViewInit";
		settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallBack";
		settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
		settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

		settings.Settings.ShowFilterRowMenu = true;

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

//settings.CommandColumn.ShowSelectCheckbox = true;
//      settings.CommandColumn.Width = Unit.Percentage(3);
//      settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
//settings.CommandColumn.

settings.SetTitlePanelTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Requerimiento de Inventario</span>");
		});

		settings.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
			if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			{
				ViewContext.Writer.Write(
					@"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""gvResultsSelectAllRows()"">Seleccionar Todos</a>
			  <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""gvResultsClearSelection()"">Anular Selección</a>"
				);
			}
		});

//MASTER DETAILS
settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;
		settings.SettingsDetail.ShowDetailRow = false;
		settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
		settings.Styles.Header.Font.Bold = true;

//Number Document
settings.Columns.Add(m => m.nameSequentialR, column =>
		{
			column.Caption = "Número";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = System.Web.UI.WebControls.Unit.Percentage(10);
		});
//Number Document
settings.Columns.Add(m => m.sequentialDispatchMaterial, column =>
		{
			column.Caption = "Requisición";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = System.Web.UI.WebControls.Unit.Percentage(10);
		});
//Number RemissionGuide
settings.Columns.Add(m => m.sequentialRemissionGuide, column =>
		{
			column.Caption = "Guía";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = System.Web.UI.WebControls.Unit.Percentage(10);
		});
//Fecha Emisión
settings.Columns.Add(m => m.dateEmissionR, column =>
		{
			column.Caption = "Fecha de Emisión";
			column.ColumnType = MVCxGridViewColumnType.DateEdit;
			column.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";

			column.SortOrder = DevExpress.Data.ColumnSortOrder.Descending;
			column.Width = System.Web.UI.WebControls.Unit.Percentage(10);
		});
//Name Warehouse
settings.Columns.Add(m => m.descWarehouseR, column =>
		{
			column.Caption = "Bodega";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
		});
//Person Request
settings.Columns.Add(m => m.namePersonRequestR, column =>
		{
			column.Caption = "Persona Requiere";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
		});
//Nature Move
settings.Columns.Add(m => m.nameNatureMoveR, column =>
		{
			column.Caption = "Naturaleza";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = System.Web.UI.WebControls.Unit.Percentage(10);
		});
//State Document
settings.Columns.Add(m => m.nameDocumentStateR, column =>
		{
			column.Caption = "Estado";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = System.Web.UI.WebControls.Unit.Percentage(10);
		});

// COMMAND COLUMN
MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn();
		commandColumn.ShowEditButton = false;
		commandColumn.ShowDeleteButton = false;
		commandColumn.Visible = true;
		commandColumn.VisibleIndex = 14;
		commandColumn.Caption = "Acciones";
		commandColumn.Width = Unit.Percentage(3);

		commandColumn.CustomButtons.Add(
			new GridViewCommandColumnCustomButton
			{
				ID = "btnEditRow",
				Text = "Editar"
			}
		);
		settings.ClientSideEvents.CustomButtonClick = "GridViewRequestInventoryMoveButtonEdit_Click";
		settings.Columns.Add(commandColumn);

	});
	if (ViewData["EditError"] != null)
	{
		grid.SetEditErrorText((string)ViewData["EditError"]);
	}
}
@grid.Bind(Model).GetHtml()

@functions {
	String GetUserName(int id)
	{
		var user = DataProviderUser.UserById(id);
		return user.username;
	}
}
