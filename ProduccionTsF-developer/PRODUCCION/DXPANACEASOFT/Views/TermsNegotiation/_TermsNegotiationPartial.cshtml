@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models



@{
    var grid = Html.DevExpress().GridView<TermsNegotiation>(settings =>
    {
        settings.Name = "gvTermsNegotiation";
        settings.CallbackRouteValues = new { Controller = "TermsNegotiation", Action = "TermsNegotiationPartial" };



        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "TermsNegotiation", Action = "TermsNegotiationPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "TermsNegotiation", Action = "TermsNegotiationPartialUpdate" };



        settings.Width = Unit.Percentage(100);

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        settings.CommandColumn.Visible = true;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.ShowSelectCheckbox = false;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.None;
        settings.CommandColumn.Width = Unit.Percentage(3);

        settings.KeyFieldName = "id";


        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRowMenu = true;

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.Settings.ShowFooter = true;

        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
        settings.SettingsExport.FileName = "Termino_Negosiacion_" + DateTime.Now.ToString("yyyy_MM_dd_hh_mm_ss");
        settings.Toolbars.Add(t =>
        {
            t.EnableAdaptivity = true;
            t.Items.Add(GridViewToolbarCommand.ExportToXls);
            t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
            t.Items.Add(GridViewToolbarCommand.ExportToCsv);
        });

        #region EDITFORM

        settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
        settings.SettingsText.PopupEditFormCaption = "Añadir Términos de Negociación";
        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.Width = 800;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

        settings.SettingsBehavior.ConfirmDelete = true;


        #endregion


        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;


        #region BOTONES DE COMANDO PARA REGISTRO


        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = true,
            ShowDeleteButton = false,
            Visible = true,
            VisibleIndex = 11,
            Width = Unit.Percentage(5),
            Caption = "Acciones"
        };





        settings.Columns.Add(commandColumn);


        #endregion
        #region
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

            e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

            if (ViewData["EditMessage"] != null)
            {
                e.Properties["cpEditMessage"] = ViewData["EditMessage"];
            }
        };

        #endregion


        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Términos de Negociación</span>");
        });

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""gvResultsSelectAllRows()"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""gvResultsClearSelection()"">Anular Selección</a>"
                );
            }
        });





        #region ColumnsEdit

        settings.SetEditFormTemplateContent(c =>
        {
            int? id_TermsNegotiation = (int?)DataBinder.Eval(c.DataItem, "id");
            TermsNegotiation TermsNegotiation = DataProviderTermsNegotiation.TermsNegotiationById(id_TermsNegotiation);

            TermsNegotiation = TermsNegotiation ?? new TermsNegotiation() { isActive=true };



            Html.RenderPartial("_FormEditTermsNegotiation", TermsNegotiation);
        });

        #endregion

        #region MASTER DETAILS

        settings.SettingsDetail.ShowDetailRow = true;
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;

        settings.SetDetailRowTemplateContent(c =>
        {
            int? id_TermsNegotiation = (int?)DataBinder.Eval(c.DataItem, "id");
            TermsNegotiation TermsNegotiation = DataProviderTermsNegotiation.TermsNegotiationById(id_TermsNegotiation);

            Html.RenderPartial("_TermsNegotiationDetailPartial", TermsNegotiation);
        });
        #endregion


        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        //Document

        settings.Columns.Add(m => m.id, column =>
        {
            column.Caption = "Número";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(5);

        });


        settings.Columns.Add(m => m.code, column =>
        {
            column.Caption = "Código";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(15);

        });
        settings.Columns.Add(m => m.name, column =>
        {
            column.Caption = "Nombre";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(30);

        });


        settings.Columns.Add(m => m.isActive, column =>
        {
            column.Caption = "¿Activo";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.Width = Unit.Percentage(15);
        });
    });


    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}

@grid.Bind(Model).GetHtml()

@functions {
    String GetUserName(int id)
    {
        var user = DataProviderUser.UserById(id);
        return user.username;
    }

    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}
<script src="~/Scripts/TermsNegotiation/editform.js"></script>

<script src="~/Scripts/TermsNegotiation/validations.js"></script>