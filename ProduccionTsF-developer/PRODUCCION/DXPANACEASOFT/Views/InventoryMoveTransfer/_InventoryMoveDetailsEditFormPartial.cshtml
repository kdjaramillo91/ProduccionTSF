@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.InventoryMoveDetail>

@{
    string code = (ViewData["code"] != null) ? (string)ViewData["code"] : "";
    //code = code != "" ? code : (string)ViewBag.codeDocumentTypeAux;// $("#codeDocumentType").val();
    int id_inventoryMove = (int?) ViewData["id_inventoryMove"] ?? 0;
    var entityObjectPermissions = (EntityObjectPermissions)ViewData["entityObjectPermissions"];
    var showCost = true;
    if (entityObjectPermissions != null)
    {
        var objectPermissions = entityObjectPermissions.listObjectPermissions.FirstOrDefault(fod => fod.codeObject == "COS");
        showCost = objectPermissions == null;
    }
}

@{
    var grid = Html.DevExpress().GridView<InventoryMoveDetail>(settings => {
        settings.Name = "gridViewMoveDetails";
        settings.CallbackRouteValues = new { Controller = "InventoryMove", Action = "InventoryMoveDetailsEditFormPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "InventoryMove", Action = "InventoryMoveDetailsEditFormPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "InventoryMove", Action = "InventoryMoveDetailsEditFormPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "InventoryMove", Action = "InventoryMoveDetailsEditFormPartialDelete" };

        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

        settings.Width = Unit.Percentage(100);
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.Styles.Header.Wrap = DefaultBoolean.True;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = false;

        settings.SettingsBehavior.ConfirmDelete = false;

        settings.KeyFieldName = "id";

        //Eventos
        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

        //Pie de tabla
        settings.Settings.ShowFooter = true;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView detailsGrid = s as MVCxGridView;
            if (detailsGrid == null) return;

            e.Properties["cpVisibleRowCount"] = detailsGrid.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(detailsGrid);

            int index = detailsGrid.EditingRowVisibleIndex >= 0 ? detailsGrid.EditingRowVisibleIndex : -1;
            e.Properties["cpRowIndex"] = index;
            if (detailsGrid.EditingRowVisibleIndex >= 0)
            {
                e.Properties["cpRowKey"] = detailsGrid.GetRowValues(index, "id");
            }

            if (detailsGrid.IsEditing)
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrderDetails = null;
                try
                {
                    purchaseOrderDetails = (List<InventoryMoveDetailPurchaseOrder>)detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrderDetails = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrderDetails = null;
                    }
                }



                if (purchaseOrderDetails != null && purchaseOrderDetails.Count > 0)
                {
                    e.Properties["cpEditingRowPurchaseOrderDetail"] = purchaseOrderDetails[0].id_purchaseOrderDetail;
                }
                else
                {
                    e.Properties["cpEditingRowPurchaseOrderDetail"] = 0;
                }
                //e.Properties["cpEditingRowSalesOrderDetail"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "PurchaseOrderDetailPurchaseRequest") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "PurchaseOrderDetailPurchaseRequest") : (new List<PurchaseOrderDetailPurchaseRequest>());

                List<InventoryMoveDetailTransfer> inventoryMoveExits = null;
                try
                {
                    inventoryMoveExits = (List<InventoryMoveDetailTransfer>)detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "InventoryMoveDetailTransfer");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "InventoryMoveDetailTransfer");
                        inventoryMoveExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        inventoryMoveExits = null;
                    }
                }



                if (inventoryMoveExits != null && inventoryMoveExits.Count > 0)
                {
                    e.Properties["cpEditingRowInventoryMoveExit"] = inventoryMoveExits[0].id_inventoryMoveExit;
                }
                else
                {
                    e.Properties["cpEditingRowInventoryMoveExit"] = 0;
                }

            }

            var unitPriceMoveAux = (detailsGrid.IsEditing && detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "unitPriceMove") != null) ? (decimal)detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "unitPriceMove") : ((decimal)0);
            e.Properties["cpEditingRowUnitPriceMove"] = unitPriceMoveAux;
            var amountMoveAux = (detailsGrid.IsEditing && detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "amountMove") != null) ? (decimal)detailsGrid.GetRowValues(detailsGrid.EditingRowVisibleIndex, "amountMove") : ((decimal)0);
            e.Properties["cpEditingRowBalanceCost"] = (unitPriceMoveAux * amountMoveAux);

            List<InventoryMoveDetail> rows = (Model as List<InventoryMoveDetail>);
            rows = (rows != null) ? rows.ToList() : new List<InventoryMoveDetail>();

            e.Properties["cpRowsCount"] = rows.Count;
            //e.Properties["cpCode"] = ViewData["code"];
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""gvEditDetailsSelectAllRows();"">Seleccionar Todos</a>
                    <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""gvEditDetailsClearSelection();"">Anular Selección.</a>"
                );
            }
        });


        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = false;
        //settings.CommandColumn.ShowEditButton = false;


        //settings.Settings.ShowGroupPanel = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SettingsEditing.ShowModelErrorsForEditors = true;

        //settings.InitNewRow = (s, e) =>
        //{
        //    e.NewValues["quantityOrdered"] = 0.0M;
        //    e.NewValues["quantityProgrammed"] = 1.00M;
        //    e.NewValues["quantityDispatchPending"] = 1.00M;
        //    e.NewValues["quantityReceived"] = 0.00M;
        //};

        settings.Columns.Add(column =>
        {
            column.Name = "id_inventoryMoveExit";
            column.Caption = "No. Egreso Por Transferencia";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.String;
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            //column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                List<InventoryMoveDetailTransfer> inventoryMoveExits = null;

                try
                {
                    inventoryMoveExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                        inventoryMoveExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        inventoryMoveExits = null;
                    }
                }

                string text = string.Empty;

                if (inventoryMoveExits != null && inventoryMoveExits.Count > 0)
                {
                    int id_inventoryMoveExit = inventoryMoveExits[0].id_inventoryMoveExit;
                    InventoryMove inventoryMove = DataProviderInventoryMove.InventoryMove(id_inventoryMoveExit);

                    text += inventoryMove.Document.number;

                    if (inventoryMoveExits[0].id_inventoryMoveDetailExit == null || inventoryMove.Document.DocumentState.code != "03")//03 APROBADA
                    {
                        text = "<font color='red'>" + text + "</font>";
                    }
                    //text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);

                //var text = "";
                //RemissionGuide remission = (RemissionGuide)Model[c.ItemIndex];
                //if (remission.Document.DocumentState.code.Equals("03"))
                //{
                //    foreach (var remissionGuideDispatchMaterial in remission.RemissionGuideDispatchMaterial)
                //    {
                //        var sumQuanty = remissionGuideDispatchMaterial.InventoryMoveDetailExitDispatchMaterials != null ?
                //                        remissionGuideDispatchMaterial.InventoryMoveDetailExitDispatchMaterials.Sum(s => s.quantity) : (decimal)0;
                //        if (sumQuanty != remissionGuideDispatchMaterial.sourceExitQuantity)
                //        {
                //            text = "<font color='red'>" + remission.Document.DocumentState.name + "</font>";
                //            break;
                //        }
                //    }

                //    if (text == "")
                //    {
                //        text = "<font color='green'>" + remission.Document.DocumentState.name + "</font>";
                //    }
                //}
                //else
                //{
                //    text = remission.Document.DocumentState.name;
                //}
                //ViewContext.Writer.Write(text);

            });

            column.SetEditItemTemplateContent(c =>
            {
                List<InventoryMoveDetailTransfer> inventoryMoveExits = null;

                try
                {
                    inventoryMoveExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                        inventoryMoveExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        inventoryMoveExits = null;
                    }
                }

                string text = string.Empty;

                if (inventoryMoveExits != null && inventoryMoveExits.Count > 0)
                {
                    int id_inventoryMoveExit = inventoryMoveExits[0].id_inventoryMoveExit;
                    InventoryMove inventoryMove = DataProviderInventoryMove.InventoryMove(id_inventoryMoveExit);

                    text += inventoryMove.Document.number;

                    if (inventoryMoveExits[0].id_inventoryMoveDetailExit == null || inventoryMove.Document.DocumentState.code != "03")//03 APROBADA
                    {
                        text = "<font color='red'>" + text + "</font>";
                    }

                    //text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);
            });

            column.Visible = (ViewData["code"] != null && ViewData["code"].Equals("34"));//Ingreso Por Transferencia

        });

        settings.Columns.Add(column =>
        {
            column.Name = "id_purchaseOrder";
            column.Caption = "No. Orden de Compra";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.String;
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            //column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                string text = string.Empty;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    int id_purchaseOrder = purchaseOrders[0].id_purchaseOrder;
                    PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(id_purchaseOrder);

                    text += order.Document.number;

                    text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);
            });

            column.SetEditItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                string text = string.Empty;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    int id_purchaseOrder = purchaseOrders[0].id_purchaseOrder;
                    PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(id_purchaseOrder);

                    text += order.Document.number;

                    text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);
            });

            column.Visible = (ViewData["code"] != null && ViewData["code"].Equals("04"));//Ingreso x Orden de Compra

        });

        settings.Columns.Add(column =>
        {
            column.Name = "masterCode";
            column.Caption = "Código";
            column.ReadOnly = true;
            //column.UnboundType = UnboundColumnType.String;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            //column.PropertiesEdit.ClientInstanceName = "masterCode";

            //column.Width = Unit.Percentage(5);

            column.SetDataItemTemplateContent(c =>
            {
                int id_item = (int)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string text = (item != null) ? item.masterCode : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "masterCode";
                p.Width = Unit.Percentage(100);
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });

            //column.SetEditItemTemplateContent(c =>
            //{
            //    int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
            //    Item item = DataProviderItem.Item(id_item);

            //    string masterCode = (item != null) ? item.masterCode : "";

            //    Html.DevExpress().TextBox(textBox =>
            //    {
            //        textBox.Name = "masterCode";
            //        textBox.Properties.ClientInstanceName = "masterCode";
            //        textBox.Width = Unit.Percentage(100);
            //        textBox.ReadOnly = true;
            //        textBox.ShowModelErrors = false;

            //    }).Bind(masterCode).GetHtml();//.Render();//.Bind(masterCode).Render();
            //});

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_item";
            column.Name = "id_item";
            column.Caption = "Nombre del Producto";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(15);
            column.ReadOnly = ViewData["code"].Equals("34");
            column.EditorProperties().ComboBox(p =>
            {
                column.SetEditItemTemplateContent(c =>
                {
                    var detIM = new InventoryMoveDetail();
                    if (c.ItemIndex >= 0)
                    {
                        detIM = Model[c.ItemIndex];
                    }

                    Html.RenderPartial("ComponentsDetail/_ComboBoxItems", detIM);
                });
            });
            column.SetDataItemTemplateContent(c =>
            {

                var cellText = DataProviderItem.Item((int?)DataBinder.Eval(c.DataItem, "id_item"));
                string nombreProducto = "";
                if (cellText != null)
                {
                    nombreProducto = cellText.name;
                }
                //((DataBinder.Eval(c.DataItem, "id_item") != null) ? DataBinder.Eval(c.DataItem, "aux_code_item").ToString() : "") + "," + ((DataBinder.Eval(c.DataItem, "name_item") != null) ? DataBinder.Eval(c.DataItem, "name_item").ToString() : "");
                ViewContext.Writer.Write(string.Format("{0}", nombreProducto));
            });
            //column.EditorProperties().ComboBox(p =>
            //{
            //    p.ClientInstanceName = "id_item";
            //    //p.DataSource = (ViewData["code"] != null && ViewData["code"].Equals("04")) ? DataProviderItem.AllMIItemsByCompany((int?)ViewData["id_company"]) :
            //    //               (DataProviderItem.AllInventoryItemsByCompany((int?)ViewData["id_company"]));
            //    p.ValueField = "id";
            //    p.TextFormatString = "{1}";
            //    p.ValueType = typeof(int);
            //    p.CallbackPageSize = 30;
            //    p.Width = Unit.Percentage(100);
            //    p.DropDownStyle = DropDownStyle.DropDownList;
            //    p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            //    p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
            //    p.CallbackRouteValues = new { Controller = "InventoryMove", Action = "GetItems" };
            //    p.CallbackPageSize = 30;
            //    p.Columns.Add("masterCode", "Código", 70);
            //    p.Columns.Add("name", "Nombre del Producto", 200);
            //    p.ClientSideEvents.Init = "ItemCombo_OnInit";
            //    p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            //    p.ClientSideEvents.SelectedIndexChanged = "DetailsItemsCombo_SelectedIndexChanged";
            //    p.ClientSideEvents.Validation = "OnItemValidation";
            //});
        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "id_metricUnitPresentation";
            column.Name = "metricUnitInventoryPurchase";
            //column.PropertiesEdit.ClientInstanceName = "metricUnit";
            column.Caption = (code != null && code.Equals("04")) ? "UM Compra" : ((code != null && code.Equals("34")) ? "UM Mov.Egr." : "UM Inv.");
            //column.Width = Unit.Percentage(3);
            //column.ColumnType = MVCxGridViewColumnType.ComboBox;
            //column.UnboundType = UnboundColumnType.String;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.PropertiesEdit.ClientInstanceName = "metricUnitInventoryPurchase";
            //column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                var item = DataProviderItem.Item(id_item);
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];
                string metricUnitPurchase = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                string metricUnitInventory = (item != null && item.ItemInventory != null && item.ItemInventory.MetricUnit != null) ? item.ItemInventory.MetricUnit.code : "";

                List<InventoryMoveDetailTransfer> inventoryMoveDetailExits = null;

                try
                {
                    inventoryMoveDetailExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer");
                        inventoryMoveDetailExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        inventoryMoveDetailExits = null;
                    }
                }

                string metricUnitMovExit = metricUnitInventory;

                if (inventoryMoveDetailExits != null && inventoryMoveDetailExits.Count > 0)
                {
                    int? id_inventoryMoveDetailExit = inventoryMoveDetailExits[0].id_inventoryMoveDetailExit;
                    InventoryMoveDetail inventoryMoveDetail = DataProviderInventoryMove.InventoryMoveDetail(id_inventoryMoveDetailExit);

                    metricUnitMovExit = (inventoryMoveDetail != null && inventoryMoveDetail.MetricUnit1 != null ) ? inventoryMoveDetail.MetricUnit1.code : metricUnitInventory;

                }

                //string metricUnit = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                ViewContext.Writer.Write((code != null && code.Equals("04")) ? metricUnitPurchase : ((code != null && code.Equals("34")) ? metricUnitMovExit : metricUnitInventory));
            });

            column.SetEditItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                var item = DataProviderItem.Item(id_item);
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];
                string metricUnitPurchase = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                string metricUnitInventory = (item != null && item.ItemInventory != null && item.ItemInventory.MetricUnit != null) ? item.ItemInventory.MetricUnit.code : "";

                List<InventoryMoveDetailTransfer> inventoryMoveDetailExits = null;

                try
                {
                    inventoryMoveDetailExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer");
                        inventoryMoveDetailExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        inventoryMoveDetailExits = null;
                    }
                }

                string metricUnitMovExit = metricUnitInventory;

                if (inventoryMoveDetailExits != null && inventoryMoveDetailExits.Count > 0)
                {
                    int? id_inventoryMoveDetailExit = inventoryMoveDetailExits[0].id_inventoryMoveDetailExit;
                    InventoryMoveDetail inventoryMoveDetail = DataProviderInventoryMove.InventoryMoveDetail(id_inventoryMoveDetailExit);

                    metricUnitMovExit = (inventoryMoveDetail != null && inventoryMoveDetail.MetricUnit1 != null) ? inventoryMoveDetail.MetricUnit1.code : metricUnitInventory;

                }

                //string metricUnit = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                var metricUnit = ((code != null && code.Equals("04")) ? metricUnitPurchase : ((code != null && code.Equals("34")) ? metricUnitMovExit : metricUnitInventory));

                Html.DevExpress().TextBox(textBox =>
                {
                    textBox.Name = "metricUnitInventoryPurchase";
                    textBox.Properties.ClientInstanceName = "metricUnitInventoryPurchase";
                    textBox.Width = Unit.Percentage(100);
                    textBox.ReadOnly = true;
                    textBox.ShowModelErrors = false;

                }).Bind(metricUnit).GetHtml();//.Render();//.Bind(masterCode).Render();
            });


        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "id_warehouse";
            column.Name = "id_warehouseExit";
            column.Caption = "Bodega Egreso";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Visible = (code != null && code.Equals("34"));//Ingreso Por Transferencia

            column.SetDataItemTemplateContent(c =>
            {
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];

                //string text = (detail.InventoryMoveDetail2 != null) ? detail.InventoryMoveDetail2.Warehouse.name : "";
                List<InventoryMoveDetailTransfer> warehouseExits = null;

                try
                {
                    warehouseExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                        warehouseExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        warehouseExits = null;
                    }
                }

                string text = string.Empty;

                if (warehouseExits != null && warehouseExits.Count > 0)
                {
                    int id_warehouseExit = warehouseExits[0].id_warehouseExit;
                    Warehouse warehouse = DataProviderWarehouse.WarehouseById(id_warehouseExit);

                    text = warehouse.name;

                }

                ViewContext.Writer.Write(text);
            });

            column.SetEditItemTemplateContent(c =>
            {
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];

                //string text = (detail.InventoryMoveDetail2 != null) ? detail.InventoryMoveDetail2.Warehouse.name : "";
                List<InventoryMoveDetailTransfer> warehouseExits = null;

                try
                {
                    warehouseExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                        warehouseExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        warehouseExits = null;
                    }
                }

                string text = string.Empty;

                if (warehouseExits != null && warehouseExits.Count > 0)
                {
                    int id_warehouseExit = warehouseExits[0].id_warehouseExit;
                    Warehouse warehouse = DataProviderWarehouse.WarehouseById(id_warehouseExit);

                    text = warehouse.name;

                }

                ViewContext.Writer.Write(text);
            });

        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "id_warehouse";
            column.Name = "id_warehouseLocationExit";
            column.Caption = "Ubicación Egreso";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Visible = (code != null && code.Equals("34"));//Ingreso Por Transferencia

            column.SetDataItemTemplateContent(c =>
            {
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];

                //string text = (detail.InventoryMoveDetail2 != null) ? detail.InventoryMoveDetail2.Warehouse.name : "";
                List<InventoryMoveDetailTransfer> warehouseLocationExits = null;

                try
                {
                    warehouseLocationExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                        warehouseLocationExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        warehouseLocationExits = null;
                    }
                }

                string text = string.Empty;

                if (warehouseLocationExits != null && warehouseLocationExits.Count > 0)
                {
                    int id_warehouseLocationExit = warehouseLocationExits[0].id_warehouseLocationExit;
                    WarehouseLocation warehouseLocation = DataProviderWarehouseLocation.WarehouseLocationById(id_warehouseLocationExit);

                    text = warehouseLocation.name;

                }

                ViewContext.Writer.Write(text);
            });

            column.SetEditItemTemplateContent(c =>
            {
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];

                //string text = (detail.InventoryMoveDetail2 != null) ? detail.InventoryMoveDetail2.Warehouse.name : "";
                List<InventoryMoveDetailTransfer> warehouseLocationExits = null;

                try
                {
                    warehouseLocationExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                        warehouseLocationExits = temp.ToList();
                    }
                    catch (Exception)
                    {
                        warehouseLocationExits = null;
                    }
                }

                string text = string.Empty;

                if (warehouseLocationExits != null && warehouseLocationExits.Count > 0)
                {
                    int id_warehouseLocationExit = warehouseLocationExits[0].id_warehouseLocationExit;
                    WarehouseLocation warehouseLocation = DataProviderWarehouseLocation.WarehouseLocationById(id_warehouseLocationExit);

                    text = warehouseLocation.name;

                }

                ViewContext.Writer.Write(text);
            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_warehouse";
            column.Name = "id_warehouseDetail";
            column.Caption = (code != null && code.Equals("34")) ? "Bodega Ingreso": ((code != null && code.Equals("32")) ? "Bodega Egreso" : ("Bodega"));
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.ReadOnly = (code != null && code.Equals("34"));//Ingreso Por Transferencia

            column.SetDataItemTemplateContent(c =>
            {
                int id_warehouse = (int)DataBinder.Eval(c.DataItem, "id_warehouse");
                Warehouse warehouse = DataProviderWarehouse.WarehouseById(id_warehouse);

                string text = (warehouse != null) ? warehouse.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_warehouseDetail";
                comboBox.DataSource = DataProviderWarehouse.Warehouses((int?)ViewData["id_company"], (EntityObjectPermissions)ViewData["entityObjectPermissions"]);
                comboBox.ValueField = "id";
                comboBox.TextField = "name";
                //comboBox.TextFormatString = "{1}";
                comboBox.ValueType = typeof(int);
                comboBox.DropDownStyle = DropDownStyle.DropDownList;
                comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                /*comboBox.Columns.Add("masterCode", "Código", Unit.Percentage(30));
                comboBox.Columns.Add("name", "Producto", Unit.Percentage(50));
                comboBox.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", Unit.Percentage(20));*/
                //comboBox.ClientSideEvents.DropDown = "ItemsCombo_DropDown";
                //comboBox.ClientSideEvents.Init = (code != null && (code.Equals("06")|| code.Equals("05"))) ? "OnInitWarehouseExit" : "OnInitWarehouseEntry";
                comboBox.ClientSideEvents.Validation = "OnWarehouseDetailValidation";
                //comboBox.ClientSideEvents.SelectedIndexChanged = (code != null && (code.Equals("06"))) ? "OnWarehouseCombo_SelectedIndexChanged" : "";
                comboBox.ClientSideEvents.SelectedIndexChanged = "OnWarehouseDetailCombo_SelectedIndexChanged";
                comboBox.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_warehouseLocation";
            column.Name = "id_warehouseLocationDetail";
            column.Caption = (code != null && code.Equals("34")) ? "Ubicación Ingreso" : "Ubicación";
            //column.Caption = "Ubicación";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_warehouseLocation = (int?)DataBinder.Eval(c.DataItem, "id_warehouseLocation");
                WarehouseLocation warehouseLocation = DataProviderWarehouseLocation.WarehouseLocationById(id_warehouseLocation);

                string text = (warehouseLocation != null) ? warehouseLocation.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_warehouseLocationDetail";
                comboBox.DataSource = DataProviderWarehouseLocation.WarehouseLocations((int)ViewData["id_company"]);
                comboBox.ValueField = "id";
                comboBox.TextField = "name";
                //comboBox.TextFormatString = "{1}";
                comboBox.ValueType = typeof(int);

                comboBox.DropDownStyle = DropDownStyle.DropDownList;
                comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                /*comboBox.Columns.Add("masterCode", "Código", Unit.Percentage(30));
                comboBox.Columns.Add("name", "Producto", Unit.Percentage(50));
                comboBox.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", Unit.Percentage(20));*/
                //comboBox.ClientSideEvents.DropDown = "ItemsCombo_DropDown";
                //comboBox.ClientSideEvents.Init = (code != null && (code.Equals("06") || code.Equals("05"))) ? "OnInitWarehouseLocationExit" : "OnInitWarehouseLocationEntry";
                comboBox.ClientSideEvents.Validation = "OnWarehouseLocationDetailValidation";
                comboBox.ClientSideEvents.SelectedIndexChanged = (code != null && (code.Equals("05") || code.Equals("32")) )?"OnWarehouseLocationCombo_SelectedIndexChanged": "";
                comboBox.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_lot";
            column.Name = "id_lot";
            column.Caption = "Lote";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Visible = (code != null && (code.Equals("03") || code.Equals("04") || code.Equals("34"))) ? false :
                             ((code != null && (code.Equals("05") || code.Equals("32"))) ? true : false);
            column.SetDataItemTemplateContent(c =>
            {
                int? id_lot = (int?)DataBinder.Eval(c.DataItem, "id_lot");
                Lot lot = DataProviderProductionLot.LotById(id_lot);
                //Warehouse warehouse = DataProviderProductionLot.LotByCompany((int?)ViewData["id_company"]);

                string text = (lot != null) ? lot.number : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_lot";
                comboBox.DataSource = DataProviderProductionLot.LotByCompany((int?)ViewData["id_company"]);
                comboBox.ValueField = "id";
                comboBox.TextField = "number";
                //comboBox.TextFormatString = "{1}";
                comboBox.ValueType = typeof(int);

                comboBox.DropDownStyle = DropDownStyle.DropDownList;
                comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                //comboBox.ClientSideEvents.Validation = "OnLotValidation";
                comboBox.ClientSideEvents.SelectedIndexChanged = "OnLotDetailCombo_SelectedIndexChanged";
                comboBox.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_warehouseEntry";
            column.Name = "id_warehouseEntry";
            column.Caption = "Bodega Ingreso";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Visible = (code != null && code.Equals("32"));//Egreso Por Transferencia
            column.SetDataItemTemplateContent(c =>
            {
                int id_warehouse = (int)DataBinder.Eval(c.DataItem, "id_warehouseEntry");
                Warehouse warehouse = DataProviderWarehouse.WarehouseById(id_warehouse);

                string text = (warehouse != null) ? warehouse.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_warehouseEntry";
                comboBox.DataSource = DataProviderWarehouse.Warehouses((int)ViewData["id_company"], (EntityObjectPermissions)ViewData["entityObjectPermissions"]);
                comboBox.ValueField = "id";
                comboBox.TextField = "name";
                //comboBox.TextFormatString = "{1}";
                comboBox.ValueType = typeof(int);

                comboBox.DropDownStyle = DropDownStyle.DropDownList;
                comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                /*comboBox.Columns.Add("masterCode", "Código", Unit.Percentage(30));
                comboBox.Columns.Add("name", "Producto", Unit.Percentage(50));
                comboBox.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", Unit.Percentage(20));*/
                //comboBox.ClientSideEvents.DropDown = "ItemsCombo_DropDown";
                //comboBox.ClientSideEvents.Init = "OnInitWarehouseEntry";
                comboBox.ClientSideEvents.Validation = (code != null && code.Equals("32")) ? "OnWarehouseEntryValidation" : "";
                comboBox.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

            });

        });

        settings.Columns.Add(column =>
        {
            column.Name = "quantityApproved";
            column.Caption = "Compra Aprobada";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.Decimal;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;

            //column.Width = Unit.Percentage(5);

            column.SetDataItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                //int id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                decimal quantityApproved = 0.0M;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    quantityApproved = purchaseOrders.FirstOrDefault().PurchaseOrderDetail.quantityApproved;
                    //foreach (var purchaseOrder in purchaseOrders)
                    //{
                    //    PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(purchaseOrder.id_purchaseOrder);
                    //    foreach (var orderDetails in order.PurchaseOrderDetail)
                    //    {
                    //        if(orderDetails.id_item == id_item)
                    //        {
                    //            quantityApproved += orderDetails.quantityApproved;
                    //        }
                    //    }
                    //}
                }

                ViewContext.Writer.Write(quantityApproved.ToString("N2"));
            });

            column.SetEditItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                //int id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                decimal quantityApproved = 0.0M;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    quantityApproved = purchaseOrders.FirstOrDefault().PurchaseOrderDetail.quantityApproved;
                    //foreach (var purchaseOrder in purchaseOrders)
                    //{
                    //    PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(purchaseOrder.id_purchaseOrder);
                    //    foreach (var orderDetails in order.PurchaseOrderDetail)
                    //    {
                    //        if(orderDetails.id_item == id_item)
                    //        {
                    //            quantityApproved += orderDetails.quantityApproved;
                    //        }
                    //    }
                    //}
                }

                ViewContext.Writer.Write(quantityApproved.ToString("N2"));
            });

            column.Visible = (ViewData["code"] != null && ViewData["code"].Equals("04"));

        });

        settings.Columns.Add(column =>
        {
            column.Name = "quantityReceived";
            column.Caption = "Cantidad Recibida";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.Decimal;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;

            //column.Width = Unit.Percentage(5);

            column.SetDataItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                //int id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                decimal quantityReceived = 0.0M;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    foreach (var purchaseOrder in purchaseOrders)
                    {
                        quantityReceived = purchaseOrders.FirstOrDefault().PurchaseOrderDetail.quantityReceived;

                        //PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(purchaseOrder.id_purchaseOrder);
                        //foreach (var orderDetails in order.PurchaseOrderDetail)
                        //{
                        //    if (orderDetails.id_item == id_item)
                        //    {
                        //        quantityReceived += orderDetails.quantityReceived;
                        //    }
                        //}
                    }

                    ViewContext.Writer.Write(quantityReceived.ToString("N2"));
                }
            });

            column.SetEditItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                //int id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                decimal quantityReceived = 0.0M;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    foreach (var purchaseOrder in purchaseOrders)
                    {
                        quantityReceived = purchaseOrders.FirstOrDefault().PurchaseOrderDetail.quantityReceived;

                        //PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(purchaseOrder.id_purchaseOrder);
                        //foreach (var orderDetails in order.PurchaseOrderDetail)
                        //{
                        //    if (orderDetails.id_item == id_item)
                        //    {
                        //        quantityReceived += orderDetails.quantityReceived;
                        //    }
                        //}
                    }

                    ViewContext.Writer.Write(quantityReceived.ToString("N2"));
                }
            });

            column.Visible = (ViewData["code"] != null && ViewData["code"].Equals("04"));

        });

        settings.Columns.Add(column =>
        {
            column.Name = "remainingQuantity";
            column.Caption = "Pendiente";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.Decimal;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;

            //column.Width = Unit.Percentage(5);

            column.SetDataItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                //int id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                decimal remainingQuantity = 0.0M;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    var purchaseOrder = purchaseOrders.FirstOrDefault().PurchaseOrderDetail;
                    remainingQuantity = purchaseOrder.quantityApproved - purchaseOrder.quantityReceived;
                    remainingQuantity = remainingQuantity < 0 ? 0.0M : remainingQuantity;
                    //foreach (var purchaseOrder in purchaseOrders)
                    //{
                    //    PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(purchaseOrder.id_purchaseOrder);
                    //    foreach (var orderDetails in order.PurchaseOrderDetail)
                    //    {
                    //        if(orderDetails.id_item == id_item)
                    //        {
                    //            remainingQuantity += (orderDetails.quantityApproved - orderDetails.quantityReceived);
                    //        }
                    //    }
                    //}
                }else
                {
                    List<InventoryMoveDetailTransfer> inventoryMoveDetailExits = null;

                    try
                    {
                        inventoryMoveDetailExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                    }
                    catch (Exception)
                    {
                        try
                        {
                            HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                            inventoryMoveDetailExits = temp.ToList();
                        }
                        catch (Exception)
                        {
                            inventoryMoveDetailExits = null;
                        }
                    }

                    //string metricUnitMovExit = metricUnitInventory;

                    if (inventoryMoveDetailExits != null && inventoryMoveDetailExits.Count > 0)
                    {
                        int? id_inventoryMoveDetailExit = inventoryMoveDetailExits[0].id_inventoryMoveDetailExit;
                        InventoryMoveDetail inventoryMoveDetail = DataProviderInventoryMove.InventoryMoveDetail(id_inventoryMoveDetailExit);

                        var quantityMove = (inventoryMoveDetail != null && inventoryMoveDetail.amountMove != null) ? inventoryMoveDetail.amountMove.Value : 0;
                        var quantityReceived = (inventoryMoveDetail != null &&
                                                inventoryMoveDetail.InventoryMoveDetailTransfer != null &&
                                                inventoryMoveDetail.InventoryMoveDetailTransfer.Where(w=> w.InventoryMoveDetail1.InventoryMove.Document.DocumentState.code.Equals("03")).Count() > 0) ?
                                                inventoryMoveDetail.InventoryMoveDetailTransfer.Where(w => w.InventoryMoveDetail1.InventoryMove.Document.DocumentState.code.Equals("03")).Sum(s=> s.quantity) :
                                                0;
                        remainingQuantity = quantityMove - quantityReceived;
                        remainingQuantity = remainingQuantity < 0 ? 0.0M : remainingQuantity;
                    }
                }

                ViewContext.Writer.Write(remainingQuantity.ToString("N2"));
            });

            column.SetEditItemTemplateContent(c =>
            {
                List<InventoryMoveDetailPurchaseOrder> purchaseOrders = null;

                try
                {
                    purchaseOrders = (List<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<InventoryMoveDetailPurchaseOrder> temp = (HashSet<InventoryMoveDetailPurchaseOrder>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailPurchaseOrder");
                        purchaseOrders = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseOrders = null;
                    }
                }

                //int id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                decimal remainingQuantity = 0.0M;

                if (purchaseOrders != null && purchaseOrders.Count > 0)
                {
                    var purchaseOrder = purchaseOrders.FirstOrDefault().PurchaseOrderDetail;
                    remainingQuantity = purchaseOrder.quantityApproved - purchaseOrder.quantityReceived;
                    remainingQuantity = remainingQuantity < 0 ? 0.0M : remainingQuantity;
                    //foreach (var purchaseOrder in purchaseOrders)
                    //{
                    //    PurchaseOrder order = DataProviderPurchaseOrder.PurchaseOrder(purchaseOrder.id_purchaseOrder);
                    //    foreach (var orderDetails in order.PurchaseOrderDetail)
                    //    {
                    //        if(orderDetails.id_item == id_item)
                    //        {
                    //            remainingQuantity += (orderDetails.quantityApproved - orderDetails.quantityReceived);
                    //        }
                    //    }
                    //}
                }
                else
                {
                    List<InventoryMoveDetailTransfer> inventoryMoveDetailExits = null;

                    try
                    {
                        inventoryMoveDetailExits = (List<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                    }
                    catch (Exception)
                    {
                        try
                        {
                            HashSet<InventoryMoveDetailTransfer> temp = (HashSet<InventoryMoveDetailTransfer>)DataBinder.Eval(c.DataItem, "InventoryMoveDetailTransfer1");
                            inventoryMoveDetailExits = temp.ToList();
                        }
                        catch (Exception)
                        {
                            inventoryMoveDetailExits = null;
                        }
                    }

                    //string metricUnitMovExit = metricUnitInventory;

                    if (inventoryMoveDetailExits != null && inventoryMoveDetailExits.Count > 0)
                    {
                        int? id_inventoryMoveDetailExit = inventoryMoveDetailExits[0].id_inventoryMoveDetailExit;
                        InventoryMoveDetail inventoryMoveDetail = DataProviderInventoryMove.InventoryMoveDetail(id_inventoryMoveDetailExit);

                        var quantityMove = (inventoryMoveDetail != null && inventoryMoveDetail.amountMove != null) ? inventoryMoveDetail.amountMove.Value : 0;
                        var quantityReceived = (inventoryMoveDetail != null &&
                                                inventoryMoveDetail.InventoryMoveDetailTransfer != null &&
                                                inventoryMoveDetail.InventoryMoveDetailTransfer.Where(w => w.InventoryMoveDetail1.InventoryMove.Document.DocumentState.code.Equals("03")).Count() > 0) ?
                                                inventoryMoveDetail.InventoryMoveDetailTransfer.Where(w => w.InventoryMoveDetail1.InventoryMove.Document.DocumentState.code.Equals("03")).Sum(s => s.quantity) :
                                                0;
                        remainingQuantity = quantityMove - quantityReceived;
                        remainingQuantity = remainingQuantity < 0 ? 0.0M : remainingQuantity;
                    }
                }

                ViewContext.Writer.Write(remainingQuantity.ToString("N2"));
            });

            column.Visible = (ViewData["code"] != null && (ViewData["code"].Equals("04") || ViewData["code"].Equals("34")));

        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "balance";
            column.Name = "remainingBalance";
            column.Caption = "Saldo";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.ReadOnly = true;
            //column.Width = Unit.Percentage(3);

            column.Visible = (code != null && (code.Equals("05") || code.Equals("32")));
            //column.ReadOnly = code.Equals("06");
            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                int? id_warehouse = (int?)DataBinder.Eval(c.DataItem, "id_warehouse");
                int? id_warehouseLocation = (int?)DataBinder.Eval(c.DataItem, "id_warehouseLocation");
                int? id_lot = (int?)DataBinder.Eval(c.DataItem, "id_lot");

                decimal remainingBalance = DataProviderInventoryMove.GetRemainingBalance(   (int)ViewData["id_company"],
                                                                                            id_item, 
                                                                                            id_warehouse, 
                                                                                            id_warehouseLocation, 
                                                                                            id_lot, 
                                                                                            null);
                //Warehouse warehouse = DataProviderProductionLot.LotByCompany((int?)ViewData["id_company"]);

                string text = remainingBalance.ToString("N2");

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().SpinEdit(spinEdit =>
            {
                spinEdit.ClientInstanceName = "remainingBalance";
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;
                spinEdit.DisplayFormatString = "N2";
                spinEdit.DisplayFormatInEditMode = true;
                spinEdit.DecimalPlaces = 2;
                spinEdit.NumberType = SpinEditNumberType.Float;
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;

                //spinEdit.ClientSideEvents.ValueChanged = "OnUnitPriceMoveValueChanged";
                spinEdit.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                //spinEdit.ClientSideEvents.Validation = "OnAmountValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "amountMove";
            column.Name = "amountMove";
            column.Caption = (code != null && (code.Equals("03") || code.Equals("04") || code.Equals("34"))) ? (id_inventoryMove == 0) ? "Cantidad a Ingresar" : "Cantidad Ingresada":
                             ((code != null && (code.Equals("05") || code.Equals("32"))) ? ((id_inventoryMove == 0) ? "Cantidad a Egresar" : "Cantidad Egresada") : "");
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;

            //column.Width = Unit.Percentage(3);

            //column.Visible = (code != null && (code.Equals("03") || code.Equals("04") || code.Equals("34")));
            //column.ReadOnly = code.Equals("06");

            column.EditorProperties().SpinEdit(spinEdit =>
            {
                spinEdit.ClientInstanceName = "amountMove";
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;
                spinEdit.DisplayFormatString = "N2";
                spinEdit.DisplayFormatInEditMode = true;
                spinEdit.DecimalPlaces = 2;
                spinEdit.NumberType = SpinEditNumberType.Float;
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;

                spinEdit.ClientSideEvents.Validation = "OnAmountValidation";
                spinEdit.ClientSideEvents.ValueChanged = "OnAmountValueChanged";
                spinEdit.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_metricUnitMove";
            column.Name = "id_metricUnitMove";
            column.PropertiesEdit.ClientInstanceName = "id_metricUnitMove";
            column.Caption = "UM Mov.";
            column.Width = Unit.Percentage(5);
            //column.UnboundType = UnboundColumnType.String;
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            //column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];
                int? id_metricUnitMove = (int?)DataBinder.Eval(c.DataItem, "id_metricUnitMove");
                var metricUnit = DataProviderMetricUnit.MetricUnit(id_metricUnitMove);

                string text = (metricUnit != null) ? metricUnit.code : "";

                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                var item = DataProviderItem.Item(id_item);
                //InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];
                string metricUnitPurchase = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                string metricUnitInventory = (item != null && item.ItemInventory != null && item.ItemInventory.MetricUnit != null) ? item.ItemInventory.MetricUnit.code : "";
                ViewContext.Writer.Write((text != "" ? text : (code != null && code.Equals("04")) ? metricUnitPurchase : metricUnitInventory));

            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_metricUnitMove";
                p.DataSource = DataProviderMetricUnit.MetricUnitsByCompanyAndCurrent((int?)ViewData["id_company"], null);
                //p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.TextField = "code";
                p.Width = Unit.Percentage(100);
                p.ValueType = typeof(int);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                //p.Columns.Add("masterCode", "Código", 70);//, Unit.Percentage(50));
                //p.Columns.Add("name", "Nombre del Producto", 200);//, Unit.Percentage(70));
                ////p.Columns.Add("barCode", "EAN", Unit.Percentage(50));
                //p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", 50);//, Unit.Percentage(20));

                //p.ClientSideEvents.DropDown = "ItemProductionLotLiquidationDetailCombo_DropDown";
                //p.ClientSideEvents.Init = "MetricUnitMoveCombo_Init";
                p.ClientSideEvents.SelectedIndexChanged = "MetricUnitMoveCombo_SelectedIndexChanged";
                p.ClientSideEvents.Validation = "OnMetricUnitMoveValidation";
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "unitPriceMove";
            column.Name = "unitPriceMove";
            column.Caption = "Precio";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.ReadOnly = !(code != null && code.Equals("03")); //"03"Ingreso


            column.Visible = showCost;
            //column.ReadOnly = code.Equals("06");

            column.EditorProperties().SpinEdit(spinEdit =>
            {
                spinEdit.ClientInstanceName = "unitPriceMove";
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;
                spinEdit.DisplayFormatString = "C6";
                spinEdit.DisplayFormatInEditMode = true;
                spinEdit.DecimalPlaces = 6;
                spinEdit.NumberType = SpinEditNumberType.Float;
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;

                spinEdit.ClientSideEvents.ValueChanged = "OnUnitPriceMoveValueChanged";
                spinEdit.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                //spinEdit.ClientSideEvents.Validation = "OnAmountValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "quantityCost";
            column.Name = "balanceCost";
            column.Caption = "Total";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.ReadOnly = true;
            //column.Width = Unit.Percentage(3);

            column.Visible = showCost;
            //column.ReadOnly = code.Equals("06");
            column.SetDataItemTemplateContent(c =>
            {
                decimal? unitPriceMove = (decimal?)DataBinder.Eval(c.DataItem, "unitPriceMove");
                decimal? amountMove = (decimal?)DataBinder.Eval(c.DataItem, "amountMove");

                decimal balanceCost = (unitPriceMove == null ? 0 : unitPriceMove.Value) * (amountMove == null ? 0 : amountMove.Value);
                //Warehouse warehouse = DataProviderProductionLot.LotByCompany((int?)ViewData["id_company"]);

                string text = balanceCost.ToString("C2");

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().SpinEdit(spinEdit =>
            {
                spinEdit.ClientInstanceName = "balanceCost";
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;
                spinEdit.DisplayFormatString = "C2";
                spinEdit.DisplayFormatInEditMode = true;
                spinEdit.DecimalPlaces = 2;
                spinEdit.NumberType = SpinEditNumberType.Float;
                spinEdit.SpinButtons.ShowIncrementButtons = false;
                spinEdit.SpinButtons.ShowLargeIncrementButtons = false;

                spinEdit.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                //spinEdit.ClientSideEvents.Validation = "OnAmountValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "id_lot";
            column.Name = "lotNumber";
            column.Caption = "Lote Sist.";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Visible = (code != null && (code.Equals("03") || code.Equals("04") || code.Equals("34"))) ? true :
                             ((code != null && (code.Equals("05") || code.Equals("32"))) ? false : true);
            column.ReadOnly = (code != null && code.Equals("34"));//Ingreso Por Transferencia
            column.SetDataItemTemplateContent(c =>
            {
                int? id_lot = (int?)DataBinder.Eval(c.DataItem, "id_lot");
                Lot lot = DataProviderProductionLot.LotById(id_lot);
                //Warehouse warehouse = DataProviderProductionLot.LotByCompany((int?)ViewData["id_company"]);

                string text = (lot != null) ? lot.number : "";

                ViewContext.Writer.Write(text);
            });

            column.SetEditItemTemplateContent(c =>
            {
                int? id_lot = (int?)DataBinder.Eval(c.DataItem, "id_lot");
                Lot lot = DataProviderProductionLot.LotById(id_lot);

                string lotNumber = (lot != null) ? lot.number : "";

                Html.DevExpress().TextBox(textBox =>
                {
                    textBox.Name = "lotNumber";
                    textBox.Properties.ClientInstanceName = "lotNumber";
                    textBox.Width = Unit.Percentage(100);
                    textBox.ReadOnly = (code != null && code.Equals("34"));//Ingreso Por Transferencia
                    textBox.ShowModelErrors = false;
                    textBox.Properties.ClientSideEvents.Validation = "OnLotNumberValidation";
                    textBox.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

                }).Bind(lotNumber).GetHtml();
            });

        });
        //Lote Cliente : lotInternalNumber
        settings.Columns.Add(column =>
        {
            //column.FieldName = "id_lot";
            column.Name = "lotInternalNumber";
            column.Caption = "Lote Cli.";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Visible = (code != null && (code.Equals("03") || code.Equals("04") || code.Equals("34"))) ? true :
                             ((code != null && (code.Equals("05") || code.Equals("32"))) ? false : true);
            //column.Width = Unit.Percentage(3);

            //column.Visible = (code != null && (code.Equals("03") || code.Equals("04") || code.Equals("34")));
            //column.ReadOnly = code.Equals("34");
            column.ReadOnly = (code != null && code.Equals("34"));//Ingreso Por Transferencia
            column.SetDataItemTemplateContent(c =>
            {
                int? id_lot = (int?)DataBinder.Eval(c.DataItem, "id_lot");
                Lot lot = DataProviderProductionLot.LotById(id_lot);
                //Warehouse warehouse = DataProviderProductionLot.LotByCompany((int?)ViewData["id_company"]);

                string text = (lot != null) ? lot.internalNumber : "";

                ViewContext.Writer.Write(text);
            });

            column.SetEditItemTemplateContent(c =>
            {
                int? id_lot = (int?)DataBinder.Eval(c.DataItem, "id_lot");
                Lot lot = DataProviderProductionLot.LotById(id_lot);

                string lotNumber = (lot != null) ? lot.internalNumber : "";

                Html.DevExpress().TextBox(textBox =>
                {
                    textBox.Name = "lotInternalNumber";
                    textBox.Properties.ClientInstanceName = "lotInternalNumber";
                    textBox.Width = Unit.Percentage(100);
                    textBox.ReadOnly = (code != null && code.Equals("34"));//Ingreso Por Transferencia
                    //textBox.ReadOnly = true;
                    textBox.ShowModelErrors = false;
                    textBox.Properties.ClientSideEvents.Validation = "OnLotInternalNumberValidation";
                    textBox.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

                }).Bind(lotNumber).GetHtml();//.Render();//.Bind(masterCode).Render();
            });


        });

        //id_costCenterDetail
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_costCenter";
            column.Name = "id_costCenterDetail";
            column.Caption = "Centro C.";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_costCenter = (int?)DataBinder.Eval(c.DataItem, "id_costCenter");
                CostCenter costCenter = DataProviderCostCenter.CostCenterById(id_costCenter);
                InventoryMoveDetail i = new InventoryMoveDetail();
                string text = (costCenter != null) ? costCenter.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_costCenterDetail";
                comboBox.DataSource = DataProviderCostCenter.AllCostCenters();
                comboBox.ValueField = "id";
                comboBox.TextField = "name";
                comboBox.ValueType = typeof(int);

                comboBox.DropDownStyle = DropDownStyle.DropDownList;
                comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                comboBox.ClientSideEvents.Init = "OnInitCostCenterCombo";
                comboBox.ClientSideEvents.Validation = "OnCostCenterDetailValidation";
                comboBox.ClientSideEvents.SelectedIndexChanged = "OnCostCenterCombo_SelectedIndexChanged";
                comboBox.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

            });

        });

        //id_subCostCenterDetail
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_subCostCenter";
            column.Name = "id_subCostCenterDetail";
            column.Caption = "Sub. C.C.";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_subCostCenter = (int?)DataBinder.Eval(c.DataItem, "id_subCostCenter");
                CostCenter costCenter = DataProviderCostCenter.CostCenterById(id_subCostCenter);
                string text = (costCenter != null) ? costCenter.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_subCostCenterDetail";
                comboBox.DataSource = DataProviderCostCenter.AllSubCostCenters();
                comboBox.ValueField = "id";
                comboBox.TextField = "name";
                comboBox.ValueType = typeof(int);

                comboBox.DropDownStyle = DropDownStyle.DropDownList;
                comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                comboBox.CallbackRouteValues = new { Controller = "InventoryMove", Action = "GetSubCostCenter" };
                comboBox.ClientSideEvents.BeginCallback = "InventoryMoveSubCostCenter_BeginCallback";
                comboBox.ClientSideEvents.EndCallback = "InventoryMoveSubCostCenter_EndCallback";
                comboBox.ClientSideEvents.Validation = "OnSubCostCenterDetailValidation";
                comboBox.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

            });

        });


        //Botones de comandos para registros de la tabla
        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = true,
            ShowDeleteButton = (code != null && (code.Equals("03") || code.Equals("05") || code.Equals("32") || code.Equals("34"))),//"03":Ingreso, "05": Egreso ,  "32": Egreso Por Transferencia y "34": Ingreso Por Transferencia
            ShowCancelButton = true,
            ShowUpdateButton = true,
            Visible = true,
            VisibleIndex = (code != null && (code.Equals("04") || code.Equals("34"))) ? 18 : ((code != null && (code.Equals("32"))) ? 15 : ((code != null && (code.Equals("05"))) ? 14 : 14)),
            Caption = "Acciones",
            Width = Unit.Percentage(5)
        };

        settings.Columns.Add(commandColumn);

        settings.ClientSideEvents.RowClick = "function(s, e) { s.StartEditRow(e.visibleIndex); }";

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}

<script src="~/Scripts/inventorymovetransfer/_inventoryMoveDetailEditFormPartial.js"></script>