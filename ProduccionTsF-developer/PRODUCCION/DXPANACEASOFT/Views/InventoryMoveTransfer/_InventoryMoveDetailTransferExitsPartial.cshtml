@using System.Drawing
@using DevExpress.Data
@using DXPANACEASOFT.Models
@{
    var grid = Html.DevExpress().GridView<InventoryMoveDetail>(settings => {
        settings.Name = "gvInventoryMoveDetailTransferExits";
        settings.CallbackRouteValues = new { Controller = "InventoryMove", Action = "InventoryMoveDetailTransferExitsPartial" };

        settings.Width = Unit.Percentage(100);

        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = false;
        settings.CommandColumn.ShowEditButton = false;
        settings.CommandColumn.Width = Unit.Percentage(3);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        #region SearchPanel

        //Panel de Busqueda
        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        #endregion

        settings.Settings.ShowFooter = true;

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""GridViewInventoryMoveDetailTransferExitsSelectAllRow();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""GridViewInventoryMoveDetailTransferExitsClearSelection();"">Anular Selección</a>"
                );
            }
        });

        settings.ClientSideEvents.Init = "OnGridViewInventoryMoveDetailTransferExitsInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewInventoryMoveDetailTransferExitsSelectionChanged";
        settings.ClientSideEvents.EndCallback = "OnGridViewInventoryMoveDetailTransferExitsEndCallback";

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        settings.Columns.Add(m => m.id, column =>
        {
            column.FieldName = "id";
            column.Visible = false;
        });

        settings.Columns.Add(m => m.InventoryMove.Document.number, column =>
        {
            column.FieldName = "id_inventoryMove";
            column.Caption = "No. Egreso por Transferencia";
            column.Width = Unit.Percentage(8);
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];
                ViewContext.Writer.Write(detail.InventoryMove.Document.number);
            });
        });

        settings.Columns.Add(m => m.Item.name, column =>
        {
            column.FieldName = "id_item";
            column.Caption = "Nombre del Producto";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];
                ViewContext.Writer.Write(detail.Item.name);
            });

        });

        settings.Columns.Add(column =>
        {
            column.Name = "quantityPending";
            column.Caption = "Cant. Pendiente de Recepción";
            column.Width = Unit.Percentage(5);
            column.UnboundType = UnboundColumnType.Decimal;
            column.PropertiesEdit.DisplayFormatString = "N2";

            column.SetDataItemTemplateContent(c =>
            {
                InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];

                decimal receivedAmount = (detail != null && detail.InventoryMoveDetailTransfer != null &&
                                          detail.InventoryMoveDetailTransfer.Where(w=> w.InventoryMoveDetail1.InventoryMove.Document.DocumentState.code.Equals("03")).Count() > 0)
                                         ? detail.InventoryMoveDetailTransfer.Where(w => w.InventoryMoveDetail1.InventoryMove.Document.DocumentState.code.Equals("03")).Sum(s => s.quantity)
                                         : 0;
                decimal amountMove = detail != null && detail.amountMove != null ? detail.amountMove.Value : 0;
                decimal quantityPending = amountMove - receivedAmount;

                quantityPending = (quantityPending >= 0.0M) ? quantityPending : 0.0M;

                ViewContext.Writer.Write(quantityPending.ToString("N2"));
            });
        });

        settings.Columns.Add(column =>
        {
            column.Name = "id_metricUnitPurchase";
            column.Caption = "UM";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(3);
            //column.ReadOnly = true;
            //column.PropertiesEdit.ClientInstanceName = "metricUnit";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;


            column.SetDataItemTemplateContent(c =>
            {
                InventoryMoveDetail detail = (InventoryMoveDetail)Model[c.ItemIndex];
                string metricUnit = (detail != null && detail.MetricUnit1 != null) ? detail.MetricUnit1.code : "";
                ViewContext.Writer.Write(metricUnit);
            });

        });


    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}

