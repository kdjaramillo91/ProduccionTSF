
@model ProductionCostCoefficientExecution

<div id="datosGeneralesEditForm">
	<div>
		<div class="row" style="padding-top: 10px">
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "documentTypeLabel";
						label.Text = "Tipo de Documento:";
						label.AssociatedControlName = "documentType";
				}).GetHtml()
			</div>
			<div class="col-sm-3">
				@Html.DevExpress().TextBoxFor(
					m => m.Document.DocumentType.name,
					textBox =>
					{
						textBox.Name = "documentType";
						textBox.Properties.ClientInstanceName = "documentType";
						textBox.Width = Unit.Percentage(100);
						textBox.ShowModelErrors = true;
						textBox.ReadOnly = true;
						textBox.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento;
					}).GetHtml()
			</div>
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "documentNumberLabel";
						label.Text = "Nº de Documento:";
						label.AssociatedControlName = "documentNumber";
				}).GetHtml()
			</div>
			<div class="col-sm-3">
				@Html.DevExpress().TextBoxFor(
					m => m.Document.number,
					textBox =>
					{
						textBox.Name = "documentNumber";
						textBox.Properties.ClientInstanceName = "documentNumber";
						textBox.Width = Unit.Percentage(100);
						textBox.ShowModelErrors = true;
						textBox.ReadOnly = true;
						textBox.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento;
					}).GetHtml()
			</div>
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "documentStateLabel";
						label.Text = "Estado:";
						label.AssociatedControlName = "documentState";
				}).GetHtml()
			</div>
			<div class="col-sm-3">
				@Html.DevExpress().TextBoxFor(
					m => m.Document.DocumentState.name,
					textBox =>
					{
						textBox.Name = "documentState";
						textBox.Properties.ClientInstanceName = "documentState";
						textBox.Width = Unit.Percentage(100);
						textBox.ShowModelErrors = true;
						textBox.ReadOnly = true;
						textBox.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento;
					}).GetHtml()
			</div>
		</div>
		<div class="row" style="padding-top: 10px">
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "periodoLabel";
						label.Text = "Período:*";
						label.AssociatedControlName = "mes";
				}).GetHtml()
			</div>
			<div class="col-sm-3">
				<table style="padding:0; border:0;">
					<tr>
						<td width="50%">
							@Html.DevExpress().ComboBoxFor(
								m => m.anio,
								comboBox =>
								{
									comboBox.Name = "anio";
									comboBox.Properties.ClientInstanceName = "anio";
									comboBox.Width = Unit.Percentage(100);

									comboBox.Properties.ValueField = "Anio";
									comboBox.Properties.TextField = "Anio";
									comboBox.Properties.ValueType = typeof(int);

									comboBox.Properties.DropDownStyle = DropDownStyle.DropDownList;
									comboBox.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
									comboBox.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

									comboBox.ShowModelErrors = true;
									comboBox.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento && (bool)this.ViewBag.PuedeEditarCamposFecha;

									comboBox.Properties.ClientSideEvents.Init = "OnAnioProductionCostInit";
									comboBox.Properties.ClientSideEvents.SelectedIndexChanged = "OnAnioProductionCostSelectedIndexChanged";

									comboBox.CustomJSProperties = (s, e) =>
									{
										e.Properties["cpPeriodosUsables"] = this.ViewBag.PeriodosUsables;
									};

								}).BindList(this.ViewBag.AnioListModel).GetHtml()
						</td>
						<td width="50%">
							@Html.DevExpress().ComboBoxFor(
								m => m.mes,
								comboBox =>
								{
									comboBox.Name = "mes";
									comboBox.Properties.ClientInstanceName = "mes";
									comboBox.Width = Unit.Percentage(100);

									comboBox.Properties.ValueField = "Mes";
									comboBox.Properties.TextField = "Mes";
									comboBox.Properties.ValueType = typeof(int);

									comboBox.Properties.DropDownStyle = DropDownStyle.DropDownList;
									comboBox.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
									comboBox.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

									comboBox.ShowModelErrors = true;
									comboBox.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento && (bool)this.ViewBag.PuedeEditarCamposFecha;

									comboBox.Properties.ClientSideEvents.SelectedIndexChanged = "OnMesProductionCostSelectedIndexChanged";
									comboBox.Properties.ClientSideEvents.Validation = "OnMesProductionCostValidation";

								}).BindList(this.ViewBag.MesListModel).GetHtml()
						</td>
					</tr>
				</table>
			</div>
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "startDateLabel";
						label.Text = "Fecha Desde:*";
						label.AssociatedControlName = "startDate";
				}).GetHtml()
			</div>
			<div class="col-sm-3">
				@Html.DevExpress().DateEditFor(
					m => m.startDate,
					dateEdit =>
					{
						dateEdit.Name = "startDate";
						dateEdit.Properties.ClientInstanceName = "startDate";
						dateEdit.Width = Unit.Percentage(100);

						dateEdit.Properties.DisplayFormatInEditMode = true;
						dateEdit.Properties.DisplayFormatString = "dd/MM/yyyy";
						dateEdit.Properties.EditFormat = EditFormat.Custom;
						dateEdit.Properties.EditFormatString = "dd/MM/yyyy";

						dateEdit.ShowModelErrors = true;
						dateEdit.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento && (bool)this.ViewBag.PuedeEditarCamposFecha;

						dateEdit.Properties.ClientSideEvents.Init = "OnStartDateProductionCostInit";
						dateEdit.Properties.ClientSideEvents.Validation = "OnStartDateProductionCostValidation";

					}).GetHtml()
			</div>
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "endDateLabel";
						label.Text = "Fecha Desde:*";
						label.AssociatedControlName = "endDate";
				}).GetHtml()
			</div>
			<div class="col-sm-3">
				@Html.DevExpress().DateEditFor(
					m => m.endDate,
					dateEdit =>
					{
						dateEdit.Name = "endDate";
						dateEdit.Properties.ClientInstanceName = "endDate";
						dateEdit.Width = Unit.Percentage(100);

						dateEdit.Properties.DisplayFormatInEditMode = true;
						dateEdit.Properties.DisplayFormatString = "dd/MM/yyyy";
						dateEdit.Properties.EditFormat = EditFormat.Custom;
						dateEdit.Properties.EditFormatString = "dd/MM/yyyy";

						dateEdit.ShowModelErrors = true;
						dateEdit.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento && (bool)this.ViewBag.PuedeEditarCamposFecha;
						dateEdit.Properties.DateRangeSettings.StartDateEditID = "startDate";

						dateEdit.Properties.ClientSideEvents.Init = "OnEndDateProductionCostInit";
						dateEdit.Properties.ClientSideEvents.Validation = "OnEndDateProductionCostValidation";

					}).GetHtml()
			</div>
		</div>
		<div class="row" style="padding-top: 10px">
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "id_allocationTypeLabel";
						label.Text = "Tipo de Asignación:*";
						label.AssociatedControlName = "id_allocationType";
					}).GetHtml()
			</div>
			<div class="col-sm-3">
				@{
					var id_allocationType = (this.Model.id_allocationType > 0)
						? (int?)this.Model.id_allocationType
						: null;
				}
				@Html.DevExpress().ComboBox(
					comboBox =>
					{
						comboBox.Name = "id_allocationType";
						comboBox.Properties.ClientInstanceName = "id_allocationType";
						comboBox.Width = Unit.Percentage(100);

						comboBox.Properties.ValueField = "id";
						comboBox.Properties.TextField = "name";
						comboBox.Properties.ValueType = typeof(int);

						comboBox.Properties.DropDownStyle = DropDownStyle.DropDownList;
						comboBox.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
						comboBox.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

						comboBox.ShowModelErrors = true;
						comboBox.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento && (bool)this.ViewBag.PuedeEditarCamposFecha;

						comboBox.CustomJSProperties = (s, e) =>
						{
							e.Properties["cpIdTipoAsignacionCostoProyectado"] = this.ViewBag.IdTipoAsignacionCostoProyectado;
						};

						comboBox.Properties.ClientSideEvents.SelectedIndexChanged = "OnAllocationTypeProductionCostSelectedIndexChanged";
						comboBox.Properties.ClientSideEvents.Validation = "OnAllocationTypeProductionCostValidation";

					}).BindList(DataProviderProductionCostAllocationType.ProductionCostAllocationTypes()).Bind(id_allocationType).GetHtml()
			</div>
			<div class="col-sm-2"></div>
			<div class="col-sm-2"></div>
			@if (this.ViewBag.PuedeEditarDocumento)
			{
				<div class="col-sm-4">
					<div style="text-align:right;">
						@Html.DevExpress().Button(
							button =>
							{
								button.Name = "EjecutarCoeficientesEditButton";
								button.Text = "Ejecutar Coeficientes";
								button.RenderMode = ButtonRenderMode.Button;
								button.ImagePosition = ImagePosition.Left;
								button.Images.Image.IconID = IconID.SpreadsheetCreatefromselection16x16;
								button.UseSubmitBehavior = false;

								button.Style.Add("margin-right", "25px");

								button.ClientVisible = !this.Model.processed;

								button.ClientSideEvents.Click = "onEjecutarCoeficientesButtonClick";
							}).GetHtml()
						@Html.DevExpress().Button(
							button =>
							{
								button.Name = "RestablecerCoeficientesEditButton";
								button.Text = "Restablecer Coeficientes";
								button.RenderMode = ButtonRenderMode.Button;
								button.ImagePosition = ImagePosition.Left;
								button.Images.Image.IconID = IconID.ActionsReset16x16office2013;
								button.UseSubmitBehavior = false;

								button.Style.Add("margin-right", "25px");

								button.ClientVisible = this.Model.processed;

								button.ClientSideEvents.Click = "onRestablecerCoeficientesButtonClick";
							}).GetHtml()
					</div>
				</div>
			}
			else
			{
				<div class="col-sm-1">
					@Html.DevExpress().Label(
						label =>
						{
							label.Name = "valuationStateLabel";
							label.Text = "Valorizado:";
							label.AssociatedControlName = "valuationState";
					}).GetHtml()
				</div>
				<div class="col-sm-3">
					@Html.DevExpress().TextBox(
						textBox =>
						{
							textBox.Name = "valuationState";
							textBox.Properties.ClientInstanceName = "valuationState";
							textBox.Width = Unit.Percentage(100);
							textBox.ShowModelErrors = true;
							textBox.ReadOnly = true;
							textBox.ClientEnabled = false;
							textBox.Text = (this.Model.value_processed) ? "SÍ" : "NO";
						}).GetHtml()
				</div>
			}
		</div>
		<div class="row" style="padding-top: 10px">
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "referenceLabel";
						label.Text = "Referencia:";
						label.AssociatedControlName = "reference";
					}).GetHtml()
			</div>
			<div class="col-sm-11">
				@Html.DevExpress().MemoFor(
					m => m.Document.reference,
					memo =>
					{
						memo.Name = "reference";
						memo.Properties.ClientInstanceName = "reference";
						memo.Width = Unit.Percentage(100);
						memo.ShowModelErrors = true;
						memo.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento;
					}).GetHtml()
			</div>
		</div>
		<div class="row" style="padding-top: 10px">
			<div class="col-sm-1">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "descriptionLabel";
						label.Text = "Descripción:";
						label.AssociatedControlName = "description";
					}).GetHtml()
			</div>
			<div class="col-sm-11">
				@Html.DevExpress().MemoFor(
					m => m.description,
					memo =>
					{
						memo.Name = "description";
						memo.Properties.ClientInstanceName = "description";
						memo.Width = Unit.Percentage(100);
						memo.ShowModelErrors = true;
						memo.ClientEnabled = (bool)this.ViewBag.PuedeEditarDocumento;
					}).GetHtml()
			</div>
		</div>
	</div>
	<div style="padding-top: 10px"></div>
	<hr style="width: 100%;">
	<div id="detallesEjecucion" style="width: 100%;">
		@if (this.Model.processed)
		{
			@Html.Partial("_CoefficientExecutionDetailsPartial", this.Model)
		}
	</div>
</div>