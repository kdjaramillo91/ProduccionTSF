@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@*@{
    List<PriceListDetailFilterShow> rows = (Model as List<PriceListDetailFilterShow>);
    rows = (rows != null) ? rows.ToList() : new List<PriceListDetailFilterShow>();
    var rowAux = DataProviderPriceList.GetColumnVisibles
    string codeState = (Model != null && Model.Document.DocumentState.code != "") ? Model.Document.DocumentState.code : "";
}*@
@{
    var grid = Html.DevExpress().GridView<PriceListDetailFilterShow>(settings => {
        settings.Name = "gvPriceListDetails";
        settings.CallbackRouteValues = new { Controller = "PriceList", Action = "PriceListDetailsPartial" };

        //settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "PriceList", Action = "PriceListDetailsPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "PriceList", Action = "PriceListDetailsPartialUpdate" };
        //settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "PriceList", Action = "PriceListDetailsPartialDelete" };

        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(2);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.KeyFieldName = "id_item";

        settings.Width = Unit.Percentage(100);

        //Eventos
        settings.ClientSideEvents.Init = "PriceListDetailsOnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "PriceListDetailsOnGridViewSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "PriceListDetailsOnGridViewBeginCallback";
        settings.ClientSideEvents.EndCallback = "PriceListDetailsOnGridViewEndCallback";

        settings.BeforeGetCallbackResult += (s, e) =>
        {
            var gv = s as MVCxGridView;

            gv.DataColumns["masterCode"].Visible = (bool)ViewData["ShowItem"];
            gv.DataColumns["name"].Visible = (bool)ViewData["ShowItem"];
            gv.DataColumns["itemTypeCategory"].Visible = (bool)ViewData["ShowItemTypeCategory"];
            gv.DataColumns["itemSize"].Visible = (bool)ViewData["Showsize"];
            gv.DataColumns["purchasePrice"].Visible = (bool)ViewData["ShowPurchasePrice"];
            gv.DataColumns["salePrice"].Visible = (bool)ViewData["ShowSalePrice"];

        };

        settings.Settings.ShowFooter = true;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

            List<PriceListDetailFilterShow> rows = (Model as List<PriceListDetailFilterShow>);
            rows = (rows != null) ? rows.ToList() : new List<PriceListDetailFilterShow>();

            e.Properties["cpRowsCount"] = rows.Count;
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""PriceListDetailsSelectAllRows();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""PriceListDetailsClearSelection();"">Anular Selección.</a>"
                );
            }
        });

        //settings.InitNewRow = (s, e) =>
        //{
        //    e.NewValues["isActive"] = true;
        //};

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        //settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;


        #region COLUMNS

        settings.Columns.Add(column =>
        {
            column.Name = "masterCode";
            //column.PropertiesEdit.ClientInstanceName = "masterCode";
            column.Caption = "Código";
            //column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.UnboundType = UnboundColumnType.String;
            column.Width = 0;//Unit.Percentage(8);
            //column.Visible = (bool)ViewData["ShowItem"];
            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var ShowItem = (bool)ViewData["ShowItem"];
                if (item != null && ShowItem)
                {
                    ViewContext.Writer.Write(item.masterCode);
                }
                else ViewContext.Writer.Write("");
            });
            column.SetEditItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var ShowItem = (bool)ViewData["ShowItem"];
                if (item != null && ShowItem)
                {
                    ViewContext.Writer.Write(item.masterCode);
                }
                else ViewContext.Writer.Write("");
            });
            //column.SetColVisible((bool)ViewData["ShowItem"]);
            //column.SetEditItemTemplateContent(c =>
            //{
            //    int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
            //    Item item = DataProviderItem.Item(id_item);

            //    string masterCode = (item != null) ? item.masterCode : "";

            //    Html.DevExpress().TextBox(textBox =>
            //    {
            //        textBox.Name = "masterCode";
            //        textBox.Properties.ClientInstanceName = "masterCode";

            //        textBox.ReadOnly = true;

            //    }).Bind(masterCode).Render();
            //});
        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "name";
            column.Name = "name";
            //column.PropertiesEdit.ClientInstanceName = "name";
            column.Caption = "Nombre del Producto";
            //column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.UnboundType = UnboundColumnType.String;
            //column.Visible = (bool)ViewData["ShowItem"];
            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var ShowItem = (bool)ViewData["ShowItem"];
                if (item != null && ShowItem)
                {
                    ViewContext.Writer.Write(item.name);
                }
                else ViewContext.Writer.Write("");
            });
            column.SetEditItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var ShowItem = (bool)ViewData["ShowItem"];
                if (item != null && ShowItem)
                {
                    ViewContext.Writer.Write(item.name);
                }
                else ViewContext.Writer.Write("");
            });
            //column.SetColVisible((bool)ViewData["ShowItem"]);
            //column.EditorProperties().ComboBox(p =>
            //{
            //    p.ClientInstanceName = "id_item";
            //    p.DataSource = DataProviderItem.Items();

            //    p.ValueField = "id";
            //    p.TextFormatString = "{1}";
            //    p.ValueType = typeof(int);


            //    p.DropDownStyle = DropDownStyle.DropDownList;
            //    p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            //    p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

            //    p.Columns.Add("masterCode", "Código", Unit.Percentage(8));
            //    p.Columns.Add("name", "Nombre del Producto", Unit.Percentage(76));
            //    p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM Compra", Unit.Percentage(8));
            //    p.Columns.Add("ItemSaleInformation.MetricUnit.code", "UM Venta", Unit.Percentage(8));

            //    p.ClientSideEvents.Init = "ItemCombo_OnInit";
            //    p.ClientSideEvents.DropDown = "ItemCombo_DropDown";
            //    p.ClientSideEvents.SelectedIndexChanged = "ItemCombo_SelectedIndexChanged";

            //    p.ClientSideEvents.Validation = "ItemValidation";
            //});
        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "itemTypeCategory";
            column.Name = "itemTypeCategory";
            //column.PropertiesEdit.ClientInstanceName = "itemTypeCategory";
            column.Caption = "Tipo Categoría de Ítem";
            //column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.UnboundType = UnboundColumnType.String;
            //column.Visible = (bool)ViewData["ShowItemTypeCategory"];
            //column. = (bool)ViewData["ShowItemTypeCategory"];
            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var ShowItemTypeCategory = (bool)ViewData["ShowItemTypeCategory"];
                if (item != null && ShowItemTypeCategory)
                {
                    ViewContext.Writer.Write(item.ItemTypeCategory.name);
                }
                else ViewContext.Writer.Write("");
            });
            column.SetEditItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var ShowItemTypeCategory = (bool)ViewData["ShowItemTypeCategory"];
                if (item != null && ShowItemTypeCategory)
                {
                    ViewContext.Writer.Write(item.ItemTypeCategory.name);
                }
                else ViewContext.Writer.Write("");
            });
            //column.SetColVisible((bool)ViewData["ShowItemTypeCategory"]);
        });

        settings.Columns.Add(column =>
        {
            //column.FieldName = "itemSize";
            column.Name = "itemSize";
            //column.PropertiesEdit.ClientInstanceName = "itemSize";
            column.Caption = "Talla";
            //column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.UnboundType = UnboundColumnType.String;
            //column.Visible = (bool)ViewData["Showsize"];
            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var Showsize = (bool)ViewData["Showsize"];
                if (item != null && item.ItemGeneral != null && Showsize)
                {
                    ViewContext.Writer.Write(item.ItemGeneral.ItemSize != null ? item.ItemGeneral.ItemSize.name : "");
                }
                else ViewContext.Writer.Write("");
            });
            column.SetEditItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);
                var Showsize = (bool)ViewData["Showsize"];
                if (item != null && Showsize)
                {
                    ViewContext.Writer.Write(item.ItemGeneral.ItemSize != null ? item.ItemGeneral.ItemSize.name : "");
                }
                else ViewContext.Writer.Write("");
            });
            //column.SetColVisible((bool)ViewData["Showsize"]);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_metricUnit";
            column.Name = "id_metricUnit";
            column.Caption = "UM";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.SetDataItemTemplateContent(c =>
            {
                int? id_metricUnit = (int?)DataBinder.Eval(c.DataItem, "id_metricUnit");
                MetricUnit metricUnit = DataProviderMetricUnit.MetricUnitById(id_metricUnit);
                if (metricUnit != null)
                {
                    ViewContext.Writer.Write(metricUnit.code);
                }
                else ViewContext.Writer.Write("");
            });
            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_metricUnit";
                p.DataSource = DataProviderMetricUnit.MetricUnitFilter((int)ViewData["id_company"]);

                p.ValueField = "id";
                p.TextField = "name";
                //p.TextFormatString = "{1}";
                //p.ValueType = typeof(int);


                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                //p.Columns.Add("masterCode", "Código", Unit.Percentage(8));
                //p.Columns.Add("name", "Nombre del Producto", Unit.Percentage(76));
                //p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM Compra", Unit.Percentage(8));
                //p.Columns.Add("ItemSaleInformation.MetricUnit.code", "UM Venta", Unit.Percentage(8));

                //p.ClientSideEvents.Init = "ItemCombo_OnInit";
                //p.ClientSideEvents.DropDown = "ItemCombo_DropDown";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemCombo_SelectedIndexChanged";

                p.ClientSideEvents.Validation = "MetricUnitValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "purchasePrice";
            column.Name = "purchasePrice";
            column.Caption = "Precio Compra";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(8);
            //column.Visible = (bool)ViewData["ShowPurchasePrice"];

            column.SetDataItemTemplateContent(c =>
            {
                decimal purchasePrice = (decimal)DataBinder.Eval(c.DataItem, "purchasePrice");
                ViewContext.Writer.Write(purchasePrice.ToString("C6"));
            });

            column.EditorProperties().SpinEdit(spinEdit =>
            {
                spinEdit.ClientInstanceName = "purchasePrice";

                spinEdit.DisplayFormatInEditMode = true;
                spinEdit.DisplayFormatString = "C6";
                spinEdit.DecimalPlaces = 6;
                spinEdit.NumberType = SpinEditNumberType.Float;
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;

                spinEdit.ClientSideEvents.Validation = "OnPurchasePriceValidation";
                spinEdit.ClientSideEvents.ValueChanged = "PurchasePrice_ValueChanged";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "salePrice";
            column.Name = "salePrice";
            column.Caption = "Precio Venta";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(8);
            //column.Visible = (bool)ViewData["ShowSalePrice"];

            column.SetDataItemTemplateContent(c =>
            {
                decimal salePrice = (decimal)DataBinder.Eval(c.DataItem, "salePrice");
                ViewContext.Writer.Write(salePrice.ToString("C6"));
            });

            column.EditorProperties().SpinEdit(spinEdit =>
            {
                spinEdit.ClientInstanceName = "salePrice";

                spinEdit.DisplayFormatInEditMode = true;
                spinEdit.DisplayFormatString = "C6";
                spinEdit.DecimalPlaces = 6;
                spinEdit.NumberType = SpinEditNumberType.Float;
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;

                spinEdit.ClientSideEvents.Validation = "OnSalePriceValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "specialPrice";
            column.Name = "specialPrice";
            column.Caption = "Precio Especial";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(8);

            column.SetDataItemTemplateContent(c =>
            {
                decimal specialPrice = (decimal)DataBinder.Eval(c.DataItem, "specialPrice");
                ViewContext.Writer.Write(specialPrice.ToString("C6"));
            });

            column.EditorProperties().SpinEdit(spinEdit =>
            {
                spinEdit.ClientInstanceName = "specialPrice";

                spinEdit.DisplayFormatInEditMode = true;
                spinEdit.DisplayFormatString = "C6";
                spinEdit.DecimalPlaces = 6;
                spinEdit.NumberType = SpinEditNumberType.Float;
                spinEdit.NumberFormat = SpinEditNumberFormat.Custom;

                spinEdit.ClientSideEvents.Validation = "OnSpecialPriceValidation";
            });
        });
        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "isActive";
        //    column.Name = "isActive";
        //    column.PropertiesEdit.ClientInstanceName = "isActive";
        //    column.Caption = "¿Activo?";
        //    column.Width = Unit.Percentage(3);
        //    column.ColumnType = MVCxGridViewColumnType.CheckBox;
        //});

        #endregion

        #region COMMAND COLUMN

        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = true,
            //ShowDeleteButton = false,
            ShowCancelButton = true,
            ShowUpdateButton = true,
            Visible = true,
            VisibleIndex = 13,
            Caption = "Acciones",
            Width = Unit.Percentage(5)
        };

        //commandColumn.CustomButtons.Add(new GridViewCommandColumnCustomButton {
        //    ID = "btnDeleteRow",
        //    Text = "Eliminar"
        //}
        //);

        //settings.ClientSideEvents.CustomButtonClick = "GridViewItemsCustomCommandButton_Click";

        settings.Columns.Add(commandColumn);

        #endregion

        //settings.PreRender = (s, e) =>
        //{
        //    MVCxGridView g = (s as MVCxGridView);
        //    if (g != null)
        //    {
        //        g.FilterExpression = "isActive = true";
        //    }
        //};

    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id_item"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}

<script src="~/Scripts/pricelist/_priceListDetailsEditForm.js"></script>