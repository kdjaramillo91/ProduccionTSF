@using DXPANACEASOFT.DataProviders

@model DXPANACEASOFT.Models.Dto.InventoryMoveInvoiceDto


    @{
        //int? id_invoice = (Model != null && Model.id_Invoice != 0) ? (int?)Model.id_Invoice : null;
        //string codeState = (Model != null && Model.Document != null && Model.Document.DocumentState != null && Model.Document.DocumentState.code != "") ? Model.Document.DocumentState.code : "";
        int? id_invoice = Model != null ? Model.id_Invoice : null;
        string codeState = Model != null ? Model.codeState : null;
        int? id_customer = Model != null ? Model.id_customer : null;
    } 
    @Html.DevExpress().ComboBoxFor(m => m.id_Invoice, settings =>
{
    settings.Name = "id_Invoice";
    settings.Properties.ClientInstanceName = "id_Invoice";
    settings.Properties.ValueField = "id";
    settings.Properties.TextFormatString = "{0}";
    settings.Properties.ValueType = typeof(int);
    settings.Width = Unit.Percentage(100);
    settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
    settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
    settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
    settings.ClientEnabled = (codeState == "01");
    settings.Properties.Columns.Add("number", "No. Documento", 100);
    settings.ShowModelErrors = true;
    //settings.Properties.ClientSideEvents.Validation = "OnInvoiceValidation";

    settings.CallbackRouteValues = new { Controller = "InventoryMove", Action = "InventoryMoveValidateInvoice" };
    settings.Properties.ClientSideEvents.BeginCallback = "OnInvoice_BeginCallback";
    //settings.Properties.ClientSideEvents.SelectedIndexChanged = "OnInvoice_SelectedIndexChanged";
}).BindList(DataProviderDocument.DocumentsByCompanyAndInventoryInvoiceProvider((int?)ViewData["id_company"], id_customer, (int?)Model.id_Invoice)).Bind(id_invoice).GetHtml()
