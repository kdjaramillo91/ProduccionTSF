@using System.Drawing
@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models.Filter

@{
    var grid = Html.DevExpress().GridView<FilterTypeWithCondition>(settings =>
    {
        settings.Name = "gvFilterBoxSelectGridViewRight";
        settings.CallbackRouteValues = new { Controller = "ProductionLot", Action = "FilterBoxSelectGridViewRightPartial" };

        //settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "PurchaseOrder", Action = "PurchaseOrderDetailsPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ProductionLot", Action = "FilterBoxSelectGridViewRightPartialUpdate" };
        //settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "PurchaseOrder", Action = "PurchaseOrderDetailsPartialDelete" };

        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

        settings.Width = Unit.Percentage(100);
        settings.Height = Unit.Pixel(65); //Percentage(100);
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible; //Percentage(100);
        settings.Settings.VerticalScrollableHeight = 65; //Percentage(100);
        settings.SettingsPager.PageSize = 100;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.Styles.Header.Wrap = DefaultBoolean.True;

        settings.SettingsPager.Visible = false;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //settings.CommandColumn.Visible = true;
        //settings.CommandColumn.ShowSelectCheckbox = true;
        //settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.SettingsBehavior.ConfirmDelete = false;

        settings.KeyFieldName = "id";

        //Eventos
        //settings.ClientSideEvents.Init = "PurchaseOrderDetailsOnGridViewInit";
        //settings.ClientSideEvents.SelectionChanged = "PurchaseOrderDetailsOnGridViewSelectionChanged";
        //settings.ClientSideEvents.BeginCallback = "PurchaseOrderDetailsOnGridViewBeginCallback";
        //settings.ClientSideEvents.EndCallback = "PurchaseOrderDetailsOnGridViewEndCallback";


        //Pie de tabla
        settings.Settings.ShowFooter = true;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

            if (gv.IsEditing)
            {
                FilterType filterType = null;

                try
                {
                    filterType = (FilterType)gv.GetRowValues(gv.EditingRowVisibleIndex, "filterType");
                }
                catch (Exception)
                {
                    filterType = null;
                    //try
                    //{
                    //    HashSet<PurchaseOrderDetailPurchaseRequest> temp = (HashSet<PurchaseOrderDetailPurchaseRequest>)gv.GetRowValues(gv.EditingRowVisibleIndex, "PurchaseOrderDetailPurchaseRequest");
                    //    purchaseRequests = temp.ToList();
                    //}
                    //catch (Exception)
                    //{
                    //    purchaseRequests = null;
                    //}
                }
                if (filterType != null)
                {
                    e.Properties["cpEditingRowSelectDataSource"] = filterType.dataSource;
                }
                else
                {
                    e.Properties["cpEditingRowSelectDataSource"] = "";
                }
                e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

            }



            List<FilterTypeWithCondition> rows = (Model as List<FilterTypeWithCondition>);
            rows = (rows != null) ? rows.ToList() : new List<FilterTypeWithCondition>();

            e.Properties["cpRowsCount"] = rows.Count;
        };

        //settings.SetFooterRowTemplateContent(c =>
        //{
        //    ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
        //    if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
        //    {
        //        ViewContext.Writer.Write(
        //            @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""PurchaseOrderDetailsSelectAllRows();"">Seleccionar Todos</a>
        //              <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""PurchaseOrderDetailsClearSelection();"">Anular Selección.</a>"
        //        );
        //    }
        //});


        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SettingsEditing.ShowModelErrorsForEditors = true;

        //settings.InitNewRow = (s, e) =>
        //{
        //    e.NewValues["quantityRequested"] = 0.00M;
        //    e.NewValues["quantityOrdered"] = 1.00M;
        //    e.NewValues["quantityApproved"] = 1.00M;
        //    e.NewValues["quantityReceived"] = 0.00M;
        //    e.NewValues["price"] = 0.00M;
        //    e.NewValues["iva"] = 0.00M;
        //    e.NewValues["subtotal"] = 0.00M;
        //    e.NewValues["total"] = 0.00M;
        //};
        //#region EDITORS INITIALIZE

        //settings.CellEditorInitialize = (s, e) =>
        //{
        //    if (e.Column.Name == "valueConditionToDateTime")
        //    {
        //        MVCxDateEdit editor = (MVCxDateEdit)e.Editor;
        //        editor.Enabled = 
        //        //editor.DataSource = ViewBag.InMart;
        //        //editor.DataBind();

        //        //editor.ReadOnly = true;//(editor.SelectedItem != null);
        //    }

        //    //if (e.Column.Name == "procostoMO" || e.Column.Name == "procantidadMO" || e.Column.Name == "procostoMO")
        //    //{
        //    //    e.Editor.ReadOnly = true;
        //    //}
        //};

        //#endregion

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        #region Columns
        //30
        settings.Columns.Add(m => m.filterType.alias, column =>
        {
            column.Name = "aliasRight";
            column.Caption = "Campo";
            column.ReadOnly = true;
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.Width = Unit.Percentage(30);
            column.EditorProperties().TextBox(p =>
            {
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });
        });
        //20
        settings.Columns.Add(m=> m.id_logicalOperator, column =>
        {
            //column.FieldName = "id_logicalOperator";
            //column.Name = "id_logicalOperator";
            column.Caption = "Operador Lógico";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(20);

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_logicalOperatorSelect";
                p.DataSource = DataProviderLogicalOperator.LogicalOperatorSelects();
                p.ValueField = "id";
                p.TextField = "name";
                //p.TextFormatString = "{1}";
                p.ValueType = typeof(int);
                //p.CallbackPageSize = 30;
                p.Width = Unit.Percentage(100);
                p.DropDownStyle = DropDownStyle.DropDownList;
                //p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                //p.Columns.Add("masterCode", "Código", 70);//, Unit.Percentage(50));
                //p.Columns.Add("name", "Nombre del Producto", 300);//, Unit.Percentage(70));
                ////p.Columns.Add("barCode", "EAN", Unit.Percentage(50));
                //p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", 50);//, Unit.Percentage(20));
                //p.ClientSideEvents.Init = "ItemCombo_OnInit";
                ////p.ClientSideEvents.DropDown = "ItemCombo_DropDown";
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                //p.ClientSideEvents.SelectedIndexChanged = "LogicalOperatorText_SelectedIndexChanged";
                //p.ClientSideEvents.Validation = "OnItemValidation";
                //p.ClientSideEvents.ValueChanged = "ItemsCombo_ValueChanged";}
            });
        });
        //30
        settings.Columns.Add(m => m.valueConditionTextOrSelect, column =>
        {
            column.FieldName = "valueConditionTextOrSelect";
            column.Name = "valueConditionSelect";
            column.Caption = "Valor";
            column.ColumnType = MVCxGridViewColumnType.TokenBox;
            column.Width = Unit.Percentage(30);

            column.SetDataItemTemplateContent(c =>
            {
                string valueConditionSelectValueText = (string)DataBinder.Eval(c.DataItem, "valueConditionSelectValueText");

                string text = (valueConditionSelectValueText != null && valueConditionSelectValueText != "") ? valueConditionSelectValueText : "Todo";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().TokenBox(p =>
            {
                p.ClientInstanceName = "valueConditionSelect";
                p.Width = Unit.Percentage(100);
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.NullDisplayText = "Todo";
                p.NullText = "Todo";
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                p.ValueField = "id";
                p.TextField = "name";

                //p.ShowDropDownOnFocus = ShowDropDownOnFocusMode.Auto;
                p.AllowCustomTokens = false;

                p.CallbackRouteValues = new { Controller = "ProductionLot", Action = "GetSelect"/*, TextField = "CityName"*/ };
                p.ClientSideEvents.BeginCallback = "ValueConditionSelect_BeginCallback";
                p.ClientSideEvents.EndCallback = "ValueConditionSelect_EndCallback";
                p.ClientSideEvents.Init = "ValueConditionSelect_Init";
                p.ClientSideEvents.ValueChanged = "ValueConditionSelect_ValueChanged";
            });
        });

        //settings.Columns.Add(m => m.valueConditionSelectValueText, column =>
        //{
        //    column.FieldName = "valueConditionSelectValueText";
        //    column.Name = "valueConditionSelectValueText";
        //    //column.Caption = "Valor";
        //    column.ColumnType = MVCxGridViewColumnType.TextBox;
        //    column.Width = Unit.Percentage(0);
        //    column.Visible = false;

        //    //column.SetDataItemTemplateContent(c =>
        //    //{
        //    //    string valueConditionSelectValueText = (string)DataBinder.Eval(c.DataItem, "valueConditionSelectValueText");

        //    //    string text = (valueConditionSelectValueText != null && valueConditionSelectValueText != "") ? valueConditionSelectValueText : "Todo";

        //    //    ViewContext.Writer.Write(text);
        //    //});

        //    column.EditorProperties().TextBox(p =>
        //    {
        //        p.ClientInstanceName = "valueConditionSelectValueText";
        //        //p.Width = Unit.Percentage(100);
        //        //p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
        //        //p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
        //        //p.NullDisplayText = "Todo";
        //        //p.NullText = "Todo";
        //        //p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
        //        //p.ValueField = "id";
        //        //p.TextField = "name";

        //        ////p.ShowDropDownOnFocus = ShowDropDownOnFocusMode.Auto;
        //        //p.AllowCustomTokens = false;

        //        //p.CallbackRouteValues = new { Controller = "ProductionLot", Action = "GetSelect"/*, TextField = "CityName"*/ };
        //        //p.ClientSideEvents.BeginCallback = "ValueConditionSelect_BeginCallback";
        //        ////p.ClientSideEvents.EndCallback = "ValueConditionSelect_EndCallback";
        //        //p.ClientSideEvents.Init = "ValueConditionSelect_Init";
        //    });
        //});
        //25
        //settings.Columns.Add(m => m.valueConditionToDateTime, column =>
        //{
        //    column.FieldName = "valueConditionToDateTime";
        //    column.Name = "valueConditionToDateTime";
        //    column.Caption = "Hasta";
        //    column.ColumnType = MVCxGridViewColumnType.DateEdit;
        //    column.Width = Unit.Percentage(25);

        //    column.EditorProperties().DateEdit(p =>
        //    {
        //        p.ClientInstanceName = "valueConditionToDateTime";
        //        p.Width = Unit.Percentage(100);
        //        p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

        //        p.NullDisplayText = "Hasta";
        //        p.NullText = "Hasta";

        //        p.DisplayFormatInEditMode = true;
        //        p.DisplayFormatString = "dd/MM/yyyy";
        //        p.EditFormat = EditFormat.Custom;
        //        p.EditFormatString = "dd/MM/yyyy";
        //        p.ClientSideEvents.Init = "ValueConditionToDateTime_Init";
        //    });
        //});

        #endregion

        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = true,
            ShowDeleteButton = false,
            ShowCancelButton = true,
            ShowUpdateButton = true,
            Visible = true,
            VisibleIndex = 10,
            Caption = "Acciones",
            Width = Unit.Percentage(15)
        };
        commandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        commandColumn.CellStyle.VerticalAlign = VerticalAlign.Middle;

        settings.Columns.Add(commandColumn);

        //commandColumn.CustomButtons.Add(
        //    new GridViewCommandColumnCustomButton
        //    {
        //        ID = "btnCancelRow",
        //        Text = "Cancelar"
        //    }
        //);
        //settings.ClientSideEvents.CustomButtonClick = "function(s, e) {gvPurchaseOrderEditFormDetails_Canceling(s,e);}";
        //settings.Columns.Add(commandColumn);

        //settings.CommandColumn.CustomButtons.Add(new GridViewCommandColumnCustomButton() { ID = "btnCopy", Text = "Copy" });
        ////copy record and all dependents see client script in the Index.cshtml
        //settings.ClientSideEvents.CustomButtonClick =
        //    string.Format("function(s, e) {{ CustomButtonClick(s, e, '{0}'); }}", Url.Action("Copy", "Mfr"));
        //settings.ClientSideEvents.CommandButtonClick = "gvPurchaseOrderEditFormDetails_Canceling";

        //settings.PreRender = (s, e) =>
        //{
        //    MVCxGridView g = (s as MVCxGridView);
        //    if (g != null)
        //    {
        //        g.FilterExpression = "isActive = true";
        //    }
        //};
    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
    String GetUserName(int id)
    {
        var user = DataProviderUser.UserById(id);
        return user.username;
    }
}



