@using System.Globalization;
@using DevExpress.Data
@using DevExpress.Data.Helpers
@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.ProductionLotLiquidationTotal>

@{
    var grid = Html.DevExpress().GridView<ProductionLotLiquidationTotal>(settings =>
    {
        settings.Name = "gvProductionLotDetailProductionLotLiquidationTotals";// + ViewData["id_productionLot"];
        settings.CallbackRouteValues = new { Controller = "ProductionLot", Action = "ProductionLotDetailProductionLotLiquidationTotalsPartial" };

        settings.ClientSideEvents.BeginCallback = "ProductionLotDetail_OnBeginCallback";


        settings.CommandColumn.Visible = false;
        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        //settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Checkbox de registros de tabla
        //settings.CommandColumn.ShowSelectCheckbox = true;
        //settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        ////Eventos
        //settings.ClientSideEvents.Init = "OnGridViewInitDetail";
        //settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChangedDetail";
        //settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallbackDetail";
        //settings.ClientSideEvents.EndCallback = "OnGridViewEndCallbackDetail";

        //Pie de tabla
        settings.Settings.ShowFooter = true;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

            List<ProductionLotLiquidationTotal> rows = (Model as List<ProductionLotLiquidationTotal>);
            rows = (rows != null) ? rows.ToList() : new List<ProductionLotLiquidationTotal>();

            e.Properties["cpIdProductionLot"] = ViewData["id_productionLot"];
            e.Properties["cpRowsCount"] = rows.Count;
        };

        //settings.SetFooterRowTemplateContent(c =>
        //{
        //    ViewContext.Writer.Write(@"<span id=""lblInfoDetails""></span>");
        //    if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
        //    {
        //        ViewContext.Writer.Write(
        //            @"<a id=""lnkSelectAllRowsDetails"" style=""cursor: pointer;"" onclick=""gvEditSelectAllRowsDetail()"">Seleccionar Todos</a>
        //              <a id=""lnkClearSelectionDetails"" style=""cursor: pointer;"" onclick=""gvEditClearSelectionDetail()"">Anular Selección</a>"
        //        );
        //    }
        //});

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        //settings.SettingsEditing.ShowModelErrorsForEditors = true;

        //settings.InitNewRow = (s, e) =>
        //{
        //    e.NewValues["quantity"] = 0.00M;
        //};

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        //Pie de tabla
        //settings.Settings.ShowFooter = true;

        //settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "numBoxes").DisplayFormat = "<b>{0:#,##0}</b>";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "quatityBoxesIL").DisplayFormat = "<b>{0:n2}</b>";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "quantityKgsIL").DisplayFormat = "<b>{0:n2}</b>";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "quantityPoundsIL").DisplayFormat = "<b>{0:n2}</b>";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "quantityKgsITW").DisplayFormat = "<b>{0:n2}</b>";
        settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "quantityPoundsITW").DisplayFormat = "<b>{0:n2}</b>";

        #region ColumnsAdd

        //id_SalesOrder 10
        settings.Columns.Add(m=> m.SalesOrder.Document.number, column =>
        {
            //column.FieldName = "id_SalesOrder";
            column.Caption = "Orden de Pedido";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(10);

        });

        //id_ItemLiquidation 20
        settings.Columns.Add(m => m.Item.name, column =>
        {
            column.Caption = "Producto Liquidación";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(20);

        });

        //quantityBoxesIL 9
        settings.Columns.Add(column =>
        {
            column.FieldName = "quatityBoxesIL";
            column.Name = "quantityBoxesIL";
            column.Caption = "Cajas";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(9);

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantity = (decimal)DataBinder.Eval(c.DataItem, "quatityBoxesIL");
                ViewContext.Writer.Write(quantity.ToString("N2"));
            });

        });

        //quantityKgsIL 9
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityKgsIL";
            column.Name = "quantityKgsIL";
            column.Caption = "KG";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(9);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityTotal = (decimal)DataBinder.Eval(c.DataItem, "quantityKgsIL");
                ViewContext.Writer.Write(quantityTotal.ToString("N2"));
            });

        });

        //quantityPoundsIL 9
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityPoundsIL";
            column.Name = "quantityPoundsIL";
            column.Caption = "LBS";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(9);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityTotal = (decimal)DataBinder.Eval(c.DataItem, "quantityPoundsIL");
                ViewContext.Writer.Write(quantityTotal.ToString("N2"));
            });

        });

        //id_ItemToWarehouse 20
        settings.Columns.Add(m => m.Item1.name, column =>
        {
            column.Caption = "Producto a Bodega";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(20);

        });

        //quantityKgsITW 9
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityKgsITW";
            column.Name = "quantityKgsITW";
            column.Caption = "KG";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(9);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityTotal = (decimal)DataBinder.Eval(c.DataItem, "quantityKgsITW");
                ViewContext.Writer.Write(quantityTotal.ToString("N2"));
            });

        });

        //quantityPoundsITW 9
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityPoundsITW";
            column.Name = "quantityPoundsITW";
            column.Caption = "LBS";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(9);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityTotal = (decimal)DataBinder.Eval(c.DataItem, "quantityPoundsITW");
                ViewContext.Writer.Write(quantityTotal.ToString("N2"));
            });

        });


        //Botones de comandos para registros de la tabla
        //MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        //{
        //    ShowEditButton = true,
        //    ShowDeleteButton = true,
        //    ShowCancelButton = true,
        //    ShowUpdateButton = true,
        //    Visible = true,
        //    VisibleIndex = 20,
        //    Caption = "Acciones"
        //};
        //commandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        //commandColumn.Width = Unit.Percentage(5);

        //settings.Columns.Add(commandColumn);

        //settings.ClientSideEvents.RowClick = "function(s, e) { s.StartEditRow(e.visibleIndex); }";

        #endregion

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}

@*<script src="~/Scripts/openingclosingplatelying/_openingClosingPlateLyingDetailsEditForm.js"></script>*@