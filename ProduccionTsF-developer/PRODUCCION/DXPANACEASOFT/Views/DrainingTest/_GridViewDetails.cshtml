
@using System.Drawing
@using System.Data

@using DXPANACEASOFT.Models

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridViewDetails";
        //settings.CallbackRouteValues = new
        //{
        //    Controller = "DrainingTest",
        //    Action = "GridViewDetails",
        //    drawersNumberSampling = ((List<DrainingTestDetail>) Model).Count
        //};

        //Customize Dynamic Column Grid
        /*
            settings.KeyFieldName = "id";
        */
        settings.KeyFieldName = "Index";


        //settings.ClientSideEvents.BatchEditEndEditing = "OnBatchEditEndEditing";

        settings.ClientSideEvents.BatchEditStartEditing = "onEditGriViewDetail";
        

        settings.Enabled = ViewBag.enabled == null || (bool)ViewBag.enabled;
        settings.SettingsBehavior.AllowFixedGroups = false;
        settings.SettingsBehavior.AllowSort = false;


        /*
         Customize Dynamic Column Grid
        */
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;

        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 150;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;

        settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;

        settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
        settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;




        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Width = Unit.Percentage(100);

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        System.Data.DataTable dt = (System.Data.DataTable)Model;

        settings.CustomJSProperties = (s, e) =>
        {

            /*
                Customize Dynamic Column Grid
                var list = (Model as List<DrainingTestDetail>) ?? new List<DrainingTestDetail>();
            */
            e.Properties["cpDetailCount"] = dt.Rows.Count;


            e.Properties["cpIdsDrainingTestSampling"] = dt.Columns.OfType<DataColumn>()
                                                                    .Select(r => r.ExtendedProperties["idDrainingTestSampling"])
                                                                    .ToArray();

        };
        /*
          Customize Dynamic Column Grid
        */
        settings.Columns.SetDirty();


        foreach (System.Data.DataColumn dc in dt.Columns)
        {

            // indice
            settings.Columns.Add(column =>
            {

                column.FieldName = dc.ColumnName;
                column.Name = dc.ColumnName;
                column.PropertiesEdit.ClientInstanceName = dc.ColumnName;
                if (!dc.ReadOnly)
                {

                    column.Caption = dc.Caption;
                    column.Settings.ShowEditorInBatchEditMode = true;
                    column.ReadOnly = false;

                    //column.SetDataItemTemplateContent(c =>
                    //{
                    //    var  _val = DataBinder.Eval(c.DataItem, dc.ColumnName);

                    //    if (_val is DBNull)
                    //    {
                    //        column.ReadOnly = true;
                    //        column.Settings.ShowEditorInBatchEditMode = false;
                    //    }
                    //    else
                    //    {
                    //        column.ReadOnly = false;
                    //        column.Settings.ShowEditorInBatchEditMode = true;
                    //    }

                    //});


                    if (dc.DataType == typeof(string))
                    {
                        column.ColumnType = MVCxGridViewColumnType.TextBox;

                    }
                    else if (dc.DataType == typeof(decimal))
                    {

                        column.ColumnType = MVCxGridViewColumnType.SpinEdit;
                        var prop = column.PropertiesEdit as SpinEditProperties;
                        prop.MinValue = 0;
                        prop.MaxValue = 9999;
                        prop.DisplayFormatString = "n";
                        prop.DecimalPlaces = 1;
                        //prop.ClientSideEvents.Init= "onInitInput";
                    }


                    int _width = (int)dc.ExtendedProperties["Width"];
                    column.Width = Unit.Percentage(_width);

                }
                else
                {
                    column.Settings.ShowEditorInBatchEditMode = false;
                    column.Width = Unit.Percentage(0);
                }




            });

        }


        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "id";
        //    column.Name = "id";
        //    column.Width = Unit.Percentage(0);
        //    column.Settings.ShowEditorInBatchEditMode = false;
        //});
        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "order";
        //    column.Name = "order";
        //    column.Caption = "No.";
        //    column.Settings.ShowEditorInBatchEditMode = false;
        //});
        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "quantity";
        //    column.Name = "quantity";
        //    column.Caption = "Peso en libras";
        //    column.ColumnType = MVCxGridViewColumnType.SpinEdit;

        //    var prop = column.PropertiesEdit as SpinEditProperties;
        //    prop.MinValue = 0;
        //    prop.MaxValue = 9999;
        //    prop.DisplayFormatString = "n";
        //    prop.DecimalPlaces = 1;
        //    prop.ClientSideEvents.LostFocus = "UpdatePoundsFields";
        //});


    });
}
@grid.Bind(Model).GetHtml()