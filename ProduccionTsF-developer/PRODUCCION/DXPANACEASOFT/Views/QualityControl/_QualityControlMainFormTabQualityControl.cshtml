
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@model DXPANACEASOFT.Models.QualityControl

@{
    string codeState = (Model != null && Model.Document != null && Model.Document.DocumentState != null) ? Model.Document.DocumentState.code : "";
    //string codeBusinessOportunityResultsState = (Model != null && Model.BusinessOportunityResults != null && Model.BusinessOportunityResults.BusinessOportunityState != null) ? Model.BusinessOportunityResults.BusinessOportunityState.code : "";

}


<table id="mainTabQualityControl" class="table table-condensed" style="margin: 0px;">
    <tr>
        <td style="width: 10%;">
            @Html.DevExpress().LabelFor(m => m.id_qualityControlConfiguration, settings =>
            {
                settings.Name = "qualityControlConfigurationLabel";
                settings.Text = "Tipo de Análisis*:";
                settings.AssociatedControlName = "id_qualityControlConfiguration";
            }).GetHtml()
        </td>
        <td>
            @{
                int? id_qualityControlConfiguration = (Model != null && Model.id_qualityControlConfiguration != 0) ? (int?)Model.id_qualityControlConfiguration : null;
            }
            @Html.DevExpress().ComboBoxFor(m => m.Document.id_documentType, settings =>
       {
           settings.Name = "id_qualityControlConfiguration";
           settings.Properties.ClientInstanceName = "id_qualityControlConfiguration";
           settings.Width = Unit.Percentage(100);
           //settings.ClientEnabled = codeState != "01";//Pendiente
           settings.Properties.ValueField = "id";
           settings.Properties.TextField = "name";
           settings.Properties.ValueType = typeof(int);
           settings.Properties.Width = Unit.Percentage(100);
           settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
           settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
           settings.Properties.EnableSynchronization = DefaultBoolean.False;
           settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
           settings.ReadOnly = (codeState != "01" || id_qualityControlConfiguration != null);//Pendiente
           settings.ShowModelErrors = true;
           settings.Properties.ClientSideEvents.SelectedIndexChanged = "QualityControlConfiguration_SelectedIndexChanged";
           settings.Properties.ClientSideEvents.Validation = "OnQualityControlConfigurationValidation";

       }).BindList(DataProviderQualityControl.QualityControlConfigurationsByCompanyAndCurrent((int?)ViewData["id_company"], id_qualityControlConfiguration)).Bind(id_qualityControlConfiguration).GetHtml()
        </td>
        
        <td style="width: 10%;">
            @Html.DevExpress().LabelFor(m => m.number, settings =>
            {
                settings.Name = "numberLabel";
                settings.Text = "No. Análisis:";
                settings.AssociatedControlName = "number";

            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.number, settings =>
       {
           settings.Name = "qualityControlNumber";
           settings.Properties.ClientInstanceName = "qualityControlNumber";
           settings.Width = Unit.Percentage(100);
           settings.Properties.ClientSideEvents.Validation = "OnValidation";
           settings.ReadOnly = true;
       }).GetHtml()
        </td>
        <td style="width: 10%;">
            @Html.DevExpress().LabelFor(m => m.Document.reference, settings =>
            {
                settings.Text = "Referencia:";
                settings.AssociatedControlName = "reference";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.Document.reference, settings =>
       {
           settings.Name = "documentReference";
           settings.Properties.ClientInstanceName = "documentReference";
           settings.Width = Unit.Percentage(100);
           settings.ReadOnly = codeState != "01";//Pendiente
           settings.Properties.ClientSideEvents.Validation = "OnValidation";
           //settings.ReadOnly = true;
       }).GetHtml()
        </td>
    </tr>
    <tr>
        <td>
            @Html.DevExpress().LabelFor(m => m.Document.emissionDate, settings =>
            {
                settings.Name = "emissionDateLabel";
                settings.Text = "Fecha de Emisión*:";
                settings.AssociatedControlName = "emissionDate";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().DateEditFor(m => m.Document.emissionDate, settings =>
       {
           settings.Name = "documentEmissionDate";
           settings.Properties.ClientInstanceName = "documentEmissionDate";
           settings.Properties.UseMaskBehavior = true;
           settings.Width = Unit.Percentage(100);
           settings.ReadOnly = codeState != "01";
           settings.Properties.DisplayFormatInEditMode = true;
           settings.Properties.DisplayFormatString = "dd/MM/yyyy";
           settings.Properties.EditFormat = EditFormat.Custom;
           settings.Properties.EditFormatString = "dd/MM/yyyy";
           settings.Properties.ClientSideEvents.Validation = "OnEmissionDateValidation";
           //settings.Properties.DropDownButton.Visible = false;
       }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().LabelFor(m => m.id_analyst, settings =>
            {
                settings.Text = "Analista*:";
                settings.AssociatedControlName = "id_analyst";
            }).GetHtml()
        </td>
        <td>
            @{
                int? id_analyst = (Model != null && Model.id_analyst != 0) ? (int?)Model.id_analyst : null;
                List<string> rols = new List<string> { "Empleado", "Analista" };
            }
            @Html.DevExpress().ComboBoxFor(m => m.id_analyst, settings =>
       {
           settings.Properties.ClientInstanceName = "id_analyst";
           settings.Width = Unit.Percentage(100);

           settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
           settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
           settings.Properties.EnableSynchronization = DefaultBoolean.False;
           settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

           settings.Properties.ValueField = "id";
           settings.Properties.TextField = "fullname_businessName";
           settings.Properties.ValueType = typeof(int);
           settings.ReadOnly = codeState != "01";//Pendiente
           settings.ShowModelErrors = true;
           //settings.Properties.ClientSideEvents.SelectedIndexChanged = "BusinessOportunityBusinessPartner_SelectedIndexChanged";
           settings.Properties.ClientSideEvents.Validation = "OnAnalystValidation";
       }).BindList(DataProviderPerson.RolsByCompanyAndCurrent((int)ViewData["id_company"], id_analyst, rols)).Bind(id_analyst).GetHtml()
        <td>
            @Html.DevExpress().LabelFor(m => m.Document.DocumentState.name, settings =>
            {
                settings.Name = "documentStateLabel";
                settings.Text = "Estado:";
                settings.AssociatedControlName = "documentState";
            }).GetHtml()
        </td>
        <td>
            @Html.HiddenFor(m => m.Document.id_documentState, new { @id = "id_documentState" })
            @Html.DevExpress().TextBoxFor(m => m.Document.DocumentState.name, settings =>
       {
           settings.Name = "documentState";
           settings.Width = Unit.Percentage(100);
           settings.Properties.ClientSideEvents.Validation = "OnValidation";
           settings.ReadOnly = true;
       }).GetHtml()
        </td>
    </tr>
    <tr>
        <td>
            @Html.DevExpress().LabelFor(m => m.Document.description, settings =>
            {
                settings.Name = "descriptionLabel";
                settings.Text = "Descripción:";
                settings.AssociatedControlName = "description";
            }).GetHtml()
        </td>
        <td colspan="5">
            @Html.DevExpress().MemoFor(m => m.Document.description, settings =>
       {
           settings.Name = "documentDescription";
           settings.Properties.ClientInstanceName = "documentDescription";
           settings.ReadOnly = codeState != "01";
           settings.Width = Unit.Percentage(100);
           settings.Properties.ClientSideEvents.Validation = "OnValidation";
       }).GetHtml()
        </td>
    </tr>
</table>
