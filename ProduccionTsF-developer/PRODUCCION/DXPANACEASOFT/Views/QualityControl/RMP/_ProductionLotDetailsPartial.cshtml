@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models.DTOModel
@{
	string labelPup = DataProviderSetting.ValueSetting("EUPPPRIM");
	string analisislot = DataProviderSetting.ValueSetting("ANALXLOT");
}
@{
	var grid = Html.DevExpress().GridView<QualityControlPendingNewDTO>(settings =>
	{
		settings.Name = "gvProductionLotDetails";
		settings.CallbackRouteValues = new { Controller = "QualityControl", Action = "ProductionLotDetailsPartial" };

		settings.Width = Unit.Percentage(100);
		settings.CommandColumn.Visible = true;
		settings.CommandColumn.Width = Unit.Percentage(3);
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

		settings.KeyFieldName = "id";//"id_purchaseRequest;id_item";

		settings.SettingsPager.Visible = true;
		settings.Settings.ShowGroupPanel = true;
		settings.Settings.ShowFilterRow = true;
		settings.SettingsBehavior.AllowSelectByRowClick = false;
		settings.Settings.ShowFooter = true;
		settings.Settings.ShowFilterRowMenu = true;

		if (analisislot == "SELGUIA")
		{
			settings.SettingsBehavior.AllowSelectSingleRowOnly = false;
		}
		else
		{
			settings.SettingsBehavior.AllowSelectSingleRowOnly = true;

		}


		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		settings.ClientSideEvents.Init = "ProductionLotDetailsOnGridViewInit";
		settings.ClientSideEvents.SelectionChanged = "ProductionLotDetailsOnGridViewSelectionChanged";
		settings.ClientSideEvents.EndCallback = "ProductionLotDetailsOnGridViewEndCallback";

		//Panel para cantidad de registros
		settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
		};

		settings.SetFooterRowTemplateContent(c =>
		{
			//ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
			//if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			//{
			//    ViewContext.Writer.Write(
			//        @"<a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""PurchaseRequestDetailsClearSelection();"">Anular Selección</a>"
			//    );
			//}
		});

		//"No. de Lote"
		settings.Columns.Add(m => m.number, column =>
		{
			column.Caption = "Sec. Transaccional";
			column.Width = Unit.Percentage(8);
			column.ColumnType = MVCxGridViewColumnType.TextBox;
		});
		//"No. de Lote Interno"
		settings.Columns.Add(m => m.internalNumber, column =>
		{
			column.Caption = "No. Lote";
			column.Width = Unit.Percentage(8);
			column.ColumnType = MVCxGridViewColumnType.TextBox;
		});
		//"Fecha de Recepcion"
		settings.Columns.Add(m => m.receptionDate, column =>
		{
			column.Caption = "Fecha de Recepción";
			column.ColumnType = MVCxGridViewColumnType.DateEdit;
			column.Width = Unit.Percentage(8);

			var dateEdit = column.PropertiesEdit as DateEditProperties;
			dateEdit.Width = 75;
			dateEdit.DisplayFormatString = "dd/MM/yyyy";
		});
		settings.Columns.Add(m => m.remissionGuideNumber, column =>
		{
			column.Caption = "No. GUÍA";
			column.Width = Unit.Percentage(8);
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			if (analisislot == "SI")
				column.Visible = false;
			//column.SetDataItemTemplateContent(c =>
			//{
			//    var id_pld = DataBinder.Eval(c.DataItem, "id");
			//    if (id_pld != null)
			//    {
			//        int ipl = (int)id_pld;
			//        ViewContext.Writer.Write(DataProviderQualityControl.RemissionGuideNumber(ipl));
			//    }
			//});
		});
		settings.Columns.Add(m => m.remissionGuideNumberExterna, column =>
		{
			column.Caption = "Guía Externa";
			column.Width = Unit.Percentage(8);
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			if (analisislot == "SI")
				column.Visible = false;
			//column.SetDataItemTemplateContent(c =>
			//{
			//    var id_pld = DataBinder.Eval(c.DataItem, "id");
			//    if (id_pld != null)
			//    {
			//        int ipl = (int)id_pld;
			//        ViewContext.Writer.Write(DataProviderQualityControl.RemissionGuideNumberExterna(ipl));
			//    }
			//});
		});
		settings.Columns.Add(m => m.remissionGuideProcess, column =>
		{
			column.Caption = "Proceso";
			column.Width = Unit.Percentage(8);
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			//column.SetDataItemTemplateContent(c =>
			//{
			//    var id_pld = DataBinder.Eval(c.DataItem, "id");
			//    if (id_pld != null)
			//    {
			//        int ipl = (int)id_pld;
			//        ViewContext.Writer.Write(DataProviderQualityControl.RemissionGuideProcess(ipl));
			//    }
			//});
		});
		//Proveedor
		settings.Columns.Add(m => m.proveedor, column =>
		{
			column.Caption = "Proveedor";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
		});
		//Unidad de Producción
		settings.Columns.Add(m => m.productionUnitProvider, column =>
		{
			column.Caption = (labelPup != "") ? labelPup : "Unidad de Producción";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
		});
		//"Item"
		settings.Columns.Add(m => m.name_item, column =>
		{
			column.Caption = "Item";
			column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
		});

		//settings.Columns.Add(m => m.colorReference, column =>
		//{
		//    column.Caption = "Colores Referencia";
		//    column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
		//});

		//settings.Columns.Add(m => m.Grammage.description, column =>
		//{
		//    column.Caption = "Gramaje Desde";
		//    column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
		//});
		//settings.Columns.Add(m => m.Grammage1.description, column =>
		//{
		//    column.Caption = "Gramaje Hasta";
		//    column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
		//});


		//settings.Columns.Add(m => m.PurchaseRequest.Employee.Person.fullname_businessName, column =>
		//{
		//    column.Caption = "Solicitante";
		//    column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
		//});


		//"Proveedor Propuesto"
		//settings.Columns.Add(m => m.Provider.Person.fullname_businessName, column =>
		//{
		//    column.Caption = "Proveedor Propuesto";
		//    column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
		//});



		////"Cant. Ordenada"
		//settings.Columns.Add(m => m.quantityOrdered, column =>
		//{
		//    column.Caption = "Cant. Ordenada";
		//    column.PropertiesEdit.DisplayFormatString = "N2";

		//    column.Width = Unit.Percentage(5);
		//    column.ColumnType = MVCxGridViewColumnType.SpinEdit;
		//    column.SetDataItemTemplateContent(c =>
		//    {
		//        decimal quantityOrderedTmp = 0;
		//        var quantityOrdered = DataBinder.Eval(c.DataItem, "quantityOrdered");
		//        if (quantityOrdered != null)
		//        {
		//            quantityOrderedTmp = Convert.ToDecimal(quantityOrdered);
		//            ViewContext.Writer.Write(quantityOrderedTmp.ToString("N2"));
		//        }
		//    });
		//});
		////"Cant. Remitida"
		//settings.Columns.Add(m => m.quantityRemitted, column =>
		//{
		//    column.Caption = "Cant. Programada";
		//    column.PropertiesEdit.DisplayFormatString = "N2";
		//    column.Width = Unit.Percentage(5);
		//    column.ColumnType = MVCxGridViewColumnType.SpinEdit;
		//    column.SetDataItemTemplateContent(c =>
		//    {
		//        decimal quantityRemittedTmp = 0;
		//        var quantityRemitted = DataBinder.Eval(c.DataItem, "quantityRemitted");
		//        if (quantityRemitted != null)
		//        {
		//            quantityRemittedTmp = Convert.ToDecimal(quantityRemitted);
		//            ViewContext.Writer.Write(quantityRemittedTmp.ToString("N2"));
		//        }
		//    });


		//});
		//"Cant. Remitida"
		settings.Columns.Add(m => m.quantityRecived, column =>
		{
			column.Caption = "Cant. Remitida";
			column.PropertiesEdit.DisplayFormatString = "N2";
			column.Width = Unit.Percentage(5);
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.SetDataItemTemplateContent(c =>
			{
				decimal quantityRecivedTmp = 0;
				var quantityRecived = DataBinder.Eval(c.DataItem, "quantityRecived");
				if (quantityRecived != null)
				{
					quantityRecivedTmp = Convert.ToDecimal(quantityRecived);
					ViewContext.Writer.Write(quantityRecivedTmp.ToString("N2"));
				}
			});
		});
		//"Cant. Recibida"
		settings.Columns.Add(m => m.quantitydrained, column =>
		{
			column.Caption = "Cant. Recibida - Escurrido";
			column.PropertiesEdit.DisplayFormatString = "N2";
			column.Width = Unit.Percentage(5);
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.SetDataItemTemplateContent(c =>
			{
				decimal quantitydrainedTmp = 0;
				var quantitydrained = DataBinder.Eval(c.DataItem, "quantitydrained");
				if (quantitydrained != null)
				{
					quantitydrainedTmp = Convert.ToDecimal(quantitydrained);
					ViewContext.Writer.Write(quantitydrainedTmp.ToString("N2"));
				}
			});
		});
		//"UM"
		settings.Columns.Add(m => m.um, column =>
		{
			column.Caption = "UM";
			column.Width = Unit.Percentage(3);
			column.CellStyle.HorizontalAlign = HorizontalAlign.Center;


			//column.SetDataItemTemplateContent(c =>
			//{
			//    var id = (int)DataBinder.Eval(c.DataItem, "id_item");
			//    Item item = DataProviderItem.Item(id);
			//    string metricUnit = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
			//    ViewContext.Writer.Write(metricUnit);
			//});

		});
	});
	if (ViewData["EditError"] != null)
	{
		grid.SetEditErrorText((string)ViewData["EditError"]);
	}
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        string[] values = new string[] { "id" };//{ "id_purchaseRequest", "id_item" };
        foreach (var key in grid.GetCurrentPageRowValues(values))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}

