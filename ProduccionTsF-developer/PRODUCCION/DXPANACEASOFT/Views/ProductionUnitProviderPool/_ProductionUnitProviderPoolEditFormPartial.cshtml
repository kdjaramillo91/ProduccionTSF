@using DXPANACEASOFT.DataProviders
@model DXPANACEASOFT.Models.ProductionUnitProviderPool

<table class="table table-condensed">
    @{
        int? id = (Model != null && Model.id != 0) ? (int?)Model.id : null;
    }
    <tr>
        <td style="width: 8%;">
            @Html.DevExpress().LabelFor(m => m.code, settings =>
           {
               settings.Text = "Código:*";
               settings.AssociatedControlName = "code";

           }).GetHtml()
        </td>
        <td colspan="2">
            @Html.DevExpress().TextBoxFor(m => m.code, settings =>
           {
               settings.Name = "code";
               settings.Properties.ClientInstanceName = "code";
               settings.Width = Unit.Percentage(100);
               settings.Properties.NullText = "Código";
               settings.ShowModelErrors = true;
               settings.ClientVisible = true;
               settings.ReadOnly = (id != null && id != 0);
               settings.Properties.ClientSideEvents.Validation = "OnCodeProductionUnitProviderPoolsValidation";

           }).GetHtml()
        </td>
        <td style="width: 8%;">
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Nombre:*";
                settings.AssociatedControlName = "name";
            }).GetHtml()
        </td>
        <td colspan="2">
            @Html.DevExpress().TextBoxFor(m => m.name, settings =>
            {
                settings.Properties.ClientInstanceName = "name";

                settings.Width = Unit.Percentage(100);
                settings.ShowModelErrors = true;
                settings.Properties.ClientSideEvents.Validation = "OnProductionUnitProviderPoolsNameValidation";
            }).GetHtml()
        </td>
    </tr>

    <tr>
        <!-- CERTIFICADO -->
        <td>
            @Html.DevExpress().LabelFor(m => m.id_certification, settings =>
           {
               settings.Name = "certificationLabel";
               settings.Text = "Certificado";
               settings.AssociatedControlName = "id_certification";
           }).GetHtml()
        </td>
        <td colspan="2">
            @{
                int? id_certification = (Model != null && Model.id_certification != 0) ? (int?)Model.id_certification : null;
                var aSettingPCCOC = DataProviderSetting.SettingByCode("PCCOC");
                bool boolASettingPCCOC = aSettingPCCOC != null ? aSettingPCCOC.value == "SI" : false;
            }
            @Html.DevExpress().ComboBoxFor(m => m.id_certification, settings =>
       {
           settings.Name = "id_certification";
           settings.Properties.ClientInstanceName = "id_certification";
           settings.Width = Unit.Percentage(100);
           settings.Properties.ValueField = "id";
           settings.Properties.TextField = "name";
           settings.Properties.ValueType = typeof(int);

           settings.ShowModelErrors = true;
           settings.CallbackRouteValues = new { Controller = "ProductionUnitProviderPool", Action = "GetCertificationsByPriceList" };
           settings.Properties.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['id_priceList'] = id_priceList.GetValue(); e.customArgs['id_certificationCurrent'] = id_certification.GetValue();}";
           settings.Properties.ClientSideEvents.EndCallback = "OnCertification_EndCallback";
           settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
           settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
           settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
           //settings.Properties.ClientSideEvents.Validation = "OnPaymentMethodValidation";
       }).BindList(DataProviderCertification.CertificationsByCompanyAndCurrent(id_certification)).Bind(id_certification).GetHtml()
        </td>

        <!-- FIN CERTIFICADO -->
        <td>
            @Html.DevExpress().LabelFor(m => m.isActive, settings =>
            {
                settings.Text = "¿Activo?:";
                settings.AssociatedControlName = "isActive";
            }).GetHtml()
        </td>
        <td colspan="2">
            @Html.DevExpress().CheckBoxFor(m => m.isActive, settings =>
            {
                settings.Properties.ClientInstanceName = "isActive";

                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
    </tr>
    <tr>
        <td colspan="6" style="text-align: right;">
            @Html.DevExpress().Button(settings =>
            {
                settings.Name = "btnUpdate";
                settings.Text = "Actualizar";
                settings.RenderMode = ButtonRenderMode.Button;
                settings.ImagePosition = ImagePosition.Left;
                settings.Images.Image.IconID = IconID.ActionsSave16x16devav;
                settings.UseSubmitBehavior = false;
                settings.ClientSideEvents.Click = "ButtonUpdate_Click";
            }).GetHtml()
            @Html.DevExpress().Button(settings =>
            {
                settings.Name = "btnCancel";
                settings.Text = "Cancelar";
                settings.RenderMode = ButtonRenderMode.Button;
                settings.ImagePosition = ImagePosition.Left;
                settings.Images.Image.IconID = IconID.ActionsClose16x16office2013;
                settings.UseSubmitBehavior = false;
                settings.ClientSideEvents.Click = "ButtonCancel_Click";
            }).GetHtml()
        </td>
    </tr>
    <tr id="warehouseLocationAlertRow" style="display: none;">
        <td colspan="6">
            <div class="alert alert-danger fade in" style="margin-top: 18px;">
                <button type="button" class="close" data-dismiss="alert" aria-label="close" title="close" style="top: 0px; right: 0px;"><span aria-hidden="true">&times;</span></button>
                <span id="warehouseLocationErrorMessage"></span>
            </div>
        </td>
    </tr>
</table>

<script src="~/Scripts/productionUnitProviderPool/editform.js"></script>
<script src="~/Scripts/productionUnitProviderPool/validation.js"></script>

