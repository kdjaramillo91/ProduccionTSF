@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@model DXPANACEASOFT.Models.InventoryMove

@{
	var kardexFilter = ViewData["KardexFilter"] != null ? (KardexFilter)ViewData["KardexFilter"] : null;

	var id_documentType = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.Document.id_documentType != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.Document.id_documentType : (int?)null;
	var number = (kardexFilter != null) ? kardexFilter.inventoryMoveDetail.InventoryMove.Document.number : "";
	var reference = (kardexFilter != null) ? kardexFilter.inventoryMoveDetail.InventoryMove.Document.reference : "";
	var startEmissionDate = (kardexFilter != null) ? kardexFilter.startEmissionDate : new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
	var endEmissionDate = (kardexFilter != null) ? kardexFilter.endEmissionDate : DateTime.Now.Date;
	var numberLot = (kardexFilter != null) ? kardexFilter.inventoryMoveDetail.Lot.number : "";
	var internalNumberLot = (kardexFilter != null) ? kardexFilter.inventoryMoveDetail.Lot.ProductionLot.internalNumber : "";
	var id_inventoryReason = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.id_inventoryReason != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.id_inventoryReason : null;
	var id_warehouseExit = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.InventoryExitMove.id_warehouseExit != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.InventoryExitMove.id_warehouseExit : null;
	var id_warehouseLocationExit = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.InventoryExitMove.id_warehouseLocationExit != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.InventoryExitMove.id_warehouseLocationExit : null;
	var id_dispatcher = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.InventoryExitMove.id_dispatcher != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.InventoryExitMove.id_dispatcher : (int?)null;
	var id_warehouseEntry = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.InventoryEntryMove.id_warehouseEntry != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.InventoryEntryMove.id_warehouseEntry : null;
	var id_warehouseLocationEntry = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.InventoryEntryMove.id_warehouseLocationEntry != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.InventoryEntryMove.id_warehouseLocationEntry : null;
	var id_receiver = (kardexFilter != null && kardexFilter.inventoryMoveDetail.InventoryMove.InventoryEntryMove.id_receiver != 0) ? kardexFilter.inventoryMoveDetail.InventoryMove.InventoryEntryMove.id_receiver : (int?)null;
	var loteMarcado = DataProviderSetting.ValueSetting("LMMASTER");
	var items = (kardexFilter != null) ? kardexFilter.items : null;
}
@using (Html.BeginForm("", "", FormMethod.Post, new { id = "formFilterKardex", name = "formFilterKardex" }))
{
	@Html.Hidden("KardexFilter", (kardexFilter != null))
	<table class="table table-condensed" style="border: 0px solid #ffffff; margin-bottom: 0px;">
		<tr>
			<td style="width: 20%;">
				<table class="table table-condensed" style="border: 0px solid #ffffff;">
					<tr style="border-bottom: 1px Solid #C0C0C0;">
						<td colspan="2">
							<span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Documento</span>
						</td>
					</tr>
					<tr>
						<td style="width: 40%;">
							@Html.DevExpress().Label(settings =>
							{
								settings.Name = "documentTypeLabel";
								settings.Text = "Tipo de Movimientos:";
								settings.AssociatedControlName = "id_documentType";
							}).GetHtml()
						</td>
						<td>
							@Html.DevExpress().ComboBox(settings =>
					   {
						   settings.Name = "id_documentType";
						   settings.Properties.ClientInstanceName = "id_documentType";
						   settings.Width = Unit.Percentage(100);

						   settings.Properties.ValueField = "id";
						   settings.Properties.TextField = "name";
						   settings.Properties.ValueType = typeof(int);
						   settings.Properties.Width = Unit.Percentage(100);

						   settings.Properties.NullDisplayText = "Todos";
						   settings.Properties.NullText = "Todos";

						   settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
						   settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
						   settings.Properties.EnableSynchronization = DefaultBoolean.False;
						   settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

					   }).BindList(DataProviderDocumentType.InventoryMoveDocumentTypesByCompany((int)ViewData["id_company"])).Bind(id_documentType).GetHtml()
						</td>
					</tr>
					@*<tr>
							<td>
								@Html.DevExpress().LabelFor(m => m.Document.id_documentState, settings =>
								{
									settings.Name = "documentStateLabel";
									settings.Text = "Estado:";
									settings.AssociatedControlName = "id_documentState";
								}).GetHtml()
							</td>
							<td>
								@Html.DevExpress().ComboBox(settings =>
						   {
							   settings.Name = "id_documentState";
							   settings.Properties.ClientInstanceName = "id_documentState";
							   settings.Width = Unit.Percentage(100);

							   settings.Properties.ValueField = "id";
							   settings.Properties.TextField = "name";
							   settings.Properties.ValueType = typeof(int);
							   settings.Properties.Width = Unit.Percentage(100);

							   settings.Properties.NullDisplayText = "Todos";
							   settings.Properties.NullText = "Todos";

							   settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
							   settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
							   settings.Properties.EnableSynchronization = DefaultBoolean.False;
							   settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
						   }).BindList(DataProviderDocumentState.InventoryMoveDocumentStatesByCompany((int?)ViewData["id_company"])).GetHtml()
							</td>
						</tr>*@
					<tr>
						<td>
							@Html.DevExpress().LabelFor(m => m.Document.number, settings =>
							{
								settings.Name = "numberLabel";
								settings.Text = "Número:";
								settings.AssociatedControlName = "number";
							}).GetHtml()
						</td>
						<td>
							@Html.DevExpress().TextBoxFor(m => m.Document.number, settings =>
					   {
						   settings.Name = "number";
						   //settings.Properties.ClientInstanceName = "number";
						   settings.Width = Unit.Percentage(100);
						   settings.Text = number;
						   settings.Properties.NullDisplayText = "Todos";
						   settings.Properties.NullText = "Todos";

					   }).GetHtml()
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().LabelFor(m => m.Document.reference, settings =>
							{
								settings.Name = "referenceLabel";
								settings.Text = "Referencia:";
								settings.AssociatedControlName = "reference";
							}).GetHtml()
						</td>
						<td>
							@Html.DevExpress().TextBoxFor(m => m.Document.reference, settings =>
							{
								settings.Name = "reference";
								settings.Width = Unit.Percentage(100);

								settings.Text = reference;
								settings.Properties.NullDisplayText = "Todas";
								settings.Properties.NullText = "Todas";

							}).GetHtml()
						</td>
					</tr>
				</table>
			</td>
			<td style="width: 35%;">
				<table class="table table-condensed" style="border: 0px solid #ffffff;">
					<tr style="border-bottom: 1px Solid #C0C0C0;">
						<td colspan="3">
							<span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Emisi&oacute;n</span>
						</td>
					</tr>
					<tr>
						<td style="width: 20%">
							@Html.DevExpress().LabelFor(m => m.Document.emissionDate, settings =>
							{
								settings.Name = "startEmissionDateLabel";
								settings.Text = "Fecha Emisión:";
								settings.AssociatedControlName = "startEmissionDate";
							}).GetHtml()
						</td>
						<td>

							@Html.DevExpress().DateEdit(settings =>
					   {
						   //m => m.Document.emissionDate,
						   settings.Name = "startEmissionDate";
						   settings.Width = Unit.Percentage(100);

						   //settings.Properties.NullDisplayText = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).ToString("dd/MM/yyyy");
						   //settings.Properties.NullText = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).ToString("dd/MM/yyyy");

						   settings.Properties.DisplayFormatInEditMode = true;

						   settings.Properties.DisplayFormatString = "dd/MM/yyyy";
						   settings.Properties.EditFormat = EditFormat.Custom;
						   settings.Properties.EditFormatString = "dd/MM/yyyy";
						   settings.Date = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

						   settings.Properties.CalendarProperties.Columns = 2;
						   //settings.Properties.DateRangeSettings.MinDayCount = 0;
						   //settings.Properties.DateRangeSettings.MaxDayCount = 90;

					   }).Bind(startEmissionDate).GetHtml()
						</td>
						<td>
							@Html.DevExpress().DateEdit(settings =>
					   {
						   //m => m.Document.emissionDate,
						   settings.Name = "endEmissionDate";
						   settings.Width = Unit.Percentage(100);

						   settings.Properties.NullDisplayText = DateTime.Now.Date.ToString("dd/MM/yyyy");
						   settings.Properties.NullText = DateTime.Now.Date.ToString("dd/MM/yyyy");

						   settings.Properties.DisplayFormatInEditMode = true;
						   settings.Properties.DisplayFormatString = "dd/MM/yyyy";
						   settings.Properties.EditFormat = EditFormat.Custom;
						   settings.Properties.EditFormatString = "dd/MM/yyyy";
						   settings.Date = DateTime.Now.Date;

						   settings.Properties.CalendarProperties.Columns = 2;
						   settings.Properties.DateRangeSettings.StartDateEditID = "startEmissionDate";
						   //settings.Properties.DateRangeSettings.MinDayCount = 0;
						   //settings.Properties.DateRangeSettings.MaxDayCount = 90;

					   }).Bind(endEmissionDate).GetHtml()
						</td>
					</tr>
				</table>

				<table class="table table-condensed" style="border: 0px solid #ffffff;">
					<tr style="border-bottom: 1px Solid #C0C0C0;">
						<td colspan="3">
							<span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Detalle Movimiento de Inventario</span>
						</td>
					</tr>
					<tr>
						<td style="width: 35%">
							@Html.DevExpress().Label(settings =>
						   {
							   settings.Name = "numberLotLabel";
							   settings.Text = "Sec. Transaccional Lote:";
							   //settings.AssociatedControlName = "number";
						   }).GetHtml()
						</td>
						<td>
							@Html.DevExpress().TextBox(settings =>
					   {
						   settings.Name = "numberLot";
						   //settings.Properties.ClientInstanceName = "number";
						   settings.Width = Unit.Percentage(100);

						   settings.Text = numberLot;
						   settings.Properties.NullDisplayText = "Todos";
						   settings.Properties.NullText = "Todos";

					   }).GetHtml()
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
						   {
							   settings.Name = "internalNumberLotLabel";
							   settings.Text = "Número de Lote:";
							   //settings.AssociatedControlName = "number";
						   }).GetHtml()
						</td>
						<td>
							@Html.DevExpress().TextBox(settings =>
					   {
						   settings.Name = "internalNumberLot";
						   //settings.Properties.ClientInstanceName = "number";
						   settings.Width = Unit.Percentage(100);

						   settings.Properties.NullDisplayText = "Todos";
						   settings.Properties.NullText = "Todos";

					   }).Bind(internalNumberLot).GetHtml()
						</td>
					</tr>
					@if(loteMarcado == "SI")
					{
						<tr>
							<td>
								@Html.DevExpress().Label(settings =>
								{
									settings.Name = "lotMarkedLabel";
									settings.Text = "Número Lote Marcado:";
									//settings.AssociatedControlName = "number";
								}).GetHtml()
							</td>
							<td>
								@Html.DevExpress().TextBox(settings =>
							{
								settings.Name = "lotMarked";
								//settings.Properties.ClientInstanceName = "number";
								settings.Width = Unit.Percentage(100);

								settings.Properties.NullDisplayText = "Todos";
								settings.Properties.NullText = "Todos";

							}).Bind(internalNumberLot).GetHtml()
							</td>
						</tr>
					}
					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
					   {
						   settings.Name = "itemLabel";
						   settings.Text = "Código - Producto:";
						   //settings.AssociatedControlName = "item";
					   }).GetHtml()
						</td>
						<td>
							@Html.DevExpress().TokenBox(settings =>
						   {
							   settings.Name = "items";
							   settings.Properties.ClientInstanceName = "items";
							   settings.Width = Unit.Percentage(100);

							   settings.Properties.NullDisplayText = "Todos";
							   settings.Properties.NullText = "Todos";

							   settings.Properties.AllowCustomTokens = false;
							   settings.Properties.ValueField = "id";
							   settings.Properties.TextField = "name";
						   }).BindList(DataProviderItem.CodeItemsByCompany((int?)ViewData["id_company"])).Bind(items).GetHtml()
						</td>
					</tr>

					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
					   {
						   settings.Name = "natureMoveLabel";
						   settings.Text = "Naturaleza:";
					   }).GetHtml()
						</td>
						<td>
							@{
								Html.RenderPartial("Components/_ComboBoxNatureMove");
							}
						</td>
					</tr>

					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
					   {
						   settings.Name = "inventoryReasonLabel";
						   settings.Text = "Motivo de Inventario:";
					   }).GetHtml()
						</td>
						<td>
							@{
								Html.RenderPartial("Components/_ComboBoxInventoryReason");
							}
						</td>
					</tr>
				</table>
			</td>
			<td style="width: 35%;">
				<table class="table table-condensed" style="border: 0px solid #ffffff">
					<tr style="border-bottom: 1px Solid #C0C0C0;">
						<td colspan="4">
							<span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Movimiento de Inventario</span>
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
							{
								settings.Name = "warehouseExitLabel";
								settings.Text = "Bodega Salida:";
								settings.AssociatedControlName = "id_warehouseExit";
							}).GetHtml()
						</td>
						<td>
							@{
								Html.RenderPartial("Components/_ComboBoxWarehouseExit");
							}
						</td>
						<td>
							@Html.DevExpress().Label(settings =>
							{
								settings.Name = "locationExitLabel";
								settings.Text = "Ubicación Salida:";
								settings.AssociatedControlName = "id_locationExit";
							}).GetHtml()
						</td>
						<td>
							@{
								Html.RenderPartial("Components/_ComboBoxWarehouseExitLocation");
							}
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
							{
								settings.Name = "dispatcherLabel";
								settings.Text = "Despachador:";
								settings.AssociatedControlName = "id_dispatcher";
							}).GetHtml()
						</td>
						<td colspan="3">
							@Html.DevExpress().ComboBox(settings =>
							{
								settings.Name = "id_dispatcher";
								settings.Width = Unit.Percentage(100);

								settings.Properties.ValueField = "id";
								settings.Properties.TextField = "fullname_businessName";
								settings.Properties.ValueType = typeof(int);
								settings.Properties.Width = Unit.Percentage(100);

								settings.Properties.NullDisplayText = "Todos";
								settings.Properties.NullText = "Todos";

								settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
								settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
								settings.Properties.EnableSynchronization = DefaultBoolean.False;
								settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
							}).BindList(DataProviderPerson.Employees()).Bind(id_dispatcher).GetHtml()
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
							{
								settings.Name = "warehopuseEntryLabel";
								settings.Text = "Bodega Entrada:";
								settings.AssociatedControlName = "id_warehopuseEntry";
							}).GetHtml()
						</td>
						<td>
							@{
								Html.RenderPartial("Components/_ComboBoxWarehouseEntry");
							}
						</td>
						<td>
							@Html.DevExpress().Label(settings =>
							{
								settings.Name = "locationEntryLabel";
								settings.Text = "Ubicación Entra:";
								settings.AssociatedControlName = "id_locationEntry";
							}).GetHtml()
						</td>
						<td>
							@{
								Html.RenderPartial("Components/_ComboBoxWarehouseEntryLocation");
							}

						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Label(settings =>
							{
								settings.Name = "receiverLabel";
								settings.Text = "Recibidor:";
								settings.AssociatedControlName = "id_receiver";
							}).GetHtml()
						</td>
						<td colspan="3">
							@Html.DevExpress().ComboBox(settings =>
							{
								settings.Name = "id_receiver";
								settings.Width = Unit.Percentage(100);

								settings.Properties.ValueField = "id";
								settings.Properties.TextField = "fullname_businessName";
								settings.Properties.ValueType = typeof(int);
								settings.Properties.Width = Unit.Percentage(100);

								settings.Properties.NullDisplayText = "Todos";
								settings.Properties.NullText = "Todos";

								settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
								settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
								settings.Properties.EnableSynchronization = DefaultBoolean.False;
								settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
							}).BindList(DataProviderPerson.Employees()).Bind(id_receiver).GetHtml()
						</td>
					</tr>
				</table>
			</td>
			<td>
				<table class="table table-condensed" style="border: 0px solid #ffffff;">
					<tr style="border-bottom: 1px Solid #C0C0C0;">
						<td>
							<span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Acciones</span>
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Button(settings =>
							{
								settings.Name = "Search";
								settings.UseSubmitBehavior = false;
								settings.Text = "Kardex";
								settings.Images.Image.IconID = IconID.ActionsSearch16x16devav;
								settings.Width = Unit.Percentage(100);
								settings.ClientSideEvents.Click = "OnClickSearchKardexs";
								settings.ClientSideEvents.Init = "OnClickSearchKardexs_Init";
							}).GetHtml()
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Button(settings =>
							{
								settings.Name = "SearchExcel";
								settings.UseSubmitBehavior = false;
								settings.Text = "Kardex Excel";
								settings.Images.Image.IconID = IconID.ActionsSearch16x16devav;
								settings.Width = Unit.Percentage(100);
								settings.ClientSideEvents.Click = "OnClickSearchKardexsExcel";
								settings.ClientSideEvents.Init = "OnClickSearchKardexsExcel_Init";
							}).GetHtml()
						</td>
					</tr>
					<tr>
						<td>
							@Html.DevExpress().Button(settings =>
							{
								settings.Name = "Clear";
								settings.UseSubmitBehavior = false;
								settings.Text = "Limpiar";
								settings.Images.Image.IconID = IconID.ActionsClear16x16;
								settings.Width = Unit.Percentage(100);
								settings.ClientSideEvents.Click = "OnClickClearFiltersKardex";
							}).GetHtml()
						</td>
					</tr>
					<tr>
						<td>
							<div class="vertical-divider"></div>
							<div class="btn-group" style="width: 100%;">
								<button type="button" class="btn-default dropdown-toggle custom-button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
									<img src="~/Content/image/print_preview.png" alt="" style="margin-right: 4px;" id="PrintReports"><span>Reportes</span><span class="caret"></span>
								</button>
								<ul class="dropdown-menu dropdown-menu-right">
									<li><a href="javascript:;" onclick="KardexReport();">Kardex</a></li>
									<li><a href="javascript:;" onclick="KardexReportLot();">Kardex por Lote</a></li>
									<li><a href="javascript:;" onclick="KardexCostReport();">Kardex con Costos</a></li>
									<li><a href="javascript:;" onclick="BalanceReport();">Saldos</a></li>
									<li><a href="javascript:;" onclick="BalanceLotReport();">Saldos por Lote</a></li>

									<li><a href="javascript:;" onclick="InventoryMoveReport();">Movimientos</a></li>
									<li><a href="javascript:;" onclick="InventoryLotMoveReport();">Movimientos por Lote</a></li>
									<li><a href="javascript:;" onclick="KardexReportProvider();">Kardex por Proveedor</a></li>
									<li><a href="javascript:;" onclick="KardexReportProviderBalance();">Kardex por Proveedor por Saldos</a></li>
									<li><a href="javascript:;" onclick="BalanceWithOutLotReport();">Saldos por Peso</a></li>
									<li><a href="javascript:;" onclick="BalanceWithOutLotAllReport();">Saldos por Peso (Todos)</a></li>

								</ul>
							</div>
							<div class="vertical-divider"></div>
						</td>
					</tr>
					<tr>
						<td>
							<div class="vertical-divider"></div>
							<div class="btn-group" style="width: 100%;">
								<button type="button" class="btn-default dropdown-toggle custom-button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
									<img src="~/Content/image/print_preview.png" alt="" style="margin-right: 4px;" id="PrintReports"><span>Reportes Excel</span><span class="caret"></span>
								</button>
								<ul class="dropdown-menu dropdown-menu-right">
									<li><a href="javascript:;" onclick="BalanceLotExcelReport();">Movimientos por Lote</a></li>
									<li><a href="javascript:;" onclick="BalanceWithOutLotExcelReport();">Saldos por Peso</a></li>
								</ul>
							</div>
							<div class="vertical-divider"></div>
						</td>
					</tr>
				</table>
			</td>
		</tr>
	</table>
}
