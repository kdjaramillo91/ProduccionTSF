@using System.Globalization;
@using System.Drawing
@using DevExpress.Data
@using DevExpress.Data.Helpers
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.ProductionSchedulePurchaseRequestDetail>

@{
    var metricUnitUMTPAux = DataProviderSetting.ValueSetting("UMTP");
    var id_metricUnitUMTPValueAux = int.Parse(metricUnitUMTPAux != null ? metricUnitUMTPAux : "0");
    var metricUnitUMTP = DataProviderMetricUnit.MetricUnitById(id_metricUnitUMTPValueAux);
}

@{
    var grid = Html.DevExpress().GridView<ProductionSchedulePurchaseRequestDetail>(settings =>
    {
        settings.Name = "gvProductionSchedulePurchaseRequestDetail";
        settings.CallbackRouteValues = new { Controller = "ProductionSchedule", Action = "ProductionScheduleViewFormPurchaseRequestsDetailPartial" };

        //Eventos
        settings.ClientSideEvents.BeginCallback = "ProductionScheduleDetail_OnBeginCallback";
        settings.ClientSideEvents.EndCallback = "ProductionSchedulePurchaseRequestDetail_OnEndCallback";

        settings.CommandColumn.Visible = false;
        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";//settings.KeyFieldName = "RowId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Styles.Header.Wrap = DefaultBoolean.True;

        //Checkbox de registros de tabla
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.SettingsBehavior.ConfirmDelete = false;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null)
            {
                e.Properties["cpIdProductionSchedule"] = 0;
            }
            e.Properties["cpIdProductionSchedule"] = ViewData["id_productionSchedule"];

            List<ProductionSchedulePurchaseRequestDetail> rows = (Model as List<ProductionSchedulePurchaseRequestDetail>);
            rows = (rows != null) ? rows.ToList() : new List<ProductionSchedulePurchaseRequestDetail>();

            e.Properties["cpRowsCount"] = rows.Count;

        };

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;


        #region ColumnsAdd

        //salesRequest
        settings.Columns.Add(column =>
        {
            column.Name = "salesRequest";
            column.Caption = "No. Requerimiento de Pedido";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.String;

            column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                var productionScheduleProductionOrderDetail = (ProductionScheduleProductionOrderDetail)DataBinder.Eval(c.DataItem, "ProductionScheduleProductionOrderDetail");
                var productionScheduleRequestDetail = (productionScheduleProductionOrderDetail != null) ? productionScheduleProductionOrderDetail.ProductionScheduleRequestDetail : null;

                string text = string.Empty;

                if (productionScheduleRequestDetail != null && productionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail != null &&
                    productionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail.Count > 0)
                {
                    int? id_salesRequest = productionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail.FirstOrDefault().id_salesRequest;
                    SalesRequest salesRequest = DataProviderSalesRequest.SalesRequest(id_salesRequest);

                    text = salesRequest.Document.number;

                }

                ViewContext.Writer.Write(text);
            });
        });

        //id_itemRequestProductionOrder
        settings.Columns.Add(column =>
        {
            //column.FieldName = "id_item";
            column.Name = "id_itemRequestProductionOrder";
            column.Caption = "Nombre del Producto";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(15);

            column.SetDataItemTemplateContent(c =>
            {
                var productionScheduleProductionOrderDetail = (ProductionScheduleProductionOrderDetail)DataBinder.Eval(c.DataItem, "ProductionScheduleProductionOrderDetail");
                var productionScheduleRequestDetail = (productionScheduleProductionOrderDetail != null) ? productionScheduleProductionOrderDetail.ProductionScheduleRequestDetail : null;

                string text = string.Empty;

                if (productionScheduleRequestDetail != null)
                {
                    int? id_item = productionScheduleRequestDetail.id_item;
                    Item item = DataProviderItem.Item(id_item);

                    if (item != null)
                    {
                        text = item.name;
                    }

                }

                ViewContext.Writer.Write(text);

            });
        });

        //quantityRequestProductionOrder
        settings.Columns.Add(column =>
        {
            //column.FieldName = "quantityRequestProductionOrder";
            column.Name = "quantityRequestProductionOrder";
            column.Caption = "Cantidad Orden de Producción";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(10);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                var productionScheduleProductionOrderDetail = (ProductionScheduleProductionOrderDetail)DataBinder.Eval(c.DataItem, "ProductionScheduleProductionOrderDetail");

                decimal quantityRequestProductionOrder = (productionScheduleProductionOrderDetail != null) ? productionScheduleProductionOrderDetail.quantityProductionOrder : 0;
                ViewContext.Writer.Write(quantityRequestProductionOrder.ToString("N2"));
            });

        });

        //metricUnitRequestProductionOrder
        settings.Columns.Add(column =>
        {
            column.Name = "metricUnitRequestProductionOrder";
            column.Caption = "UM Orden Prod.";
            column.Width = Unit.Percentage(5);
            column.UnboundType = UnboundColumnType.String;
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                var productionScheduleProductionOrderDetail = (ProductionScheduleProductionOrderDetail)DataBinder.Eval(c.DataItem, "ProductionScheduleProductionOrderDetail");
                var productionScheduleRequestDetail = (productionScheduleProductionOrderDetail != null) ? productionScheduleProductionOrderDetail.ProductionScheduleRequestDetail : null;

                string text = string.Empty;

                if (productionScheduleRequestDetail != null)
                {
                    int? id_item = productionScheduleRequestDetail.id_item;
                    Item item = DataProviderItem.Item(id_item);

                    if (item != null && item.ItemSaleInformation != null && item.ItemSaleInformation.MetricUnit != null)
                    {
                        text = item.ItemSaleInformation.MetricUnit.code;
                    }
                    else
                    {
                        if (item != null && item.ItemInventory != null && item.ItemInventory.MetricUnit != null)
                        {
                            text = item.ItemInventory.MetricUnit.code;
                        }
                    }

                }

                ViewContext.Writer.Write(text);

            });
        });

        //id_itemPurchaseRequest
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_item";
            column.Name = "id_itemPurchaseRequest";
            column.Caption = "Producto a Comprar";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(15);

            column.SetDataItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");

                string text = string.Empty;

                Item item = DataProviderItem.Item(id_item);

                if (item != null)
                {
                    text = item.name;
                }


                ViewContext.Writer.Write(text);

            });
        });

        //quantityPurchaseRequest
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantity";
            column.Name = "quantityPurchaseRequest";
            column.Caption = "Cantidad Requerida de Compra";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(10);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantity = (decimal)DataBinder.Eval(c.DataItem, "quantity");
                ViewContext.Writer.Write(quantity.ToString("N2"));
            });

        });

        //metricUnitInventoryReservation
        settings.Columns.Add(column =>
        {
            column.Name = "metricUnitPurchaseRequest";
            column.Caption = "UM Compra";
            column.Width = Unit.Percentage(5);
            column.UnboundType = UnboundColumnType.String;
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {

                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");

                string text = string.Empty;

                Item item = DataProviderItem.Item(id_item);

                if (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null)
                {
                    text = item.ItemPurchaseInformation.MetricUnit.code;
                }
                else
                {
                    text = metricUnitUMTP != null ? metricUnitUMTP.code : "";
                }

                ViewContext.Writer.Write(text);
            });
        });



        #endregion

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
