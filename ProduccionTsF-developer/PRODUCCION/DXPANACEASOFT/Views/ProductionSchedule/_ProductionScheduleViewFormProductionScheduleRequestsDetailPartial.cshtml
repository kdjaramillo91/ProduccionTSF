@using System.Globalization;
@using System.Drawing
@using DevExpress.Data
@using DevExpress.Data.Helpers
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.ProductionScheduleRequestDetail>
@*@{
    var metricUnitUMTPAux = DataProviderSetting.ValueSetting("UMTP");
    var id_metricUnitUMTPValueAux = int.Parse(metricUnitUMTPAux != null ? metricUnitUMTPAux : "0");
    var metricUnitUMTP = DataProviderMetricUnit.MetricUnitById(id_metricUnitUMTPValueAux);
}*@

@{
    var grid = Html.DevExpress().GridView<ProductionScheduleRequestDetail>(settings =>
    {
        settings.Name = "gvProductionScheduleRequestDetail" + ViewData["id_productionSchedule"];
        settings.CallbackRouteValues = new { Controller = "ProductionSchedule", Action = "ProductionScheduleViewFormRequestsDetailPartial" };

        //Eventos
        settings.ClientSideEvents.BeginCallback = "ProductionScheduleDetail_OnBeginCallback";

        settings.CommandColumn.Visible = false;
        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";//settings.KeyFieldName = "RowId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Styles.Header.Wrap = DefaultBoolean.True;

        //Checkbox de registros de tabla
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.SettingsBehavior.ConfirmDelete = false;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null)
            {
                e.Properties["cpIdProductionSchedule"] = 0;
            }
            e.Properties["cpIdProductionSchedule"] = ViewData["id_productionSchedule"];
        };

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;


        #region ColumnsAdd

        //salesRequest
        settings.Columns.Add(column =>
        {
            column.Name = "salesRequest";
            column.Caption = "No. Requerimiento de Pedido";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.String;

            column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                List<SalesRequestOrQuotationDetailProductionScheduleRequestDetail> salesRequests = null;

                try
                {
                    salesRequests = (List<SalesRequestOrQuotationDetailProductionScheduleRequestDetail>)DataBinder.Eval(c.DataItem, "SalesRequestOrQuotationDetailProductionScheduleRequestDetail");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<SalesRequestOrQuotationDetailProductionScheduleRequestDetail> temp = (HashSet<SalesRequestOrQuotationDetailProductionScheduleRequestDetail>)DataBinder.Eval(c.DataItem, "SalesRequestOrQuotationDetailProductionScheduleRequestDetail");
                        salesRequests = temp.ToList();
                    }
                    catch (Exception)
                    {
                        salesRequests = null;
                    }
                }


                string text = string.Empty;

                if (salesRequests != null && salesRequests.Count > 0)
                {
                    int? id_salesRequest = salesRequests[0].id_salesRequest;
                    SalesRequest salesRequest = DataProviderSalesRequest.SalesRequest(id_salesRequest);

                    text += salesRequest.Document.number;

                    //text += (purchaseRequests.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseRequests.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);
            });
        });

        //id_item
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_item";
            column.Name = "id_item";
            column.Caption = "Nombre del Producto";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(15);

            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");

                Item item = DataProviderItem.Item(id_item);

                string text = string.Empty;

                if (item != null)
                {
                    text = item.name;
                }

                ViewContext.Writer.Write(text);
            });
        });

        //quantitySale
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantitySale";
            column.Name = "quantitySale";
            column.Caption = "Cant. U.M.V";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(10);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantitySale = (decimal)DataBinder.Eval(c.DataItem, "quantitySale");
                ViewContext.Writer.Write(quantitySale.ToString("N2"));
            });

        });

        //metricUnitSale
        settings.Columns.Add(column =>
        {
            column.Name = "metricUnitSale";
            column.Caption = "U.M.V";
            column.Width = Unit.Percentage(5);
            column.UnboundType = UnboundColumnType.String;
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");

                Item item = DataProviderItem.Item(id_item);

                string text = "";

                if (item != null && item.ItemSaleInformation != null && item.ItemSaleInformation.MetricUnit != null)
                {
                    text = item.ItemSaleInformation.MetricUnit.code;
                }


                ViewContext.Writer.Write(text);//metricUnitUMTP != null ? metricUnitUMTP.code : ""/*"Lbs"*/);
            });
        });

        //quantityRequest
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityRequest";
            column.Name = "quantityRequest";
            column.Caption = "Cant. Requerido Pedido";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(10);
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityRequest = (decimal)DataBinder.Eval(c.DataItem, "quantityRequest");
                ViewContext.Writer.Write(quantityRequest.ToString("N2"));
            });
        });

        //metricUnitSalesRequest
        settings.Columns.Add(column =>
        {
            column.Name = "metricUnitSalesRequest";
            column.Caption = "U.M Requerido Pedido";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.String;

            column.Width = Unit.Percentage(5);

            column.SetDataItemTemplateContent(c =>
            {
                List<SalesRequestOrQuotationDetailProductionScheduleRequestDetail> salesRequests = null;

                try
                {
                    salesRequests = (List<SalesRequestOrQuotationDetailProductionScheduleRequestDetail>)DataBinder.Eval(c.DataItem, "SalesRequestOrQuotationDetailProductionScheduleRequestDetail");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<SalesRequestOrQuotationDetailProductionScheduleRequestDetail> temp = (HashSet<SalesRequestOrQuotationDetailProductionScheduleRequestDetail>)DataBinder.Eval(c.DataItem, "SalesRequestOrQuotationDetailProductionScheduleRequestDetail");
                        salesRequests = temp.ToList();
                    }
                    catch (Exception)
                    {
                        salesRequests = null;
                    }
                }


                string text = string.Empty;

                if (salesRequests != null && salesRequests.Count > 0)
                {
                    int? id_metricUnitRequestDetail = salesRequests[0].id_metricUnitRequestDetail;
                    MetricUnit metricUnit = DataProviderMetricUnit.MetricUnit(id_metricUnitRequestDetail);

                    text = metricUnit.code;

                    //text += (purchaseRequests.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseRequests.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);
            });
        });

        //quantitySchedule
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantitySchedule";
            column.Name = "quantitySchedule";
            column.Caption = "Cantidad";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantitySchedule = (decimal)DataBinder.Eval(c.DataItem, "quantitySchedule");
                ViewContext.Writer.Write(quantitySchedule.ToString("N2"));
            });
        });

        //id_metricUnit
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_metricUnit";
            column.Caption = "UM";
            column.Width = Unit.Percentage(5);
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                var id_metricUnit = (int?)DataBinder.Eval(c.DataItem, "id_metricUnit");

                MetricUnit metricUnit = DataProviderMetricUnit.MetricUnit(id_metricUnit);

                string text = (metricUnit != null) ? metricUnit.code : "";
                ViewContext.Writer.Write(text);
            });
        });

        #endregion

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
