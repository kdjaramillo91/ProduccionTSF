@using DevExpress.Data
@using DevExpress.Data.Helpers
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.ProductionLotLoss>

@{
	var grid = Html.DevExpress().GridView<ProductionLotLoss>(settings =>
	{
		settings.Name = "gvProductionLotProcessEditFormProductionLotLossDetail";
		settings.CallbackRouteValues = new { Controller = "ProductionLotProcess", Action = "ProductionLotProcessEditFormProductionLotLossDetailPartial" };

//settings.ClientSideEvents.BeginCallback = "ProductionLotProcessItemsDetail_OnBeginCallback";

settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ProductionLotProcess", Action = "ProductionLotProcessEditFormProductionLotLossDetailAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ProductionLotProcess", Action = "ProductionLotProcessEditFormProductionLotLossDetailUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ProductionLotProcess", Action = "ProductionLotProcessEditFormProductionLotLossDetailDelete" };
		settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

		settings.CommandColumn.Visible = true;
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
		settings.SettingsBehavior.ConfirmDelete = false;

		settings.Width = Unit.Percentage(100);

		settings.KeyFieldName = "id";
//settings.KeyFieldName = "id_item";

settings.SettingsPager.Visible = true;
		settings.Settings.ShowGroupPanel = false;
		settings.Settings.ShowFilterRow = false;
		settings.SettingsBehavior.AllowSelectByRowClick = true;

//Checkbox de registros de tabla
settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

//Eventos
settings.ClientSideEvents.Init = "OnGridViewLossDetailsInit";
		settings.ClientSideEvents.SelectionChanged = "OnGridViewLossDetailSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "OnGridViewLossDetailsBeginCallback";
		settings.ClientSideEvents.EndCallback = "OnGridViewLossDetailsEndCallback";

//Pie de tabla
settings.Settings.ShowFooter = true;

//Panel para cantidad de registros
settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

			List<ProductionLotLoss> rows = (Model as List<ProductionLotLoss>);
			rows = (rows != null) ? rows.ToList() : new List<ProductionLotLoss>();

			e.Properties["cpRowsCount"] = rows.Count;
		};

		settings.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfoLoss""></span>");
			if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			{
				ViewContext.Writer.Write(
					@"<a id=""lnkSelectAllRowsLoss"" style=""cursor: pointer;"" onclick=""gvEditLossDetailsSelectAllRows()"">Seleccionar Todos</a>
			  <a id=""lnkClearSelectionLoss"" style=""cursor: pointer;"" onclick=""gvEditLossDetailsClearSelection()"">Anular Selección</a>"
				);
			}
		});

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		settings.SettingsEditing.ShowModelErrorsForEditors = true;

		settings.InitNewRow = (s, e) =>
		{
			e.NewValues["quantity"] = 0.00M;
		};

#region ColumnsAdd

settings.Columns.Add(column =>
		{
			column.FieldName = "id_item";
			column.Caption = "Nombre del Producto";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.Width = Unit.Percentage(30);

			column.EditorProperties().ComboBox(p =>
			{
				p.ClientInstanceName = "id_item";
				p.DataSource = DataProviderItem.ItemsByCompany((int?)ViewData["id_company"]);
				p.TextFormatString = "{1}";
				p.ValueField = "id";
		//p.TextField = "name";
		p.Width = Unit.Percentage(109);
				p.ValueType = typeof(int);
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				p.Columns.Add("masterCode", "Código", 70);//, Unit.Percentage(50));
		p.Columns.Add("name", "Nombre del Producto", 200);//, Unit.Percentage(70));
														  //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));
		p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", 50);//, Unit.Percentage(20));

		p.ClientSideEvents.Init = "ItemProductionLotLossDetailCombo_Init";
				p.ClientSideEvents.SelectedIndexChanged = "ItemProductionLotLossDetailCombo_SelectedIndexChanged";
				p.ClientSideEvents.Validation = "OnItemProductionLotLossDetailValidation";
			});
		});

		settings.Columns.Add(column =>
		{
			column.Name = "metricUnit";
			column.PropertiesEdit.ClientInstanceName = "metricUnit";
			column.Caption = "UM";
			column.Width = Unit.Percentage(5);
			column.UnboundType = UnboundColumnType.String;
			column.ReadOnly = true;

			column.SetDataItemTemplateContent(c =>
			{
				var id = (int)DataBinder.Eval(c.DataItem, "id_item");

				Item item = DataProviderItem.Item(id);
				string metricUnit = (item != null && item.ItemPurchaseInformation != null) ? item.ItemPurchaseInformation.MetricUnit.code : "Lbs";
				ViewContext.Writer.Write(metricUnit);
			});

			column.SetEditItemTemplateContent(c =>
			{
				int? id = (int?)DataBinder.Eval(c.DataItem, "id_item");
				Item item = DataProviderItem.Item(id);

				string metricUnit = (item != null && item.ItemPurchaseInformation != null) ? item.ItemPurchaseInformation.MetricUnit.code : "Lbs";

				Html.DevExpress().TextBox(p =>
				{
					p.Name = "metricUnit";
					p.Properties.ClientInstanceName = "metricUnit";

					p.Width = Unit.Percentage(100);

					p.ReadOnly = true;
					p.ShowModelErrors = false;
				}).Bind(metricUnit).Render();
			});
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_warehouse";
			column.Caption = "Bodega";
			column.Width = Unit.Percentage(20);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;

			column.EditorProperties().ComboBox(p =>
			{
				p.ClientInstanceName = "id_warehouse";
				p.DataSource = DataProviderWarehouse.Warehouses((int)ViewData["id_company"]);
				p.ValueField = "id";
				p.TextField = "name";
				p.Width = Unit.Percentage(113);
				p.ValueType = typeof(int);
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

				p.ClientSideEvents.SelectedIndexChanged = "ComboWarehouseProductionLotLossDetail_SelectedIndexChanged";
				p.ClientSideEvents.Validation = "OnWarehouseProductionLotLossDetailValidation";
			});
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_warehouseLocation";
			column.Caption = "Ubicación";
			column.Width = Unit.Percentage(20);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;

			column.EditorProperties().ComboBox(p =>
			{
				p.ClientInstanceName = "id_warehouseLocation";
				p.DataSource = DataProviderWarehouseLocation.WarehouseLocations((int)ViewData["id_company"]);
				p.ValueField = "id";
				p.TextField = "name";
				p.Width = Unit.Percentage(113);
				p.ValueType = typeof(int);
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

				p.ClientSideEvents.SelectedIndexChanged = "ComboWarehouseLocationProductionLotLossDetail_Init";
				p.ClientSideEvents.Validation = "OnWarehouseLocationProductionLotLossDetailValidation";
			});
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "quantity";
			column.Name = "quantity";
			column.Caption = "Cantidad";
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.Width = Unit.Percentage(10);

			column.SetDataItemTemplateContent(c =>
			{
				decimal quantity = (decimal)DataBinder.Eval(c.DataItem, "quantity");
				ViewContext.Writer.Write(quantity.ToString("N2"));
			});

			column.EditorProperties().SpinEdit(p =>
			{
				p.Width = Unit.Percentage(127);
				p.ClientInstanceName = "quantity";
				p.DisplayFormatString = "N2";
				p.DisplayFormatInEditMode = true;
				p.DecimalPlaces = 2;

				p.MinValue = 0;
				//p.MaxValue = 100;
				p.NumberType = SpinEditNumberType.Float;
						p.NumberFormat = SpinEditNumberFormat.Number;

				//p.ClientSideEvents.NumberChanged = "Quantity_NumberChange";
				p.ClientSideEvents.Validation = "OnQuantityProductionLotLossDetailValidation";
			});
		});


		//Botones de comandos para registros de la tabla
		MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
		{
			ShowEditButton = true,
			ShowDeleteButton = true,
			ShowCancelButton = true,
			ShowUpdateButton = true,
			Visible = true,
			VisibleIndex = 20,
			Caption = "Acciones"
		};
		commandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
		commandColumn.Width = Unit.Percentage(10);

		settings.Columns.Add(commandColumn);

#endregion

#region ColumnsEdit


#endregion

});

	if (ViewData["EditError"] != null)
	{
		grid.SetEditErrorText((string)ViewData["EditError"]);
	}
}
@grid.Bind(Model).GetHtml()

@functions {
	int GetFilteredRowCountWithoutPage(MVCxGridView grid)
	{
		int selectedRowsOnPage = 0;
		foreach (var key in grid.GetCurrentPageRowValues("id"))
		{
			if (grid.Selection.IsRowSelectedByKey(key))
				selectedRowsOnPage++;
		}
		return grid.Selection.FilteredCount - selectedRowsOnPage;
	}

}

<script src="~/Scripts/ProductionLotProcess/_ProductionLotProcessProductionLotLossDetailsEditForm.js"></script>