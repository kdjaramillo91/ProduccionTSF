@using DevExpress.Data
@using DevExpress.Data.Helpers
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.ProductionLotPayment>

@{
    var grid = Html.DevExpress().GridView<ProductionLotPayment>(settings =>
    {
        settings.Name = "gvProductionLotReceptionEditFormClosesDetail";
        settings.CallbackRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormClosesDetailPartial" };

        //settings.ClientSideEvents.BeginCallback = "ProductionLotReceptionItemsDetail_OnBeginCallback";

        //settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormItemsDetailAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormClosesDetailUpdate" };
        //settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormItemsDetailDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

        settings.Width = Unit.Percentage(100);

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.SettingsBehavior.ConfirmDelete = false;
        settings.CommandColumn.Width = Unit.Percentage(2);


        //settings.KeyFieldName = "id_originLot;id_item";
        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Checkbox de registros de tabla
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        //Eventos
        settings.ClientSideEvents.Init = "OnGridViewCloseDetailsInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewClosesDetailSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnGridViewCloseDetailsBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnGridViewCloseDetailsEndCallback";

        //Pie de tabla
        settings.Settings.ShowFooter = true;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

            List<ProductionLotPayment> rows = (Model as List<ProductionLotPayment>);
            rows = (rows != null) ? rows.ToList() : new List<ProductionLotPayment>();

            e.Properties["cpRowsCount"] = rows.Count;
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfoCloses""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRowsCloses"" style=""cursor: pointer;"" onclick=""gvEditCloseDetailsSelectAllRows()"">Seleccionar Todos</a>
                      <a id=""lnkClearSelectionCloses"" style=""cursor: pointer;"" onclick=""gvEditCloseDetailsClearSelection()"">Anular Selección</a>"
                );
            }
        });

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SettingsEditing.ShowModelErrorsForEditors = true;

        //settings.InitNewRow = (s, e) =>
        //{
        //    e.NewValues["quantityRecived"] = 0.00M;
        //    e.NewValues["id"] = 0;
        //};

        #region ColumnsAdd

        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "id";
        //    column.Caption = "ID";
        //    column.Visible = false;
        //    column.ColumnType = MVCxGridViewColumnType.ComboBox;
        //    column.Width = 0;
        //    column.EditorProperties().ComboBox(e =>
        //    {
        //        e.ClientInstanceName = "id";
        //        e.ValueType = typeof(int);
        //        //e.ClientSideEvents.Init = "ComboID_Init";//
        //        e.Width = 0;    
        //    });
        //});

        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "id_originLot";
        //    column.Caption = "Lote Origen";
        //    column.Width = Unit.Percentage(10);
        //    column.ColumnType = MVCxGridViewColumnType.ComboBox;

        //    column.SetDataItemTemplateContent(c =>
        //    {
        //        int? id_originLot = (int?)DataBinder.Eval(c.DataItem, "id_originLot");
        //        ProductionLot productionLot = DataProviderProductionLot.ProductionLotById(id_originLot);

        //        string text = (productionLot != null) ? productionLot.number : "";

        //        ViewContext.Writer.Write(text);
        //    });

        //    column.EditorProperties().ComboBox(p =>
        //    {
        //        p.ClientInstanceName = "id_originLot";
        //        p.DataSource = null;//DataProviderProductionLot.ProductionLots();
        //        //p.ValueField = "id";
        //        //p.TextField = "number";
        //        p.Width = Unit.Percentage(100);
        //        p.ValueType = typeof(int);
        //        p.DropDownStyle = DropDownStyle.DropDownList;
        //        p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
        //        p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

        //        p.ClientSideEvents.SelectedIndexChanged = "ComboProductionLot_SelectedIndexChanged";
        //        p.ClientSideEvents.Init = "ComboProductionLot_Init";

        //        p.ClientSideEvents.Validation = "OnOriginLotDetailValidation";
        //    });
        //});

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_item";
            column.Caption = "Producto";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.PropertiesEdit.ClientInstanceName = "id_item";
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string text = (item != null) ? item.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_item";
                p.DataSource = DataProviderItem.AllItems();
                p.ValueField = "id";
                p.TextField = "name";
                p.Width = Unit.Percentage(100);
                p.ValueType = typeof(int);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                //p.ClientSideEvents.DropDown = "ComboItem_DropDown";
                p.ClientSideEvents.Init = "ComboItem_Init";
                //p.ClientSideEvents.SelectedIndexChanged = "ComboItem_SelectedIndexChanged";

                //p.ClientSideEvents.Validation = "OnItemDetailValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            column.Name = "metricUnit";
            column.PropertiesEdit.ClientInstanceName = "metricUnit";
            column.Caption = "UM";
            column.Width = Unit.Percentage(5);
            column.UnboundType = UnboundColumnType.String;
            column.ReadOnly = true;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string text = string.Empty;

                if (item != null)
                {
                    text = (item.ItemPurchaseInformation != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                }

                ViewContext.Writer.Write(text);
            });
            //column.EditorProperties().TextBox(e =>
            //{
            //    e.ClientInstanceName = "metricUnit";
            //    e.Width = Unit.Percentage(100);
            //    e.ClientSideEvents.Init = "UM_Init";
            //});
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "quantity";
            //column.Name = "quantity";
            //column.PropertiesEdit.ClientInstanceName = "quantity";
            column.Caption = "Cantidad";
            //column.UnboundType = UnboundColumnType.Decimal;
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            //column.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            column.Width = Unit.Percentage(10);
            column.ReadOnly = true;


            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "quantity";
                p.DisplayFormatString = "N2";
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                //p.SpinButtons.ShowIncrementButtons = true;
                //p.SpinButtons.ShowLargeIncrementButtons = true;
                //p.Increment = 0.5M;
                //p.LargeIncrement = 1.0M;
                p.MinValue = 0;
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;

                //p.ClientSideEvents.Validation = "OnQuantityRecivedValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "adjustMore";
            column.Caption = "Ajustar(+)";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(10);

            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "adjustMore";
                p.DisplayFormatString = "N2";
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                //p.SpinButtons.ShowIncrementButtons = true;
                //p.SpinButtons.ShowLargeIncrementButtons = true;
                //p.Increment = 0.5M;
                //p.LargeIncrement = 1.0M;
                p.MinValue = 0;
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;

                p.ClientSideEvents.ValueChanged = "OnAdjustMoreValueChanged";
                p.ClientSideEvents.Validation = "OnAdjustMoreValidation";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "adjustLess";
            column.Caption = "Ajustar(-)";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(10);

            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "adjustLess";
                p.DisplayFormatString = "N2";
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                //p.SpinButtons.ShowIncrementButtons = true;
                //p.SpinButtons.ShowLargeIncrementButtons = true;
                //p.Increment = 0.5M;
                //p.LargeIncrement = 1.0M;
                p.MinValue = 0;
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;

                p.ClientSideEvents.ValueChanged = "OnAdjustLessValueChanged";
                p.ClientSideEvents.Validation = "OnAdjustLessValidation";
            });
        });

        settings.Columns.Add(column =>
        {

            //column.Name = "totalMU";
            //column.PropertiesEdit.ClientInstanceName = "totalMU";
            column.FieldName = "totalMU";
            column.Caption = "Cantidad Ajustada";
            //column.UnboundType = UnboundColumnType.Decimal;
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            //column.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            column.Width = Unit.Percentage(10);
            column.ReadOnly = true;


            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "totalMU";
                p.DisplayFormatString = "N2";
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                //p.SpinButtons.ShowIncrementButtons = true;
                //p.SpinButtons.ShowLargeIncrementButtons = true;
                //p.Increment = 0.5M;
                //p.LargeIncrement = 1.0M;
                p.MinValue = 0;
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;

                //p.ClientSideEvents.Validation = "OnQuantityRecivedValidation";
            });
        });

        //Botones de comandos para registros de la tabla
        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = true,
            ShowDeleteButton = false,
            ShowCancelButton = true,
            ShowUpdateButton = true,
            Visible = true,
            VisibleIndex = 20,
            Caption = "Acciones"
        };
        commandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        commandColumn.Width = Unit.Percentage(8);

        settings.Columns.Add(commandColumn);

        #endregion

        #region ColumnsEdit


        #endregion

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        //foreach (var key in grid.GetCurrentPageRowValues("id_originLot;id_item"))
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}

<script src="~/Scripts/productionlotreception/_productionLotReceptionCloseDetailsEditForm.js"></script>