@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@{
    var grid = Html.DevExpress().GridView<PurchaseRequestDetail>(settings =>
    {
        settings.Name = "gvPurchaseRequestDetails";
        settings.CallbackRouteValues = new { Controller = "PurchaseOrder", Action = "PurchaseRequestDetailsPartial" };

        settings.Width = Unit.Percentage(100);
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(3);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.KeyFieldName = "id";//"id_purchaseRequest;id_item";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = false;
        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRowMenu = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.ClientSideEvents.Init = "PurchaseRequestDetailsOnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "PurchaseRequestDetailsOnGridViewSelectionChanged";
        settings.ClientSideEvents.EndCallback = "PurchaseRequestDetailsOnGridViewEndCallback";

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""PurchaseRequestDetailsSelectAllRow();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""PurchaseRequestDetailsClearSelection();"">Anular Selección</a>"
                );
            }
        });

        //"No. de Requerimiento" 
        settings.Columns.Add(m => m.PurchaseRequest.Document.number, column =>
        {
            column.Caption = "No. de Requerimiento";
            column.Width = Unit.Percentage(8);

        });

        //"Item"
        settings.Columns.Add(m => m.Item.name, column =>
        {
            column.Caption = "Item";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        });

        settings.Columns.Add(m => m.colorReference, column =>
        {
            column.Caption = "Colores Referencia";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        });

        settings.Columns.Add(m => m.Grammage.description, column =>
        {
            column.Caption = "Gramaje Desde";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        });
        settings.Columns.Add(m => m.Grammage1.description, column =>
        {
            column.Caption = "Gramaje Hasta";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        });


        settings.Columns.Add(m => m.PurchaseRequest.Employee.Person.fullname_businessName, column =>
        {
            column.Caption = "Solicitante";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        });


        //"Proveedor Propuesto"
        //settings.Columns.Add(m => m.Provider.Person.fullname_businessName, column =>
        //{
        //    column.Caption = "Proveedor Propuesto";
        //    column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        //});



        //"Cant. Aprobada Pendiente"
        settings.Columns.Add(m => m.quantityOutstandingPurchase, column =>
        {
            column.Caption = "Cant. Aprobada Pendiente";
            column.PropertiesEdit.DisplayFormatString = "N2";
            column.Width = Unit.Percentage(5);

        });

        //"UM"
        settings.Columns.Add(column =>
        {
            column.Caption = "UM";
            column.Width = Unit.Percentage(3);
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;


            column.SetDataItemTemplateContent(c =>
            {
                var id = (int)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id);
                string metricUnit = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                ViewContext.Writer.Write(metricUnit);
            });

        });
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        string [] values = new string[] { "id" };//{ "id_purchaseRequest", "id_item" };
        foreach (var key in grid.GetCurrentPageRowValues(values))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}

