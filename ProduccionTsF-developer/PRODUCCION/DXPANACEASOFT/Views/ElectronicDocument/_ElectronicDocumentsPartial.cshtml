@using System.Drawing
@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
    var grid = Html.DevExpress().GridView<Document>(settings => {
        settings.Name = "gvElectronicDocuments";
        settings.CallbackRouteValues = new { Controller = "ElectronicDocument", Action = "ElectronicDocumentsPartial" };

        settings.Width = Unit.Percentage(100);

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.CommandColumn.Width = Unit.Percentage(3);

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRowMenu = true;

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Documentos Electrónicos</span>");
        });

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

            if (ViewData["EditMessage"] != null)
            {
                e.Properties["cpEditMessage"] = ViewData["EditMessage"];
            }
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows()"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""ClearSelection()"">Anular Selección</a>"
                );
            }
        });

        //MASTER DETAILS
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
        settings.SettingsDetail.ShowDetailRow = false;

        //DETALLES EN GRID LLAMADA A OTRA TABLA
        settings.SetDetailRowTemplateContent(column =>
        {

        });

        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        settings.KeyFieldName = "id";

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_documentType";
            column.Caption = "Tipo de Documento";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(8);

            column.SetDataItemTemplateContent(c =>
            {
                int? id_documentType = (int?)DataBinder.Eval(c.DataItem, "id_documentType");
                DocumentType documentType = DataProviderDocumentType.DocumentTypeById(id_documentType);

                string text = (documentType != null) ? documentType.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_documentType";
                comboBox.DataSource = DataProviderDocumentType.ElectronicDocumentTypes((int)ViewData["id_company"]);

                comboBox.ValueField = "id";
                comboBox.TextField = "name";
                comboBox.ValueType = typeof(int);
            });
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "number";
            column.Caption = "No. Comprobante";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "emissionDate";
            column.Caption = "Fecha de Emisión";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Width = Unit.Percentage(3);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "authorizationDate";
            column.Caption = "Fecha de Autorización";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Width = Unit.Percentage(3);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "accessKey";
            column.Caption = "Clave de Acceso";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "authorizationNumber";
            column.Caption = "No. Autorización";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(m => m.ElectronicDocument.id_electronicDocumentState, column =>
        {
            column.Caption = "Estado";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(3);

            column.SetDataItemTemplateContent(c =>
            {
                int? id_state = (int)DataBinder.Eval(c.DataItem, "ElectronicDocument.id_electronicDocumentState");
                ElectronicDocumentState documentState = DataProviderElectronicDocumentState.ElectronicDocumentState(id_state);

                string text = (documentState != null) ? documentState.name : "";

                ViewContext.Writer.Write(text);
            });

            column.EditorProperties().ComboBox(comboBox =>
            {
                comboBox.ClientInstanceName = "id_electronicDocumentState";
                comboBox.DataSource = DataProviderDocumentState.DocumentStates((int)ViewData["id_company"]);

                comboBox.ValueField = "id";
                comboBox.TextField = "name";
                comboBox.ValueType = typeof(int);
            });
        });

        settings.Columns.Add(column =>
        {
            column.Name = "actions";
            column.Caption = "Acciones";
            column.Width = Unit.Percentage(8);

            column.SetDataItemTemplateContent(c =>
            {
                int id = (int)DataBinder.Eval(c.DataItem, "id");
                Html.RenderPartial("_ElectronicDocumentGridViewRowActionsButtons", id);
            });
        });

    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {

    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}