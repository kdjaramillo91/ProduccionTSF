@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{ 
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "gvEconomicGroups";
        settings.CallbackRouteValues = new { Controller = "EconomicGroup", Action = "EconomicGroupPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "EconomicGroup", Action = "EconomicGroupPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "EconomicGroup", Action = "EconomicGroupPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "EconomicGroup", Action = "EconomicGroupPartialDelete" };

        settings.CustomActionRouteValues = new { Controller = "EconomicGroup", Action = "DeleteSelectedEconomicGroup" };

        settings.KeyFieldName = "id";

        settings.Width = Unit.Percentage(100);

        #region GRIDVIEW BEHAIVOR

        settings.SettingsBehavior.AllowSelectByRowClick = false;


        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
            e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

            if (ViewData["EditMessage"] != null)
            {
                e.Properties["cpEditMessage"] = ViewData["EditMessage"];
            }
        };

        #endregion

        #region EDITFORM

        settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
        settings.SettingsText.PopupEditFormCaption = "Editar Grupo Económico";



        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.Width = 800;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

        settings.SettingsBehavior.ConfirmDelete = true;

        #endregion

        #region PAGER

        settings.SettingsPager.Visible = true;

        #endregion

        #region CLIENT SIDE EVENTS (JAVASCRIPT)

        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

        #endregion

        #region SEARCH PANEL

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        #endregion

        #region TITLE PANEL

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Grupos Económicos</span>");
        });

        #endregion

        #region GROUP PANEL

        settings.Settings.ShowGroupPanel = true;

        #endregion

        #region FILTER ROW

        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = true;
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

        #endregion

        #region FOOTER ROW

        settings.Settings.ShowFooter = true;

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""UnselectAllRows();"">Anular Selección</a>"
                );
            }
        });

        #endregion

        #region COMMAND COLUMN

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(2);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        #endregion

        #region MASTER DETAILS VIEW

        settings.SettingsDetail.ShowDetailRow = true;
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;

        settings.SetDetailRowTemplateContent(column =>
        {
            int? id_economicGroup = (int?)DataBinder.Eval(column.DataItem, "id");
            EconomicGroup EconomicGroupTmp = DataProviderEconomicGroup.EconomicGroupById(id_economicGroup);
            Html.RenderPartial("_EconomicGroupDetailPartial", EconomicGroupTmp);
        });

        #endregion

        #region AUTOGENERATED

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        #endregion

        #region ColumnsAdd

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        settings.Columns.Add(column =>
        {
            column.FieldName = "code";
            column.Name = "code";
            column.Caption = "Código";
            column.Width = Unit.Percentage(4);
            column.ColumnType = MVCxGridViewColumnType.TextBox;

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "name";
            column.Name = "name";
            column.Caption = "Nombre";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Name = "isActive";
            column.Caption = "¿Activo?";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.PropertiesEdit.ClientInstanceName = "isActive";
            column.AutoFilterBy("Sí");
            column.Settings.AllowAutoFilter = DefaultBoolean.True;

        });

        #endregion

        #region BOTONES DE COMANDO PARA REGISTRO

        if (ShowEditButton() || ShowDeleteButton())
        {
            MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
            {
                ShowEditButton = ShowEditButton(),
                ShowDeleteButton = false,
                Visible = true,
                VisibleIndex = 10,
                Width = Unit.Percentage(5),
                Caption = "Acciones"
            };

            if (ShowDeleteButton())
            {
                commandColumn.CustomButtons.Add(
                      new GridViewCommandColumnCustomButton
                      {
                          ID = "btnDeleteRow",
                          Text = "Eliminar"
                      }
                );
            }

            settings.ClientSideEvents.CustomButtonClick = "GridViewItemsCustomCommandButton_Click";

            settings.Columns.Add(commandColumn);
        }

        #endregion

        #region EDITOR FORM LAYOUT

        settings.SetEditFormTemplateContent(c =>
        {
            int? id_economicgroup = (int?)DataBinder.Eval(c.DataItem, "id");
            EconomicGroup economicGroup = DataProviderEconomicGroup.EconomicGroupById(id_economicgroup);

            if (economicGroup == null && ViewData["rowToCopy"] != null)
            {
                economicGroup = (ViewData["rowToCopy"] as EconomicGroup) ?? new EconomicGroup
                {
                    isActive = true
                };
                economicGroup.id = 0; economicGroup.code = string.Empty;
                economicGroup.name += "-Copia";
            }

            economicGroup = economicGroup ?? new EconomicGroup
            {
                isActive = true,

            };

            Html.RenderPartial("_EconomicGroupEditFormPartial", economicGroup);
        });

        #endregion

        #region PRERENDER
        settings.PreRender = (s, e) =>
        {
            MVCxGridView g = (s as MVCxGridView);
            if (g != null)
            {
                g.FilterExpression = "isActive = true";
            }
        };
        #endregion

    });
}

@grid.Bind(Model).GetHtml()

@functions
{
    bool ShowEditButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(10));
    }

    bool ShowDeleteButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(8));
    }

    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}