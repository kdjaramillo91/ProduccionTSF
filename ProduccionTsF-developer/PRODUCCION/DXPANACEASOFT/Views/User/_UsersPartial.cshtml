@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "gvUsers";
        settings.CallbackRouteValues = new { Controller = "User", Action = "UsersPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "User", Action = "UsersPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "User", Action = "UsersPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "User", Action = "UsersPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.KeyFieldName = "id";

        settings.Width = Unit.Percentage(100);

        #region GRIDVIEW BEHAIVOR

        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["isActive"] = true;
        };

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        #endregion

        #region PAGER

        settings.SettingsPager.Visible = true;

        #endregion

        #region CLIENT SIDE EVENTS (JAVASCRIPT)

        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

        #endregion

        #region SEARCH PANEL

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        #endregion

        #region TITLE PANEL

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Usuarios</span>");
        });

        #endregion

        #region GROUP PANEL

        settings.Settings.ShowGroupPanel = true;

        #endregion 
        
        #region FILTER ROW

        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = true;
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

        #endregion 

        #region FOOTER ROW

        settings.Settings.ShowFooter = true;

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""UnselectAllRows();"">Anular Selección</a>"
                );
            }
        });

        #endregion

        #region COMMAND COLUMN

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(2);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        #endregion

        #region AUTOGENERATED

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        #endregion

        #region COLUMNS

        settings.Columns.Add(column =>
        {
            column.FieldName = "username";
            column.Name = "username";
            column.Caption = "Usuario";

            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_group";
            column.Name = "id_group";
            column.Caption = "Grupo de Usuarios";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_group = (int?)DataBinder.Eval(c.DataItem, "id_group");
                UserGroup group = DataProviderUserGroup.UserGroupById(id_group);

                string text = "";

                if(group != null)
                {
                    text = group.name;
                }

                ViewContext.Writer.Write(text);

            });

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_employee";
            column.Name = "id_employee";
            column.Caption = "Empleado";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_employee = (int?)DataBinder.Eval(c.DataItem, "id_employee");
                Employee employee = DataProviderPerson.Employee(id_employee);

                string text = "";

                if (employee != null)
                {
                    text = employee.Person.fullname_businessName;
                }

                ViewContext.Writer.Write(text);

            });

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Name = "isActive";
            column.Caption = "¿Activo?";

            column.ColumnType = MVCxGridViewColumnType.CheckBox;

            column.Width = Unit.Percentage(5);

        });

        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = false,
            ShowDeleteButton = false,
            Visible = true,
            VisibleIndex = 10,
            Width = Unit.Percentage(5),
            Caption = "Acciones"
        };

        commandColumn.CustomButtons.Add(
              new GridViewCommandColumnCustomButton
              {
                  ID = "btnEditRow",
                  Text = "Editar"
              }
        );

        commandColumn.CustomButtons.Add(
              new GridViewCommandColumnCustomButton
              {
                  ID = "btnDeleteRow",
                  Text = "Eliminar"
              }
        );

        settings.ClientSideEvents.CustomButtonClick = "GridViewUsersCustomCommandButton_Click";

        settings.Columns.Add(commandColumn);

        #endregion
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}