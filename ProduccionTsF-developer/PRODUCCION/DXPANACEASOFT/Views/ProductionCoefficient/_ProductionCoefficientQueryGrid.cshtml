@using DXPANACEASOFT.Models

@model IEnumerable<ProductionCostCoefficient>

@Html.DevExpress().GridView(
	grid =>
	{
		grid.Name = "gvProductionCoefficient";

		grid.CallbackRouteValues = new { Controller = "ProductionCoefficient", Action = "ProductionCoefficientPartial" };

		grid.KeyFieldName = "id";

		grid.Width = Unit.Percentage(100);

		#region GridView Behavior

		grid.SettingsBehavior.AllowSelectByRowClick = true;

		grid.CustomJSProperties = (s, e) =>
		{
			var gv = s as MVCxGridView;
			if (gv == null) { return; }

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
			e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

			if (ViewData["EditMessage"] != null)
			{
				e.Properties["cpEditMessage"] = ViewData["EditMessage"];
			}
		};

		grid.SettingsExport.EnableClientSideExportAPI = true;
		grid.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
		grid.SettingsExport.FileName = "CoeficientesProduccion_" + DateTime.Now.ToString("yyyyMMdd_HHmmss");

		grid.Toolbars.Add(t =>
		{
			t.EnableAdaptivity = true;
			t.Items.Add(GridViewToolbarCommand.ExportToXls);
			t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
			t.Items.Add(GridViewToolbarCommand.ExportToCsv);
		});

		#endregion

		#region Pager

		grid.SettingsPager.Visible = true;

		#endregion

		#region Client Side Events

		grid.ClientSideEvents.Init = "OnGridViewInit";
		grid.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
		grid.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
		grid.ClientSideEvents.EndCallback = "OnGridViewEndCallback";
		grid.ClientSideEvents.CustomButtonClick = "OnGridViewCustomButtonClick";

		#endregion

		#region Search Panel

		grid.SettingsSearchPanel.Visible = true;
		grid.Styles.SearchPanel.CssClass = "searchPanel";

		#endregion

		#region Title Panel

		grid.Settings.ShowTitlePanel = true;
		grid.Styles.TitlePanel.CssClass = "titleContainer";

		grid.SetTitlePanelTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Coeficientes de Producción</span>");
		});

		#endregion

		#region Group Panel

		grid.Settings.ShowGroupPanel = true;

		#endregion

		#region Filter Row

		grid.Settings.ShowFilterRow = true;
		grid.Settings.ShowFilterRowMenu = true;
		grid.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

		#endregion

		#region Footer Row

		grid.Settings.ShowFooter = true;

		grid.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
		});

		#endregion

		#region Adaptivity Settings
		grid.Settings.ShowFilterRowMenu = true;
		grid.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		grid.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

		grid.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		grid.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
		grid.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		#endregion

		#region Columns

		grid.Columns.Add(column =>
		{
			column.FieldName = "id";
			column.Caption = "ID";
			column.Visible = false;
			column.PropertiesEdit.DisplayFormatString = "G";
		});

		grid.Columns.Add(column =>
		{
			column.FieldName = "sequence";
			column.Caption = "Número";
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.PropertiesEdit.DisplayFormatString = "G";
			column.Width = Unit.Percentage(8);
		});

		grid.Columns.Add(column =>
		{
			column.FieldName = "ProductionCostExecutionType.name";
			column.Name = "id_executionType";
			column.Caption = "Tipo de Ejecución";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(15);
		});

		grid.Columns.Add(column =>
		{
			column.FieldName = "ProductionCostPoundType.name";
			column.Name = "id_poundType";
			column.Caption = "Tipo de Libras";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(15);
		});

		grid.Columns.Add(column =>
		{
			column.FieldName = "SimpleFormula.name";
			column.Name = "id_simpleFormula";
			column.Caption = "Motivo de Costo";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(15);
		});

		grid.Columns.Add(column =>
		{
			column.FieldName = "ProductionCost.name";
			column.Name = "id_productionCost";
			column.Caption = "Costos";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(15);
		});

		grid.Columns.Add(column =>
		{
			column.FieldName = "ProductionCostDetail.name";
			column.Name = "id_productionCostDetail";
			column.Caption = "SubCostos";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(15);
		});

		grid.Columns.Add(column =>
		{
			column.FieldName = "isActive";
			column.Name = "isActive";
			column.Caption = "¿Activo?";
			column.Width = Unit.Percentage(3);
			column.ColumnType = MVCxGridViewColumnType.CheckBox;

			column.AutoFilterBy("Sí");
			column.Settings.AllowAutoFilter = DefaultBoolean.True;

		});

		var commandColumn = new MVCxGridViewCommandColumn()
		{
			ShowEditButton = false,
			ShowDeleteButton = false,
			Visible = true,
			VisibleIndex = 10,
			Width = Unit.Percentage(5),
			Caption = "Acciones",
		};

		commandColumn.CustomButtons.Add(
			new GridViewCommandColumnCustomButton()
			{
				ID = "btnEditRow",
				Text = "Editar",
			});

		grid.Columns.Add(commandColumn);

		#endregion

	}).Bind(this.Model).GetHtml()

@functions {
	int GetFilteredRowCountWithoutPage(MVCxGridView grid)
	{
		var selectedRowsOnPage = 0;
		foreach (var key in grid.GetCurrentPageRowValues("id"))
		{
			if (grid.Selection.IsRowSelectedByKey(key))
			{
				selectedRowsOnPage++;
			}
		}
		return grid.Selection.FilteredCount - selectedRowsOnPage;
	}
}