@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model IEnumerable<DXPANACEASOFT.Models.SimpleFormula>


@{
	var grid = Html.DevExpress().GridView(settings =>
	{
		settings.Name = "gvSimpleFormula";
		settings.CallbackRouteValues = new { Controller = "SimpleFormula", Action = "SimpleFormulaPartial" };

		settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "SimpleFormula", Action = "SimpleFormulaPartialAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "SimpleFormula", Action = "SimpleFormulaPartialUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "SimpleFormula", Action = "SimpleFormulaPartialDelete" };

		settings.CustomActionRouteValues = new { Controller = "SimpleFormula", Action = "DeleteSelectedSimpleFormula" };

		settings.KeyFieldName = "id";

		settings.Width = Unit.Percentage(100);

		settings.SettingsExport.EnableClientSideExportAPI = true;
		settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;

		#region GRIDVIEW BEHAIVOR

		settings.SettingsBehavior.AllowSelectByRowClick = true;

		settings.Toolbars.Add(t =>
		{
			t.EnableAdaptivity = true;
			t.Items.Add(GridViewToolbarCommand.ExportToXls).Text = "Exportar a Excel (2003)";
		});
		settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

			e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

			if (ViewData["EditMessage"] != null)
			{
				e.Properties["cpEditMessage"] = ViewData["EditMessage"];
			}
		};

		#endregion

		#region EDITFORM

		settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
		settings.SettingsText.PopupEditFormCaption = "Editar Fórmula";

		settings.SettingsPopup.EditForm.Modal = true;
		settings.SettingsPopup.EditForm.Width = 800;
		settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
		settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

		settings.SettingsBehavior.ConfirmDelete = true;

		#endregion

		#region PAGER

		settings.SettingsPager.Visible = true;

		#endregion

		#region CLIENT SIDE EVENTS (JAVASCRIPT)

		settings.ClientSideEvents.Init = "OnGridViewInit";
		settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
		settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

		#endregion

		#region SEARCH PANEL

		settings.SettingsSearchPanel.Visible = true;
		settings.Styles.SearchPanel.CssClass = "searchPanel";

		#endregion

		#region TITLE PANEL

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";

		settings.SetTitlePanelTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Fórmulas</span>");
		});

		#endregion

		#region GROUP PANEL

		settings.Settings.ShowGroupPanel = true;

		#endregion

		#region FILTER ROW

		settings.Settings.ShowFilterRow = true;
		settings.Settings.ShowFilterRowMenu = true;
		settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

		#endregion

		#region FOOTER ROW

		settings.Settings.ShowFooter = true;

		settings.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
			if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			{
				ViewContext.Writer.Write(
					@"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>
<a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""UnselectAllRows();"">Anular Selección</a>"
				);
			}
		});

		#endregion

		#region COMMAND COLUMN

		settings.CommandColumn.Visible = true;
		settings.CommandColumn.Width = Unit.Percentage(2);
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

		#endregion

		#region MASTER DETAILS VIEW

		settings.SettingsDetail.ShowDetailRow = true;
		settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;

		settings.SetDetailRowTemplateContent(column =>
		{
			int? id_simpleFormula = (int?)DataBinder.Eval(column.DataItem, "id");
			SimpleFormula simpleFormula = DataProviderSimpleFormula.SimpleFormulaById(id_simpleFormula);
			Html.RenderPartial("_SimpleFormulaDetailPartial", simpleFormula);
		});

		#endregion

		#region AUTOGENERATED

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		#endregion

		#region ColumnsAdd


		settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
		settings.Styles.Header.Font.Bold = true;

		settings.Columns.Add(column =>
		{
			column.FieldName = "code";
			column.Name = "code";
			column.Caption = "Código";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(8);

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "name";
			column.Name = "name";
			column.Caption = "Nombre";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "description";
			column.Name = "description";
			column.Caption = "Descripción";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "type";
			column.Name = "type";
			column.Caption = "Tipo";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

			column.SetDataItemTemplateContent(c =>
			{
				string id_type = DataBinder.Eval(c.DataItem, "type") != null ? (string)DataBinder.Eval(c.DataItem, "type") : "";
				SimpleComboBox type = DataProviderSimpleFormula.TypeById(id_type);

				string name = (type != null) ? type.name : "";
				ViewContext.Writer.Write(name);
			});
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "datasourcedescription";
			column.Name = "datasourcedescription";
			column.Caption = "Orígenes de Datos";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

			//column.SetDataItemTemplateContent(c =>
			//{
			//	string id_dataSources = DataBinder.Eval(c.DataItem, "dataSources") != null ? (string)DataBinder.Eval(c.DataItem, "dataSources") : "";
			//	SimpleComboBox dataSources = DataProviderSimpleFormula.DatasourceById(id_dataSources);

			//	string nameDataS = (dataSources != null) ? dataSources.name : "";
			//	ViewContext.Writer.Write(nameDataS);
			//});

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "formula";
			column.Name = "formula";
			column.Caption = "Fórmula";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "isActive";
			column.Name = "isActive";
			column.Caption = "¿Activo?";
			column.Width = Unit.Percentage(3);
			column.ColumnType = MVCxGridViewColumnType.CheckBox;
			column.AutoFilterBy("Sí");
			column.Settings.AllowAutoFilter = DefaultBoolean.True;

		});

		if (ShowEditButton() || ShowDeleteButton())
		{
			MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
			{
				ShowEditButton = ShowEditButton(),
				ShowDeleteButton = false,
				Visible = true,
				VisibleIndex = 10,
				Width = Unit.Percentage(5),
				Caption = "Acciones"
			};

			if (ShowDeleteButton())
			{
				commandColumn.CustomButtons.Add(
						new GridViewCommandColumnCustomButton
						{
							ID = "btnDeleteRow",
							Text = "Eliminar"
						}
				);
			}

			settings.ClientSideEvents.CustomButtonClick = "GridViewItemsCustomCommandButton_Click";

			settings.Columns.Add(commandColumn);
		}

		#endregion

		#region EDITOR FORM LAYOUT

		settings.SetEditFormTemplateContent(c =>
		{
			int? id_simpleformula = 0;
			if (!c.Grid.IsNewRowEditing)
			{
				if (c.KeyValue != null)
					id_simpleformula = (int)c.KeyValue;
			}
			//int? id_simpleformula = (int?)DataBinder.Eval(c.DataItem, "id");
			SimpleFormula simpleFormula = DataProviderSimpleFormula.SimpleFormulaById(id_simpleformula);

			if (simpleFormula == null && ViewData["rowToCopy"] != null)
			{
				simpleFormula = (ViewData["rowToCopy"] as SimpleFormula) ?? new SimpleFormula
				{
					isActive = true
				};
				simpleFormula.id = 0;
				simpleFormula.code = "";
				simpleFormula.name += "-Copia";
			}

			simpleFormula = simpleFormula ?? new SimpleFormula
			{
				isActive = true,

			};
			Html.RenderPartial("_SimpleFormulaEditFormPartial", simpleFormula);
			//Html.Partial("_SimpleFormulaEditFormPartial", simpleFormula);
		});

		#endregion

		settings.SettingsExport.RenderBrick = (sender, e) =>
		{
			if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
				e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
		};
		DXPANACEASOFT.Helper.GridViewFeaturesHelper.SetupGlobalGridViewBehavior(settings);
		settings.PreRender = (s, e) =>
		{
			MVCxGridView g = (s as MVCxGridView);
			if (g != null)
			{
				g.FilterExpression = "isActive = true";
			}
		};
	});

}
@grid.Bind(Model).GetHtml()



@functions {

	bool ShowEditButton()
	{
		var permissions = (ViewData["permissions"] as List<int>);
		return (permissions != null && permissions.Contains(10));
	}

	bool ShowDeleteButton()
	{
		var permissions = (ViewData["permissions"] as List<int>);
		return (permissions != null && permissions.Contains(8));
	}
	int GetFilteredRowCountWithoutPage(MVCxGridView grid)
	{
		int selectedRowsOnPage = 0;
		foreach (var key in grid.GetCurrentPageRowValues("id"))
		{
			if (grid.Selection.IsRowSelectedByKey(key))
				selectedRowsOnPage++;
		}
		return grid.Selection.FilteredCount - selectedRowsOnPage;
	}
}