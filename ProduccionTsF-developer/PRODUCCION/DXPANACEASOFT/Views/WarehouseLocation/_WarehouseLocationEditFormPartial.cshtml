@using DXPANACEASOFT.DataProviders
@model DXPANACEASOFT.Models.WarehouseLocation

<table class="table table-condensed">
    @{
        int? id_person = (Model != null && Model.id_person != 0) ? (int?)Model.id_person : null;
    }
    <tr>
        <td style="width: 8%;">
            @Html.DevExpress().LabelFor(m => m.code, settings =>
           {
               settings.Text = "Código:*";
               settings.AssociatedControlName = "code";

           }).GetHtml()
        </td>
        <td colspan="2">
            @Html.DevExpress().TextBoxFor(m => m.code, settings =>
           {
               settings.Name = "code";
               settings.Properties.ClientInstanceName = "code";
               settings.Width = Unit.Percentage(100);
               settings.Properties.NullText = "Código";
               settings.ShowModelErrors = true;
               settings.ClientVisible = true;
               settings.ReadOnly = (id_person != null && id_person != 0);
               settings.Properties.ClientSideEvents.Validation = "OnCodeWarehouseLocationValidation";

           }).GetHtml()
        </td>
        <td style="width: 8%;">
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Nombre:*";
                settings.AssociatedControlName = "warehouseLocationName";
            }).GetHtml()
        </td>
        <td colspan="2">
            @Html.DevExpress().TextBoxFor(m => m.name, settings =>
            {
                settings.Properties.ClientInstanceName = "warehouseLocationName";

                settings.Width = Unit.Percentage(100);

                settings.Properties.NullText = "Nombre de la Ubicación";
                settings.ReadOnly = (id_person != null && id_person != 0);
                settings.ShowModelErrors = true;
                settings.Properties.ClientSideEvents.Validation = "OnWarehouseLocationsNameValidation";
            }).GetHtml()
        </td>
    </tr>
	<tr>
		<td style="width: 8%;">
			@Html.DevExpress().LabelFor(m => m.id_warehouse, settings =>
			{
				settings.Text = "Bodega:*";
				settings.AssociatedControlName = "id_warehouse";
			}).GetHtml()
		</td>
		<td colspan="2">
			@{
				int? id_warehouse = (Model != null && Model.id_warehouse != 0) ? (int?)Model.id_warehouse : null;
			}
			@Html.DevExpress().ComboBoxFor(m => m.id_warehouse, settings =>
			{
				settings.Properties.ClientInstanceName = "id_warehouse";

				settings.Properties.ValueField = "id";
				settings.Properties.TextField = "name";
				settings.Properties.ValueType = typeof(int);

				settings.Width = Unit.Percentage(100);

				settings.Properties.NullText = "Seleccione la Bodega";
				settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
				settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				settings.ReadOnly = (id_person != null && id_person != 0);

				settings.ShowModelErrors = true;
				settings.Properties.ClientSideEvents.Validation = "OnWarehouseLocationsWarehouseValidation";
				settings.Properties.ClientSideEvents.SelectedIndexChanged = "OnWarehouseLocationsWarehouse_SelectedIndexChanged";
			}).BindList(DataProviderWarehouse.WarehousesByCompanyAndCurrent((int)ViewData["id_company"], id_warehouse)).Bind(id_warehouse).GetHtml()
		</td>
		<td id="tdId_personLabel" style="width: 8%;">
			@Html.DevExpress().LabelFor(m => m.id_person, settings =>
		{
			settings.Text = "Persona:*";
			settings.AssociatedControlName = "id_person";
			settings.Name = "id_personLabel";
		}).GetHtml()
		</td>
		@{
			//int? id_person = (Model != null && Model.id_person != 0) ? (int?)Model.id_person : null;
			int? id_warehouseType = (Model != null && Model.Warehouse != null) ? (int?)Model.Warehouse.id_warehouseType : null;
			var codeWarehouseType = (Model != null && Model.Warehouse != null && Model.Warehouse.WarehouseType != null) ? (string)Model.Warehouse.WarehouseType.code : "";
			var idsRoles = ((Model.Warehouse != null) && (!String.IsNullOrEmpty(Model.Warehouse.ids_Roles)))
				? Model.Warehouse.ids_Roles.Split('|').Select(e => Convert.ToInt32(e)).ToArray()
				: new int[] { };

		}
		@Html.Hidden("codeWarehouseType", (string)codeWarehouseType)
		<td id="tdId_person" colspan="2">

			@Html.DevExpress().ComboBoxFor(m => m.id_person, settings =>
	   {
		   settings.Properties.ClientInstanceName = "id_person";
		   settings.Width = Unit.Percentage(100);

		   settings.Properties.ValueField = "id";
		   settings.Properties.TextField = "fullname_businessName";
		   settings.Properties.ValueType = typeof(int);

		   settings.Properties.NullText = "Seleccione la Persona";
		   settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
		   settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
		   settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
		   settings.CallbackRouteValues = new { Controller = "WarehouseLocation", Action = "GetPersonWarehouseLocation" };
		   settings.Properties.ClientSideEvents.BeginCallback = "OnWarehouseLocationsPerson_BeginCallback";
		   settings.Properties.ClientSideEvents.SelectedIndexChanged = "OnWarehouseLocationsPerson_SelectedIndexChanged";

		   settings.ReadOnly = (id_person != null && id_person != 0);
		   settings.ShowModelErrors = true;
		   settings.Properties.ClientSideEvents.Validation = "OnWarehouseLocationsPersonValidation";
		   settings.Properties.ClientSideEvents.Init = "OnWarehouseLocationsPerson_Init";
	   }).BindList(DataProviderPerson.PersonsByCompanyRolsForWarehouseLocations((int?)ViewData["id_company"], idsRoles, this.Model.id_person)).Bind(id_person).GetHtml()
		</td>
	</tr>

    <tr>
        <td>
            @Html.DevExpress().LabelFor(m => m.description, settings =>
            {
                settings.Text = "Descripción:";
                settings.AssociatedControlName = "description";
            }).GetHtml()
        </td>
        <td colspan="5">
            @Html.DevExpress().MemoFor(m => m.description, settings =>
            {
                settings.Properties.ClientInstanceName = "description";

                settings.Width = Unit.Percentage(100);
                settings.ReadOnly = (id_person != null && id_person != 0);

                settings.Properties.NullText = "";
                settings.ShowModelErrors = true;
            }).GetHtml()
        </td>
    </tr>
    <tr>
        <td>
            @Html.DevExpress().LabelFor(m => m.isActive, settings =>
            {
                settings.Text = "¿Es Rodante?:";
                settings.AssociatedControlName = "isRolling";
            }).GetHtml()
        </td>
        <td colspan="2">
            @Html.DevExpress().CheckBoxFor(m => m.isRolling, settings =>
       {
           settings.Properties.ClientInstanceName = "isRolling";
           settings.ReadOnly = (id_person != null && id_person != 0);
           settings.Width = Unit.Percentage(100);
       }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().LabelFor(m => m.isActive, settings =>
            {
                settings.Text = "¿Activo?:";
                settings.AssociatedControlName = "isActive";
            }).GetHtml()
        </td>
        <td colspan="2">
            @Html.DevExpress().CheckBoxFor(m => m.isActive, settings =>
            {
                settings.Properties.ClientInstanceName = "isActive";

                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
    </tr>
    <tr>
        <td colspan="6" style="text-align: right;">
            @Html.DevExpress().Button(settings =>
            {
                settings.Name = "btnUpdate";
                settings.Text = "Actualizar";
                settings.RenderMode = ButtonRenderMode.Button;
                settings.ImagePosition = ImagePosition.Left;
                settings.Images.Image.IconID = IconID.ActionsSave16x16devav;
                settings.UseSubmitBehavior = false;
                settings.ClientSideEvents.Click = "ButtonUpdate_Click";
            }).GetHtml()
            @Html.DevExpress().Button(settings =>
            {
                settings.Name = "btnCancel";
                settings.Text = "Cancelar";
                settings.RenderMode = ButtonRenderMode.Button;
                settings.ImagePosition = ImagePosition.Left;
                settings.Images.Image.IconID = IconID.ActionsClose16x16office2013;
                settings.UseSubmitBehavior = false;
                settings.ClientSideEvents.Click = "ButtonCancel_Click";
            }).GetHtml()
        </td>
    </tr>
    <tr id="warehouseLocationAlertRow" style="display: none;">
        <td colspan="6">
            <div class="alert alert-danger fade in" style="margin-top: 18px;">
                <button type="button" class="close" data-dismiss="alert" aria-label="close" title="close" style="top: 0px; right: 0px;"><span aria-hidden="true">&times;</span></button>
                <span id="warehouseLocationErrorMessage"></span>
            </div>
        </td>
    </tr>
</table>

<script src="~/Scripts/warehouselocation/editform.js"></script>
