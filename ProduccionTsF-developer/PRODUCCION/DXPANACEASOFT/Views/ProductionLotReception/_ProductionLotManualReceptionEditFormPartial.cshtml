@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@model DXPANACEASOFT.Models.ProductionLot

@{
	int id_productionLot = (Model != null) ? Model.id : 0;
	string codeState = (Model != null) ? Model.ProductionLotState.code : "";
	string _tipoProceso = (Model != null && Model.ProcessType != null) ? Model.ProcessType.code : "";
	string settCxC = DataProviderSetting.ValueSetting("HLCXC");
	string settUMTP = DataProviderSetting.ValueSetting("UMTP");
	int tabSelected = ViewData["tabSelected"] == null ? 0 : (int)ViewData["tabSelected"];

	var isBtnToReturn = ViewData["isBtnToReturn"] != null ? (bool)ViewData["isBtnToReturn"] : false;
	if (isBtnToReturn)
	{
		<script src="~/Scripts/productionlotreception/index.js"></script>
	}
	string codeEntero = "";
	string codeCola = "";
	if (Model != null && Model.ProductionLotDetail != null && Model.ProductionLotDetail.Count > 0)
	{
		var lstItemDetail = Model.ProductionLotLiquidation.ToList();
		if (lstItemDetail.Where(w => w.Item.ItemProcessType.FirstOrDefault(fod => fod.ProcessType.code.Equals("ENT")) != null).Distinct().Count() > 0)
		{
			codeEntero = "E";
		}
		if (lstItemDetail.Where(w => w.Item.ItemProcessType.FirstOrDefault(fod => fod.ProcessType.code.Equals("COL")) != null).Distinct().Count() > 0)
		{
			codeCola = "C";
		}
	}


	var loteManual = (bool?)this.ViewBag.loteManual ?? false;
}

@Html.Hidden("codeEnteroReport", codeEntero)
@Html.Hidden("codeColaReport", codeCola)

@using (Html.BeginForm("", "", FormMethod.Post, new { @id = "formEditProductionLotReception", name = "formEditProductionLotReception" }))
{
	if (ViewBag.WarningDrainedQuantity != null)
	{
		@Html.Raw((string)ViewBag.WarningDrainedQuantity);
	}
	if (ViewData["EditMessage"] != null)
	{
		@Html.Raw(ViewData["EditMessage"]);
	}

	@Html.Hidden("id_productionLot", id_productionLot)
	@Html.Hidden("codeState", codeState)
	@Html.Hidden("tipoProceso", _tipoProceso)
	@Html.Hidden("settUMTP", settUMTP)

	@Html.DevExpress().PageControl(tabs =>
{
	tabs.Name = "tabControl";
	tabs.Width = Unit.Percentage(100);
	tabs.ActiveTabIndex = tabSelected;

	tabs.CustomJSProperties = (sender, e) =>
	{
		e.Properties["cpLoteManual"] = loteManual;
	};

	tabs.TabPages.Add(tab =>
	{
		tab.Name = "tabDocument";
		tab.Text = "Documento    ";
		tab.TabStyle.Width = Unit.Percentage(100);

		tab.TabImage.Width = Unit.Pixel(16);
		tab.TabImage.Height = Unit.Pixel(16);
		tab.TabImage.Align = ImageAlign.Right;
		tab.TabImage.Url = "/Content/image/noimage.png";
		tab.ActiveTabImage.Align = ImageAlign.Right;
		tab.ActiveTabImage.Url = "/Content/image/noimage.png";
		tabs.ClientSideEvents.Init = "SetActiveTab";

		tab.SetContent(() =>
		{
			Html.RenderPartial("ProductionTemplates/_ProductionFormEdit");
		});
	});
	tabs.TabPages.Add(tab =>
	{
		tab.Name = "tabReception";
		tab.Text = "Recepción    ";
		tab.TabStyle.Width = Unit.Percentage(100);

		tab.TabImage.Width = Unit.Pixel(16);
		tab.TabImage.Height = Unit.Pixel(16);
		tab.TabImage.Align = ImageAlign.Right;
		tab.TabImage.Url = "/Content/image/noimage.png";
		tab.ActiveTabImage.Align = ImageAlign.Right;
		tab.ActiveTabImage.Url = "/Content/image/noimage.png";

		tab.SetContent(() =>
		{
			Html.RenderPartial("_ProductionLotReceptionMainFormTabReceptionManual");
		});
	});

	tabs.TabPages.Add(tab =>
	{
		tab.Name = "tabProductionLotLiquidaciones";
		tab.Text = "Liquidaciones    ";
		tab.TabStyle.Width = Unit.Percentage(100);

		tab.TabImage.Width = Unit.Pixel(16);
		tab.TabImage.Height = Unit.Pixel(16);
		tab.TabImage.Align = ImageAlign.Right;
		tab.TabImage.Url = "/Content/image/noimage.png";
		tab.ActiveTabImage.Align = ImageAlign.Right;
		tab.ActiveTabImage.Url = "/Content/image/noimage.png";
		tab.Visible = (codeState == "08");
		tab.SetContent(() =>
		{
			var documents = (Model != null && Model.LiquidationCartOnCartDetail != null) ? Model.LiquidationCartOnCartDetail.Distinct().ToList() : new List<LiquidationCartOnCartDetail>();
			Html.RenderPartial("_ProductionLiquidationCartonCartRelationGridView", documents);

		});
	});

}).GetHtml()


	<table class="table table-condensed">
		<tr style="border-top: 1px Solid #C0C0C0;">
			<td colspan="6" style="text-align: right">
				@{
					Html.DevExpress().Button(button =>
					{
						button.Name = "btnUpdate_EditForm";
						button.Text = "Actualizar";
						button.RenderMode = ButtonRenderMode.Button;
						button.ImagePosition = ImagePosition.Left;
						button.Images.Image.IconID = IconID.ActionsSave16x16devav;
						button.ClientEnabled = codeState != "08" && codeState != "09" && !(codeState == "06" && Model.withPrice);
							//button.UseSubmitBehavior = false;
							button.ClientVisible = IsEnabled(11);
							//button.EnableClientSideAPI = true;
							button.ClientSideEvents.Click = "ButtonUpdate_Click";
					}).Render();

					ViewContext.Writer.Write("&nbsp;&nbsp;");

					Html.DevExpress().Button(button =>
					{
						button.Name = "btnCancel_EditForm";
						button.Text = "Cerrar";
						button.RenderMode = ButtonRenderMode.Button;
						button.ImagePosition = ImagePosition.Left;
						button.Images.Image.IconID = IconID.ActionsClose16x16office2013;
						button.ClientSideEvents.Click = "ButtonCancel_Click";
					}).Render();
				}
			</td>
		</tr>
	</table>
}

<script src="~/Scripts/productionlotreception/editform.js"></script>



@functions{

	bool IsEnabled(int id_permission)
	{
		int id_user = (int)ViewData["id_user"];
		int id_menu = (int)ViewData["id_menu"];

		User user = DataProviderUser.UserById(id_user);

		if (user == null)
			return false;

		UserMenu userMenu = user.UserMenu.FirstOrDefault(m => m.Menu.id == id_menu);

		if (userMenu == null)
			return false;

		Permission permission = userMenu.Permission.FirstOrDefault(p => p.id == id_permission);

		return (permission != null);
	}

	

}
