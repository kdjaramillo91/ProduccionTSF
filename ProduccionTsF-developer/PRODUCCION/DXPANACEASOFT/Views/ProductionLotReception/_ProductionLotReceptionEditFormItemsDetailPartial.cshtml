@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@using DXPANACEASOFT.Models.GenericProcess

@model List<DXPANACEASOFT.Models.ProductionLotDetail>

@{
	Model.ForEach(r => r.ExistingDrainingTestForProductionLotReception());

	var qualityControlCACPAux = DataProviderSetting.ValueSetting("CACP");
	var bool_qualityControlCACPAux = int.Parse(qualityControlCACPAux != null ? qualityControlCACPAux : "0") == 1;
	var frst_ProductionLotDetail = Model.FirstOrDefault();
	var id_PLot = 0;

	var settLE = DataProviderSetting.ValueSetting("ULERMP");

	if (frst_ProductionLotDetail != null && frst_ProductionLotDetail.ProductionLot != null)
	{
		id_PLot = frst_ProductionLotDetail.ProductionLot.id;
	}
}

@{
	var grid = Html.DevExpress().GridView<ProductionLotDetail>(settings =>
	{
		settings.Name = "gvProductionLotReceptionEditFormItemsDetail";
		settings.CallbackRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormItemsDetailPartial" };

		//settings.ClientSideEvents.BeginCallback = "ProductionLotReceptionItemsDetail_OnBeginCallback";

		settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormItemsDetailAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormItemsDetailUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ProductionLotReception", Action = "ProductionLotReceptionEditFormItemsDetailDelete" };
		settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

		settings.CommandColumn.Visible = true;
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
		settings.SettingsBehavior.ConfirmDelete = false;

		settings.Width = Unit.Percentage(100);

		settings.KeyFieldName = "id";

		settings.SettingsPager.Visible = true;
		settings.Settings.ShowGroupPanel = false;
		settings.Settings.ShowFilterRow = false;
		settings.SettingsBehavior.AllowSelectByRowClick = true;

		//Checkbox de registros de tabla
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

		settings.Styles.Header.Wrap = DefaultBoolean.True;


		//Eventos
		settings.ClientSideEvents.Init = "OnGridViewItemDetailsInit";
		settings.ClientSideEvents.SelectionChanged = "OnGridViewItemsDetailSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "OnGridViewItemDetailsBeginCallback";
		settings.ClientSideEvents.EndCallback = "OnGridViewItemDetailsEndCallback";

		//Pie de tabla
		settings.Settings.ShowFooter = true;

		settings.CellEditorInitialize += (s, e) =>
		{
			var grid2 = s as ASPxGridView;
			if (e.Column.Name == "quantityRecived")
			{
				var sss = grid2.GetRowValues(grid2.EditingRowVisibleIndex, "quantityRecivedEditing");
				Boolean bQuantityRecivedEditing = sss != null ? (Boolean)sss : false;
				e.Editor.ReadOnly = bQuantityRecivedEditing;
			}
		};

		//Panel para cantidad de registros
		settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

			e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

			List<ProductionLotDetail> rows = (Model as List<ProductionLotDetail>);
			rows = (rows != null) ? rows.ToList() : new List<ProductionLotDetail>();

			e.Properties["cpRowsCount"] = rows.Count;

			List<ProductionLotDetailPurchaseDetail> purchaseDetails;
			var purchaseDetailsObject = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "ProductionLotDetailPurchaseDetail") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "ProductionLotDetailPurchaseDetail") : new List<ProductionLotDetailPurchaseDetail>();

			if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
			{
				purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
			}
			else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
			{
				purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
			}
			else
			{
				purchaseDetails = null;
			}

			if (purchaseDetails != null && purchaseDetails.Count > 0)
			{
				int? id_purchaseOrderDetail = purchaseDetails[0].id_purchaseOrderDetail;
				PurchaseOrderDetail purchaseOrderDetail = DataProviderPurchaseOrder.PurchaseOrderDetail(id_purchaseOrderDetail);
				e.Properties["cpEditingIdPurcharseOrder"] = purchaseOrderDetail.id_purchaseOrder;

				int? id_remissionGuideDetail = purchaseDetails[0].id_remissionGuideDetail;
				RemissionGuideDetail remissionGuideDetail = DataProviderRemissionGuide.RemissionGuideDetail(id_remissionGuideDetail);

				e.Properties["cpEditingIdRemissionGuide"] = remissionGuideDetail.id_remisionGuide;

			}
			else
			{
				e.Properties["cpEditingIdPurcharseOrder"] = null;
				e.Properties["cpEditingIdRemissionGuide"] = null;
			}

		};

		settings.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfoItems""></span>");
			if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			{
				ViewContext.Writer.Write(
					@"<a id=""lnkSelectAllRowsItems"" style=""cursor: pointer;"" onclick=""gvEditItemDetailsSelectAllRows()"">Seleccionar Todos</a>
<a id=""lnkClearSelectionItems"" style=""cursor: pointer;"" onclick=""gvEditItemDetailsClearSelection()"">Anular Selección</a>"
				);
			}
		});

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		settings.SettingsEditing.ShowModelErrorsForEditors = true;

		settings.InitNewRow = (s, e) =>
		{
			e.NewValues["quantityOrdered"] = 0.00M;
			e.NewValues["quantityRemitted"] = 0.00M;
			e.NewValues["quantityRecived"] = 0.00M;
			e.NewValues["drawersNumber"] = 0.00M;
			e.NewValues["quantitydrained"] = 0.00M;

		};

		#region ColumnsAdd

		//Orden de Compra
		settings.Columns.Add(column =>
		{
			column.FieldName = "id_purchaseOrder";
			column.Name = "id_purchaseOrder";
			column.Caption = "Orden de Compra";
			column.Width = Unit.Percentage(8);
			//column.UnboundType = UnboundColumnType.String;
			column.ColumnType = MVCxGridViewColumnType.ComboBox;

			column.SetDataItemTemplateContent(c =>
			{
				List<ProductionLotDetailPurchaseDetail> purchaseDetails;
				var purchaseDetailsObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailPurchaseDetail");

				if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
				}
				else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
				}
				else
				{
					purchaseDetails = null;
				}


				string text = string.Empty;

				if (purchaseDetails != null && purchaseDetails.Count > 0)
				{
					int? id_purchaseOrderDetail = purchaseDetails[0].id_purchaseOrderDetail;
					PurchaseOrderDetail purchaseOrderDetail = DataProviderPurchaseOrder.PurchaseOrderDetail(id_purchaseOrderDetail);

					text += purchaseOrderDetail != null ? purchaseOrderDetail.PurchaseOrder.Document.number : "";

					text += (purchaseDetails.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseDetails.Count - 1).ToString() + "</a>" : "";
				}

				ViewContext.Writer.Write(text);
			});

			column.EditorProperties().ComboBox(p =>
			{
				p.CallbackRouteValues = new { Controller = "ProductionLotReception", Action = "LoadItemComboboxPurcharseOrder" };
				p.DataSource = null;
				//p.DataSource = DataProviderItem.SalesItemsByCompany((int?)ViewData["id_company"]);
				p.ClientInstanceName = "id_purchaseOrder";
				p.ValueField = "Value";
				p.TextField = "Text";
				p.ValueType = typeof(int);
				//column.VisibleIndex = 1;
				p.CallbackPageSize = 10;
				p.Width = Unit.Percentage(100);
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				//p.Columns.Add("masterCode", "Código", 80);//, Unit.Percentage(50));
				//p.Columns.Add("name", "Nombre del Producto", 300);//, Unit.Percentage(70));
				//                                                  //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));
				//p.Columns.Add("auxCode", "Cod.Aux.", 160);//, Unit.Percentage(50));
				//p.Columns.Add("Presentation.MetricUnit.code", "U.M.", 50);//, Unit.Percentage(20));
				//p.Columns.Add("description2", "Descripcion", 0);//, Unit.Percentage(20));

				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
				p.ClientSideEvents.SelectedIndexChanged = "PurcharseOrder_SelectedIndexChanged";
				p.ClientSideEvents.BeginCallback = "PurcharseOrder_BeginCallback";
				p.ClientSideEvents.EndCallback = "PurcharseOrder_EndCallback";
				//p.ClientSideEvents.EndCallback = "PurcharseOrderDetails_EndCallback";
				//p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
				p.ClientSideEvents.Validation = "OnPurcharseOrderValidation";
				//p.ClientSideEvents.Validation = "function (s, e) {e.isValid = (e.value != null ); e.errorText = 'Debe elegir una Orden de Compra';}";
			});

			//column.SetEditItemTemplateContent(c =>
			//{
			//    List<ProductionLotDetailPurchaseDetail> purchaseDetails;
			//    var purchaseDetailsObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailPurchaseDetail");

			//    if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
			//    {
			//        purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
			//    }
			//    else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
			//    {
			//        purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
			//    }
			//    else
			//    {
			//        purchaseDetails = null;
			//    }


			//    string text = string.Empty;

			//    if (purchaseDetails != null && purchaseDetails.Count > 0)
			//    {
			//        int? id_purchaseOrderDetail = purchaseDetails[0].id_purchaseOrderDetail;
			//        PurchaseOrderDetail purchaseOrderDetail = DataProviderPurchaseOrder.PurchaseOrderDetail(id_purchaseOrderDetail);

			//        text += purchaseOrderDetail != null ? purchaseOrderDetail.PurchaseOrder.Document.number : "";



			//        text += (purchaseDetails.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseDetails.Count - 1).ToString() + "</a>" : "";
			//    }

			//    ViewContext.Writer.Write(text);
			//});
		});

		//Guía de Remisión
		settings.Columns.Add(column =>
		{
			column.FieldName = "id_remissionGuide";
			column.Name = "id_remissionGuide";
			column.Caption = "Guía de Remisión";
			column.Width = Unit.Percentage(8);
			//column.UnboundType = UnboundColumnType.String;
			column.ColumnType = MVCxGridViewColumnType.ComboBox;

			column.SetDataItemTemplateContent(c =>
			{
				List<ProductionLotDetailPurchaseDetail> purchaseDetails;
				var purchaseDetailsObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailPurchaseDetail");

				if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
				}
				else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
				}
				else
				{
					purchaseDetails = null;
				}


				string text = string.Empty;

				if (purchaseDetails != null && purchaseDetails.Count > 0)
				{
					int? id_remissionGuideDetail = purchaseDetails[0].id_remissionGuideDetail;
					RemissionGuideDetail remissionGuideDetail = DataProviderRemissionGuide.RemissionGuideDetail(id_remissionGuideDetail);

					text += remissionGuideDetail != null ? remissionGuideDetail.RemissionGuide.Document.number : "";

					text += (purchaseDetails.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseDetails.Count - 1).ToString() + "</a>" : "";
				}

				ViewContext.Writer.Write(text);
			});

			column.EditorProperties().ComboBox(p =>
			{
				p.CallbackRouteValues = new { Controller = "ProductionLotReception", Action = "LoadItemComboboxRemissionGuide" };
				p.DataSource = null;
				//p.DataSource = DataProviderItem.SalesItemsByCompany((int?)ViewData["id_company"]);
				p.ClientInstanceName = "id_remissionGuide";
				p.ValueField = "Value";
				p.TextField = "Text";
				p.ValueType = typeof(int);
				//column.VisibleIndex = 1;
				p.CallbackPageSize = 10;
				p.Width = Unit.Percentage(100);
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				//p.Columns.Add("masterCode", "Código", 80);//, Unit.Percentage(50));
				//p.Columns.Add("name", "Nombre del Producto", 300);//, Unit.Percentage(70));
				//                                                  //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));
				//p.Columns.Add("auxCode", "Cod.Aux.", 160);//, Unit.Percentage(50));
				//p.Columns.Add("Presentation.MetricUnit.code", "U.M.", 50);//, Unit.Percentage(20));
				//p.Columns.Add("description2", "Descripcion", 0);//, Unit.Percentage(20));

				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
				p.ClientSideEvents.SelectedIndexChanged = "RemissionGuide_SelectedIndexChanged";
				p.ClientSideEvents.BeginCallback = "RemissionGuide_BeginCallback";
				p.ClientSideEvents.EndCallback = "RemissionGuide_EndCallback";
				//p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
				p.ClientSideEvents.Validation = "OnRemissionGuideValidation";
				//p.ClientSideEvents.Validation = "function (s, e) {e.isValid = (e.value != null ); e.errorText = 'Debe elegir una Guía de Remisión';}";
			});

			//column.SetEditItemTemplateContent(c =>
			//{
			//    List<ProductionLotDetailPurchaseDetail> purchaseDetails;
			//    var purchaseDetailsObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailPurchaseDetail");

			//    if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
			//    {
			//        purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
			//    }
			//    else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
			//    {
			//        purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
			//    }
			//    else
			//    {
			//        purchaseDetails = null;
			//    }

			//    string text = string.Empty;

			//    if (purchaseDetails != null && purchaseDetails.Count > 0)
			//    {
			//        int? id_remissionGuideDetail = purchaseDetails[0].id_remissionGuideDetail;
			//        RemissionGuideDetail remissionGuideDetail = DataProviderRemissionGuide.RemissionGuideDetail(id_remissionGuideDetail);

			//        text += remissionGuideDetail != null ? remissionGuideDetail.RemissionGuide.Document.number : "";

			//        text += (purchaseDetails.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseDetails.Count - 1).ToString() + "</a>" : "";
			//    }

			//    ViewContext.Writer.Write(text);
			//});
		});


		settings.Columns.Add(column =>
		{
			column.FieldName = "id_externalGuide";
			column.Name = "id_externalGuide";
			column.Caption = "Guía Externa";			
			column.Width = Unit.Percentage(10);
			column.UnboundType = UnboundColumnType.String;

			column.SetDataItemTemplateContent(c =>
			{
				List<ProductionLotDetailPurchaseDetail> purchaseDetails;
				var purchaseDetailsObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailPurchaseDetail");

				if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
				}
				else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
				}
				else
				{
					purchaseDetails = null;
				}

				string text = string.Empty;

				if (purchaseDetails != null && purchaseDetails.Count > 0)
				{
					int? id_remissionGuideDetail = purchaseDetails[0].id_remissionGuideDetail;
					RemissionGuideDetail remissionGuideDetail = DataProviderRemissionGuide.RemissionGuideDetail(id_remissionGuideDetail);

					text += remissionGuideDetail != null ? remissionGuideDetail.RemissionGuide.Guia_Externa : "";

					text += (purchaseDetails.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseDetails.Count - 1).ToString() + "</a>" : "";
				}

				ViewContext.Writer.Write(text);
			});

			column.EditorProperties().TextBox(p =>
			{
				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "id_externalGuide";
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
			});
		});

		//Proceso
		settings.Columns.Add(column =>
		{
			column.FieldName = "process";
			column.Name = "process";
			column.Caption = "Proceso";
			column.Width = Unit.Percentage(8);
			//column.UnboundType = UnboundColumnType.String;
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.ReadOnly = true;
			column.SetDataItemTemplateContent(c =>
			{
				List<ProductionLotDetailPurchaseDetail> purchaseDetails;
				var purchaseDetailsObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailPurchaseDetail");

				if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
				}
				else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
				{
					purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
				}
				else
				{
					purchaseDetails = null;
				}


				string text = string.Empty;

				if (purchaseDetails != null && purchaseDetails.Count > 0)
				{
					int? id_remissionGuideDetail = purchaseDetails[0].id_remissionGuideDetail;
					RemissionGuideDetail remissionGuideDetail = DataProviderRemissionGuide.RemissionGuideDetail(id_remissionGuideDetail);

					text += remissionGuideDetail != null ? remissionGuideDetail.RemissionGuide.Person2.processPlant : "";

					text += (purchaseDetails.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseDetails.Count - 1).ToString() + "</a>" : "";
				}

				ViewContext.Writer.Write(text);
			});

			column.EditorProperties().TextBox(p =>
			{
				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "process";
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
			});

			//column.SetEditItemTemplateContent(c =>
			//{
			//    List<ProductionLotDetailPurchaseDetail> purchaseDetails;
			//    var purchaseDetailsObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailPurchaseDetail");

			//    if (purchaseDetailsObject is List<ProductionLotDetailPurchaseDetail>)
			//    {
			//        purchaseDetails = (List<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject;
			//    }
			//    else if (purchaseDetailsObject is HashSet<ProductionLotDetailPurchaseDetail>)
			//    {
			//        purchaseDetails = ((HashSet<ProductionLotDetailPurchaseDetail>)purchaseDetailsObject).ToList();
			//    }
			//    else
			//    {
			//        purchaseDetails = null;
			//    }

			//    string text = string.Empty;

			//    if (purchaseDetails != null && purchaseDetails.Count > 0)
			//    {
			//        int? id_remissionGuideDetail = purchaseDetails[0].id_remissionGuideDetail;
			//        RemissionGuideDetail remissionGuideDetail = DataProviderRemissionGuide.RemissionGuideDetail(id_remissionGuideDetail);

			//        text += remissionGuideDetail != null ? remissionGuideDetail.RemissionGuide.Document.number : "";

			//        text += (purchaseDetails.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseDetails.Count - 1).ToString() + "</a>" : "";
			//    }

			//    ViewContext.Writer.Write(text);
			//});
		});

		//PRODUCTO
		settings.Columns.Add(column =>
		{
			column.FieldName = "id_item";
			column.Caption = "Nombre del Producto";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.Width = Unit.Percentage(15);
			column.EditorProperties().ComboBox(p =>
			{
				p.ClientInstanceName = "id_item";
				p.DataSource = DataProviderItem.PurchaseItemsByCompanyAndInventoryLine((int?)ViewData["id_company"], "MP");
				p.TextFormatString = "{1}";
				p.ValueField = "id";
				//p.TextField = "name";
				p.Width = Unit.Percentage(100);
				p.ValueType = typeof(int);
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				p.Columns.Add("masterCode", "Código", 70);//, Unit.Percentage(50));
				p.Columns.Add("name", "Nombre del Producto", 200);//, Unit.Percentage(70));
																  //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));
				p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", 50);//, Unit.Percentage(20));
																				   //p.ClientSideEvents.DropDown = "ItemDetailCombo_DropDown";
				p.ClientSideEvents.SelectedIndexChanged = "ItemDetailCombo_SelectedIndexChanged";
				p.ClientSideEvents.Init = "ItemDetailCombo_Init";
				p.ClientSideEvents.Validation = "OnItemDetailValidation";
			});
		});

		//UM
		settings.Columns.Add(column =>
		{
			column.FieldName = "metricUnitPO";
			column.Name = "metricUnitPO";
			//column.PropertiesEdit.ClientInstanceName = "metricUnitPO";
			column.Caption = "UM";
			column.Width = Unit.Percentage(4);
			//column.UnboundType = UnboundColumnType.String;
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.ReadOnly = true;

			column.SetDataItemTemplateContent(c =>
			{
				var id = (int)DataBinder.Eval(c.DataItem, "id_item");

				Item item = DataProviderItem.Item(id);
				string metricUnit = (item != null && item.ItemPurchaseInformation != null) ? item.ItemPurchaseInformation.MetricUnit.code : "Lbs";
				ViewContext.Writer.Write(metricUnit);
			});


			//column.SetEditItemTemplateContent(c =>
			//{
			//    int? id = (int?)DataBinder.Eval(c.DataItem, "id_item");
			//    Item item = DataProviderItem.Item(id);

			//    string metricUnit = (item != null && item.ItemPurchaseInformation != null) ? item.ItemPurchaseInformation.MetricUnit.code : "Lbs";

			//    Html.DevExpress().TextBox(p =>
			//    {
			//        p.Name = "metricUnit";
			//        //p.Properties.ClientInstanceName = "metricUnit";

			//        p.Width = Unit.Percentage(100);

			//        p.ReadOnly = true;
			//        p.ShowModelErrors = false;
			//    }).Bind(metricUnit).Render();
			//});

			column.EditorProperties().TextBox(p =>
			{
				//p.MaxLength = 20;
				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "metricUnitPO";
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
			});
		});

		//Bodega
		settings.Columns.Add(column =>
		{
			column.FieldName = "id_warehouse";
			column.Caption = "Bodega";
			column.Width = Unit.Percentage(10);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;

			column.EditorProperties().ComboBox(p =>
			{
				p.ClientInstanceName = "id_warehouse";
				p.DataSource = DataProviderWarehouse.Warehouses((int)ViewData["id_company"]);
				p.ValueField = "id";
				p.TextField = "name";
				p.Width = Unit.Percentage(100);
				p.ValueType = typeof(int);
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

				p.ClientSideEvents.SelectedIndexChanged = "ComboWarehouse_SelectedIndexChanged";
				p.ClientSideEvents.Validation = "OnWarehouseDetailValidation";
			});
		});

		//Ubicación
		settings.Columns.Add(column =>
		{
			column.FieldName = "id_warehouseLocation";
			column.Caption = "Ubicación";
			column.Width = Unit.Percentage(10);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;

			column.EditorProperties().ComboBox(p =>
			{
				p.ClientInstanceName = "id_warehouseLocation";
				p.DataSource = DataProviderWarehouseLocation.WarehouseLocations((int)ViewData["id_company"]);
				p.ValueField = "id";
				p.TextField = "name";
				p.Width = Unit.Percentage(100);
				p.ValueType = typeof(int);
				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

				p.ClientSideEvents.Init = "ComboWarehouseLocation_Init";
				p.ClientSideEvents.Validation = "OnWarehouseLocationDetailValidation";
			});
		});

		//Cantidad Ordenada
		settings.Columns.Add(column =>
		{
			column.FieldName = "quantityOrdered";
			column.Name = "quantityOrdered";
			column.Caption = "Cantidad Ordenada";
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.ReadOnly = true;
			column.Width = Unit.Percentage(10);

			column.SetDataItemTemplateContent(c =>
			{
				decimal quantityOrdered = (decimal)DataBinder.Eval(c.DataItem, "quantityOrdered");
				ViewContext.Writer.Write(quantityOrdered.ToString("N2"));
			});

			column.EditorProperties().SpinEdit(p =>
			{

				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "quantityOrdered";
				p.DisplayFormatString = "C2";
				//p.DisplayFormatInEditMode = true;
				p.DecimalPlaces = 2;
				p.SpinButtons.ShowIncrementButtons = false;
				p.SpinButtons.ShowLargeIncrementButtons = false;
				/*p.Increment = 0.01M;
				p.LargeIncrement = 1.0M;*/
				p.MaxValue = 99999999;
				p.MinValue = 0;
				p.AllowNull = false;
				//p.MaxValue = 100;
				p.NumberType = SpinEditNumberType.Float;
				p.NumberFormat = SpinEditNumberFormat.Currency;
				//p.ClientSideEvents.GotFocus = "GenericSelectAllText";
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
				//p.ClientSideEvents.ValueChanged = "unitPriceValueChanged";
				//p.ClientSideEvents.ValueChanged = "Price_ValueChanged";
				//p.ClientSideEvents.Validation = "discountValidation";

			});
			//column.SetEditItemTemplateContent(c =>
			//{
			//    decimal quantityOrdered = (decimal)(DataBinder.Eval(c.DataItem, "quantityOrdered") ?? 0);
			//    ViewContext.Writer.Write(quantityOrdered.ToString("N2"));
			//});

		});

		//Cantidad Programada
		settings.Columns.Add(column =>
		{
			column.FieldName = "quantityRemitted";
			column.Name = "quantityRemitted";
			column.Caption = "Cantidad Programada";
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.Width = Unit.Percentage(10);
			column.ReadOnly = true;

			column.SetDataItemTemplateContent(c =>
			{
				decimal quantityRemitted = (decimal)DataBinder.Eval(c.DataItem, "quantityRemitted");
				ViewContext.Writer.Write(quantityRemitted.ToString("N2"));
			});

			column.EditorProperties().SpinEdit(p =>
			{

				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "quantityRemitted";
				p.DisplayFormatString = "C2";
				//p.DisplayFormatInEditMode = true;
				p.DecimalPlaces = 2;
				p.SpinButtons.ShowIncrementButtons = false;
				p.SpinButtons.ShowLargeIncrementButtons = false;
				/*p.Increment = 0.01M;
				p.LargeIncrement = 1.0M;*/
				p.MaxValue = 99999999;
				p.MinValue = 0;
				p.AllowNull = false;
				//p.MaxValue = 100;
				p.NumberType = SpinEditNumberType.Float;
				p.NumberFormat = SpinEditNumberFormat.Currency;
				//p.ClientSideEvents.GotFocus = "GenericSelectAllText";
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
				//p.ClientSideEvents.ValueChanged = "unitPriceValueChanged";
				//p.ClientSideEvents.ValueChanged = "Price_ValueChanged";
				//p.ClientSideEvents.Validation = "discountValidation";

			});

			//column.SetEditItemTemplateContent(c =>
			//{

			//    column.ReadOnly = true;

			//    decimal quantityOrdered = (decimal)(DataBinder.Eval(c.DataItem, "quantityRemitted") ?? 0);
			//    ViewContext.Writer.Write(quantityOrdered.ToString("N2"));

			//});

		});

		//Cantidad Remitida
		settings.Columns.Add(column =>
		{
			column.FieldName = "quantityRecived";
			column.Name = "quantityRecived";
			column.Caption = "Cantidad Remitida";
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.Width = Unit.Percentage(10);
			//column.ReadOnly =  false;

			column.SetDataItemTemplateContent(c =>
			{
				decimal quantityRecived = (decimal)DataBinder.Eval(c.DataItem, "quantityRecived");
				ViewContext.Writer.Write(quantityRecived.ToString("N2"));

				Boolean bQuantityRecivedEditing = (Boolean)DataBinder.Eval(c.DataItem, "quantityRecivedEditing");

				column.ReadOnly = bQuantityRecivedEditing;
			});



			column.EditorProperties().SpinEdit(p =>
			{

				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "quantityRecived";
				p.DisplayFormatString = "N2";
				p.DisplayFormatInEditMode = true;
				p.DecimalPlaces = 2;
				p.MinValue = 0;
				p.NumberType = SpinEditNumberType.Float;
				p.NumberFormat = SpinEditNumberFormat.Custom;
				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

				p.ClientSideEvents.Validation = "OnQuantityRecivedValidation";

			});



		});

		//Número Kavetas
		settings.Columns.Add(column =>
		{
			column.FieldName = "drawersNumber";
			column.Name = "drawersNumberPO";
			column.Caption = "Número Kavetas";
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.Width = Unit.Percentage(10);

			column.SetDataItemTemplateContent(c =>
			{
				int drawersNumber = (int)((int?)DataBinder.Eval(c.DataItem, "drawersNumber") ?? 0);
				ViewContext.Writer.Write(drawersNumber.ToString());
			});
			column.EditorProperties().SpinEdit(p =>
			{
				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "drawersNumberPO";
				p.DisplayFormatString = "N2";
				p.DisplayFormatInEditMode = true;
				p.DecimalPlaces = 2;

				p.MinValue = 0;
				p.MaxValue = 100000;
				p.NumberType = SpinEditNumberType.Float;
				p.NumberFormat = SpinEditNumberFormat.Custom;

				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
				p.ClientSideEvents.Validation = "OnDrawersNumberValidationPO";
				//p.ClientSideEvents.Validation = "OnquantitydrainedValidation";
			});
		});

		//Cantidad Recibida - escurido
		settings.Columns.Add(column =>
		{
			column.FieldName = "quantitydrained";
			column.Name = "quantitydrained";
			column.Caption = "Cantidad Recibida - Escurrido";
			column.ColumnType = MVCxGridViewColumnType.SpinEdit;
			column.Width = Unit.Percentage(10);

			column.ReadOnly = (settLE == "Y") ? true : false;

			column.SetDataItemTemplateContent(c =>
			{
				decimal quantityRemitted = (decimal)((decimal?)DataBinder.Eval(c.DataItem, "quantitydrained") ?? 0);
				ViewContext.Writer.Write(quantityRemitted.ToString("N2"));
			});
			column.EditorProperties().SpinEdit(p =>
			{
				p.Width = Unit.Percentage(100);
				p.ClientInstanceName = "quantitydrained";
				p.DisplayFormatString = "N2";
				p.DisplayFormatInEditMode = true;
				p.DecimalPlaces = 2;

				p.MinValue = 0;
				p.MaxValue = 100000;
				p.NumberType = SpinEditNumberType.Float;
				p.NumberFormat = SpinEditNumberFormat.Custom;

				p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
				if (!settLE.Equals("Y"))
				{
					p.ClientSideEvents.Validation = "OnquantitydrainedValidation";
				}
				//
			});
		});

		//Calidad
		settings.Columns.Add(column =>
		{
			column.Name = "ProductionLotDetailQualityControl";
			column.Caption = "Calidad";
			column.Width = Unit.Percentage(8);
			column.UnboundType = UnboundColumnType.String;

			column.SetDataItemTemplateContent(c =>
			{
				List<ProductionLotDetailQualityControl> productionLotDetailQualityControls;
				var productionLotDetailQualityObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailQualityControl");

				if (productionLotDetailQualityObject is List<ProductionLotDetailQualityControl>)
				{
					productionLotDetailQualityControls = (List<ProductionLotDetailQualityControl>)productionLotDetailQualityObject;
				}
				else if (productionLotDetailQualityObject is HashSet<ProductionLotDetailQualityControl>)
				{
					productionLotDetailQualityControls = ((HashSet<ProductionLotDetailQualityControl>)productionLotDetailQualityObject).ToList();
				}
				else
				{
					productionLotDetailQualityControls = null;
				}


				string text = string.Empty;

				if (productionLotDetailQualityControls != null && productionLotDetailQualityControls.Count > 0)
				{
					bool? isConforms = null;
					string documentStateAux = "";
					var productionLotDetailQualityControl = productionLotDetailQualityControls.FirstOrDefault(fod => fod.QualityControl != null && fod.QualityControl.Document.DocumentState.code != "05");//"05"Anulado
					if (productionLotDetailQualityControl != null)
					{
						isConforms = productionLotDetailQualityControl.QualityControl.isConforms;
						documentStateAux = productionLotDetailQualityControl.QualityControl.Document.DocumentState.name;
					}

					text = (isConforms == true ? "<font color='green'>" + documentStateAux + "(Conforme)" + "</font>" :
								  (isConforms == false ? "<font color='red'>" + documentStateAux + "(No Conforme)" + "</font>" : null));

				}

				ViewContext.Writer.Write(text);
			});

			column.SetEditItemTemplateContent(c =>
			{
				List<ProductionLotDetailQualityControl> productionLotDetailQualityControls;
				var productionLotDetailQualityObject = DataBinder.Eval(c.DataItem, "ProductionLotDetailQualityControl");

				if (productionLotDetailQualityObject is List<ProductionLotDetailQualityControl>)
				{
					productionLotDetailQualityControls = (List<ProductionLotDetailQualityControl>)productionLotDetailQualityObject;
				}
				else if (productionLotDetailQualityObject is HashSet<ProductionLotDetailQualityControl>)
				{
					productionLotDetailQualityControls = ((HashSet<ProductionLotDetailQualityControl>)productionLotDetailQualityObject).ToList();
				}
				else
				{
					productionLotDetailQualityControls = null;
				}


				string text = string.Empty;

				if (productionLotDetailQualityControls != null && productionLotDetailQualityControls.Count > 0)
				{
					bool? isConforms = null;
					string documentStateAux = "";
					var productionLotDetailQualityControl = productionLotDetailQualityControls.FirstOrDefault(fod => fod.QualityControl != null && fod.QualityControl.Document.DocumentState.code == "03");
					if (productionLotDetailQualityControl != null)
					{
						isConforms = productionLotDetailQualityControl.QualityControl.isConforms;
						documentStateAux = productionLotDetailQualityControl.QualityControl.Document.DocumentState.name;
					}

					text = (isConforms == true ? "<font color='green'>" + documentStateAux + "(Conforme)" + "</font>" :
								  (isConforms == false ? "<font color='red'>" + documentStateAux + "(No Conforme)" + "</font>" : null));

				}

				ViewContext.Writer.Write(text);
			});
		});





		MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
		{
			ShowEditButton = true,
			ShowDeleteButton = true,
			ShowCancelButton = true,
			ShowUpdateButton = true,
			Visible = true,
			VisibleIndex = 20,
			Caption = "Acciones"
		};
		commandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
		commandColumn.Width = Unit.Percentage(10);

		commandColumn.CustomButtons.Add(
				new GridViewCommandColumnCustomButton
				{
					ID = "btnQualityControlRow",
					Text = "Calidad"
				}
		);
		settings.ClientSideEvents.CustomButtonClick = "GridViewItemsCustomCommandButton_Click";

		settings.Columns.Add(commandColumn);

		#endregion

		#region ColumnsEdit


		#endregion
		if (ViewData["EditError"] != null)
		{
			settings.Settings.ShowFooter = true;
			settings.SetFooterRowTemplateContent(c =>
			{
				Html.ViewContext.Writer.Write(ViewData["EditError"]);
			});
		}

	});

}
@grid.Bind(Model).GetHtml()

@functions {
	int GetFilteredRowCountWithoutPage(MVCxGridView grid)
	{
		int selectedRowsOnPage = 0;
		foreach (var key in grid.GetCurrentPageRowValues("id"))
		{
			if (grid.Selection.IsRowSelectedByKey(key))
				selectedRowsOnPage++;
		}
		return grid.Selection.FilteredCount - selectedRowsOnPage;
	}

}

<script src="~/Scripts/productionlotreception/_productionLotReceptionDetailsEditForm.js"></script>