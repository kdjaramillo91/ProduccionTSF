@using DXPANACEASOFT.DataProviders
@model DXPANACEASOFT.Models.RemissionGuideControlVehicle
@using DXPANACEASOFT.Models

@{
    TempData.Keep("remissionGuideForControlVehicle");
    string codeState = (Model != null && Model.RemissionGuide != null && Model.RemissionGuide.Document != null && Model.RemissionGuide.Document.DocumentState != null && Model.RemissionGuide.Document.DocumentState.code != "") ? Model.RemissionGuide.Document.DocumentState.code : "";
    var edpb = Model.exitDateProductionBuilding;
}
@Html.Hidden("edpb", edpb)

<table id="RGCVContainer" class="table table-condenced" style="margin: 0px;">
    <tr style="border-bottom: 1px Solid #C0C0C0;">
        <td colspan="4">
            <span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Información General</span>
        </td>
    </tr>
    <!--PROVEEDOR Y UNIDAD DE PRODUCCIÓN-->
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "providerAuxLabel";
                settings.Text = "Proveedor:";
                settings.AssociatedControlName = "providerAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.providerNameAux, settings =>
            {
                settings.Name = "providerNameAux";
                settings.Properties.ClientInstanceName = "providerNameAux";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "productionUnitProviderAuxLabel";
                settings.Text = Model.productionUnitProviderAuxLab;
                settings.AssociatedControlName = "productionUnitProviderAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.productionUnitProviderAux, settings =>
            {
                settings.Name = "productionUnitProviderAuxLab";
                settings.Properties.ClientInstanceName = "productionUnitProviderAuxLab";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
    </tr>
    <!--PISCINA Y TOTAL LIBRAS-->
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "poolNameAuxLabel";
                settings.Text = "Piscina:";
                settings.AssociatedControlName = "poolNameAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.poolNameAux, settings =>
            {
                settings.Name = "poolNameAux";
                settings.Properties.ClientInstanceName = "poolNameAux";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "totalPoundsAuxLabel";
                settings.Text = "Total Libras:";
                settings.AssociatedControlName = "totalPoundsAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().SpinEditFor(m => m.totalPoundsAux, settings =>
            {
                settings.Name = "totalPoundsAux";
                settings.Properties.NumberType = SpinEditNumberType.Float;
                settings.Properties.DisplayFormatString = "N2";
            }).GetHtml()
        </td>
    </tr>
    <!--Zona y Sitio-->
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "zoneNameLabel";
                settings.Text = "Zona:";
                settings.AssociatedControlName = "zoneNameLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.zoneNameAux, settings =>
            {
                settings.Name = "zoneNameAux";
                settings.Properties.ClientInstanceName = "zoneNameAux";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "siteNameAuxLabel";
                settings.Text = "Sitio:";
                settings.AssociatedControlName = "siteNameAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.siteNameAux, settings =>
            {
                settings.Name = "siteNameAux";
                settings.Properties.ClientInstanceName = "siteNameAux";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
    </tr>
    <!--Dirección de Destino y Vía de Transporte-->
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "addressTargetAuxLabel";
                settings.Text = "Dirección Destino:";
                settings.AssociatedControlName = "addressTargetAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.addressTargetAux, settings =>
            {
                settings.Name = "addressTargetAux";
                settings.Properties.ClientInstanceName = "addressTargetAux";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "shippingTypeAuxLabel";
                settings.Text = "Vía de Transporte:";
                settings.AssociatedControlName = "shippingTypeAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.shippingTypeAux, settings =>
            {
                settings.Name = "shippingTypeAux";
                settings.Properties.ClientInstanceName = "shippingTypeAux";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
    </tr>
    <!--Chofer-->
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "driverNameAuxLabel";
                settings.Text = "Chofer:";
                settings.AssociatedControlName = "driverNameAuxLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.driverNameAux, settings =>
            {
                settings.Name = "driverNameAux";
                settings.Properties.ClientInstanceName = "driverNameAux";
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "requireSecurityLbl";
                settings.Text = "¿Requiere Seguridad?:";
                settings.AssociatedControlName = "requireSecurityLbl";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().CheckBoxFor(m => m.RemissionGuide.RemissionGuideCustomizedInformation.hasSecurity, settings =>
            {
                settings.Properties.ClientInstanceName = "hasSecurity";
                settings.Name = "hasSecurity";
                settings.ReadOnly = true;
                settings.Width = Unit.Percentage(100);
            }).GetHtml()
        </td>
    </tr>
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "id_personProcessPlantLabel";
                settings.Text = "Proceso:";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.RemissionGuide.Person2.processPlant, settings =>
            {
                settings.Name = "id_personProcessPlant";
                settings.Properties.ClientInstanceName = "id_personProcessPlant";
                settings.Width = Unit.Percentage(100);
                settings.ReadOnly = true;
            }).GetHtml()
        </td>
    </tr>
    <tr style="border-bottom: 1px Solid #C0C0C0;">
        <td colspan="4">
            <span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Fecha de Despacho</span>
        </td>
    </tr>
    <tr>
        <td>
            @Html.DevExpress().LabelFor(m => m.RemissionGuide.despachureDate, settings =>
            {
                settings.Name = "despachureDateLabel";
                settings.Text = "Fecha:";

                settings.AssociatedControlName = "despachureDateLabel";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().DateEditFor(m => m.RemissionGuide.despachureDate, settings =>
            {
                settings.Name = "despachureDate";
                settings.Properties.ClientInstanceName = "despachureDate";
                settings.Properties.UseMaskBehavior = true;
                settings.Properties.EditFormat = EditFormat.Custom;
                settings.Properties.EditFormatString = "dd/MM/yyyy";
                settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                settings.Width = Unit.Percentage(100);
                settings.ReadOnly = true;
                settings.ShowModelErrors = false;
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().LabelFor(m => m.RemissionGuide.despachurehour, settings =>
            {
                settings.Name = "despachurehourLabel";
                settings.Text = "Fecha:";
                settings.AssociatedControlName = "despachurehourLabel";
            }).GetHtml()
        </td>
        <td>
            @{
                TimeSpan? despachurehour = (Model != null && Model.RemissionGuide != null && Model.RemissionGuide.despachurehour != null) ? (TimeSpan?)Model.RemissionGuide.despachurehour : null;
            }
            @Html.DevExpress().TimeEdit(settings =>
            {
                settings.Name = "despachurehour";
                settings.Properties.ClientInstanceName = "despachurehour";

                settings.Properties.EditFormat = EditFormat.Time;
                settings.Properties.EditFormatString = "HH:mm";
                settings.Properties.DisplayFormatString = "HH:mm";
                settings.ReadOnly = true;
                settings.Width = Unit.Percentage(100);
                if (despachurehour != null)
                {
                    settings.DateTime = new DateTime(2018, 1, 1, despachurehour.Value.Hours, despachurehour.Value.Minutes, 0);
                }
                settings.ShowModelErrors = false;
            }).GetHtml()
        </td>
    </tr>
    <tr style="border-bottom: 1px Solid #C0C0C0;">
        <td colspan="4">
            <span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Salida de Planta</span>
        </td>
    </tr>
    <tr>
        <!-- CODIGO VA AQUI-->
        <td>
            @Html.DevExpress().LabelFor(m => m.exitDateProductionBuilding, settings =>
        {
            settings.Name = "exitDateProductionBuildingLabel";
            settings.Text = "Fecha:";
            settings.ControlStyle.Font.Bold = true;
            settings.AssociatedControlName = "exitDateProductionBuildingLabel";
        }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().DateEditFor(m => m.exitDateProductionBuilding, settings =>
	   {
		   settings.Name = "exitDateProductionBuilding";
		   settings.Properties.ClientInstanceName = "exitDateProductionBuilding";
		   settings.Properties.UseMaskBehavior = false;
		   settings.Properties.EditFormat = EditFormat.Custom;
		   settings.Properties.ClientSideEvents.Init = "exitDateProductionBuildingOnInit";
		   settings.Properties.EditFormatString = "dd/MM/yyyy";
		   settings.Properties.DisplayFormatString = "dd/MM/yyyy";
		   settings.Width = Unit.Percentage(100);
		   settings.Properties.MinDate = new DateTime(2010, 1, 1);
		   settings.CustomJSProperties = (s, e) =>
		   {
			   e.Properties["cpMessageError"] = "Campo Obligatorio.";
			   e.Properties["cpIsRequired"] = "true";
			   e.Properties["cpHasTab"] = "false";
		   };
		   settings.Properties.ClientSideEvents.Validation = "OnUpdateImagenWhenRequiredField";
		   settings.ShowModelErrors = true;
	   }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().LabelFor(m => m.exitTimeProductionBuilding, settings =>
            {
                settings.Name = "exitTimeProductionBuildingLabel";
                settings.Text = "Hora:";
                settings.ControlStyle.Font.Bold = true;
                settings.AssociatedControlName = "exitTimeProductionBuildingLabel";
            }).GetHtml()
        </td>
        <td>
            @{
                TimeSpan? exitTimeProductionBuilding = (Model != null) ? (TimeSpan?)Model.exitTimeProductionBuilding : null;
            }

            @Html.DevExpress().TimeEdit(settings =>
        {
            settings.Name = "exitTimeProductionBuilding";
            settings.Properties.ClientInstanceName = "exitTimeProductionBuilding";

            settings.Properties.EditFormat = EditFormat.Time;
            settings.Properties.EditFormatString = "HH:mm";
            settings.Properties.DisplayFormatString = "HH:mm";
            settings.Width = Unit.Percentage(100);
            if (exitTimeProductionBuilding != null)
            {
                settings.DateTime = new DateTime(2018, 1, 1, exitTimeProductionBuilding.Value.Hours, exitTimeProductionBuilding.Value.Minutes, 0);
            }
            settings.ShowModelErrors = false;
            settings.CustomJSProperties = (s, e) =>
            {
                e.Properties["cpMessageError"] = "Campo Obligatorio.";
                e.Properties["cpIsRequired"] = "true";
                e.Properties["cpHasTab"] = "false";
            };
            settings.Properties.ClientSideEvents.Validation = "OnUpdateImagenWhenRequiredField";

        }).GetHtml()
        </td>
    </tr>
    <tr>
        <td>
            @Html.DevExpress().LabelFor(m => m.ObservationExit, settings =>
        {
            settings.Name = "ObservationExitLabel";
            settings.Text = "Observación:";
            settings.AssociatedControlName = "ObservationExitLabel";
        }).GetHtml()
        </td>
        <td colspan="5">
            @Html.DevExpress().TextBoxFor(m => m.ObservationExit, settings =>
        {
            settings.Name = "ObservationExit";
            settings.Properties.ClientInstanceName = "ObservationExit";
            settings.Width = Unit.Percentage(100);
            settings.ShowModelErrors = true;
        }).GetHtml()
        </td>
    </tr>
</table>

