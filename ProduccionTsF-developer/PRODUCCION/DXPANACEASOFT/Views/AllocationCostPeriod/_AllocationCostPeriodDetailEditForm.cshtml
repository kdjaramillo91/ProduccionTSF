@using DXPANACEASOFT.DataProviders

@model ProductionCostAllocationPeriodDetail

@{
	var accountingValue = (bool)this.ViewBag.AccountingValue;
	var idExecutionType = (int?)this.ViewBag.IdExecutionType;
}

@using (Html.BeginForm("", "", FormMethod.Post, new { id = "formEditAllocationCostPeriod", name = "formEditAllocationCostPeriod" }))
{
	@Html.Hidden("idAllocationCostPeriodDetail", this.Model.id)

	<table id="allocationCostPeriodTable" class="table table-condensed">
		<tr>
			<td width="10%">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "id_productionCostLabel";
						label.Text = "Costos:*";
						label.AssociatedControlName = "id_productionCost";
					}).GetHtml()
			</td>
			<td width="39%">
				@{
					var id_productionCost = (this.Model.id_productionCost > 0)
						? (int?)this.Model.id_productionCost
						: null;

					var productionCostsAllModel = (List<ProductionCost>)DataProviderProductionCost.ProductionCostByCurrent(id_productionCost);

					var productionCostsModel = productionCostsAllModel
						.Where(p => (p.id_executionType == idExecutionType)
							|| (id_productionCost == p.id))
						.ToArray();
				}
				@Html.DevExpress().ComboBox(
					comboBox =>
					{
						comboBox.Name = "id_productionCost";
						comboBox.Properties.ClientInstanceName = "id_productionCost";
						comboBox.Width = Unit.Percentage(100);

						comboBox.Properties.ValueField = "id";
						comboBox.Properties.TextField = "name";
						comboBox.Properties.ValueType = typeof(int);

						comboBox.Properties.DropDownStyle = DropDownStyle.DropDownList;
						comboBox.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
						comboBox.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

						comboBox.ShowModelErrors = true;
						comboBox.ReadOnly = accountingValue;

						comboBox.CustomJSProperties = (s, e) =>
						{
							e.Properties["cpProductionCosts"] = productionCostsAllModel
								.Select(p => new
								{
									p.id,
									p.code,
									p.name,
									p.id_executionType,
								})
								.ToArray();
						};

						comboBox.Properties.ClientSideEvents.SelectedIndexChanged = "OnProductionCostSelectedIndexChanged";
						comboBox.Properties.ClientSideEvents.Validation = "OnProductionCostValidation";

					}).BindList(productionCostsModel).Bind(id_productionCost).GetHtml()
			</td>
			<td width="2%"></td>
			<td width="10%">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "id_productionCostDetailLabel";
						label.Text = "Subcostos:*";
						label.AssociatedControlName = "id_productionCostDetail";
					}).GetHtml()
			</td>
			<td width="39%">
				@{
					var id_productionCostDetail = (this.Model.id_productionCostDetail > 0)
						? (int?)this.Model.id_productionCostDetail
						: null;

					var productionCostDetailsAllModel = new List<ProductionCostDetail>();

					productionCostsAllModel.ForEach(p =>
					{
						productionCostDetailsAllModel.AddRange(p.ProductionCostDetails
							.Where(d => d.isActive || d.id == id_productionCostDetail)
							.OrderBy(d => d.order).ThenBy(d => d.code));
					});

					var productionCostDetailsModel = productionCostDetailsAllModel
						.Where(d => (id_productionCost == d.id_productionCost)
							|| (id_productionCost == d.id))
						.ToArray();
				}
				@Html.DevExpress().ComboBox(
					comboBox =>
					{
						comboBox.Name = "id_productionCostDetail";
						comboBox.Properties.ClientInstanceName = "id_productionCostDetail";
						comboBox.Width = Unit.Percentage(100);

						comboBox.Properties.ValueField = "id";
						comboBox.Properties.TextField = "name";
						comboBox.Properties.ValueType = typeof(int);

						comboBox.Properties.DropDownStyle = DropDownStyle.DropDownList;
						comboBox.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
						comboBox.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

						comboBox.ShowModelErrors = true;
						comboBox.ReadOnly = accountingValue;

						comboBox.CustomJSProperties = (s, e) =>
						{
							e.Properties["cpProductionCostDetails"] = productionCostDetailsAllModel
								.Select(p => new
								{
									p.id,
									p.code,
									p.name,
									p.id_productionCost,
								})
								.ToArray();
						};

						comboBox.Properties.ClientSideEvents.Validation = "OnProductionCostDetailValidation";

					}).BindList(productionCostDetailsModel).Bind(id_productionCostDetail).GetHtml()
			</td>
		</tr>
		<tr>
			<td width="10%">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "id_productionPlantLabel";
						label.Text = "Planta Proceso:*";
						label.AssociatedControlName = "id_productionPlant";
					}).GetHtml()
			</td>
			<td width="39%">
				@{
					var id_productionPlant =
						(this.Model.id_productionPlant.HasValue && (this.Model.id_productionPlant.Value > 0))
						? (int?)this.Model.id_productionPlant
						: null;
				}
				@Html.DevExpress().ComboBox(
					comboBox =>
					{
						comboBox.Name = "id_productionPlant";
						comboBox.Properties.ClientInstanceName = "id_productionPlant";
						comboBox.Width = Unit.Percentage(100);
						comboBox.ClientEnabled = id_productionPlant.HasValue;

						comboBox.Properties.ValueField = "id";
						comboBox.Properties.TextField = "processPlant";
						comboBox.Properties.ValueType = typeof(int);

						comboBox.Properties.DropDownStyle = DropDownStyle.DropDownList;
						comboBox.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
						comboBox.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

						comboBox.ShowModelErrors = true;
						comboBox.ReadOnly = accountingValue;

						comboBox.Properties.ClientSideEvents.Validation = "OnProductionPlantDetailValidation";

					}).BindList(this.ViewBag.PlantasProceso).Bind(id_productionPlant).GetHtml()
			</td>
			<td width="2%"></td>
			<td width="10%">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "allProductionPlantsLabel";
						label.Text = "¿Todas las plantas?:";
						label.AssociatedControlName = "allProductionPlants";
					}).GetHtml()
			</td>
			<td width="39%">
				@Html.DevExpress().CheckBox(
					checkBox =>
					{
						checkBox.Name = "allProductionPlants";
						checkBox.Properties.ClientInstanceName = "allProductionPlants";
						checkBox.Width = Unit.Percentage(100);

						checkBox.Checked = !id_productionPlant.HasValue;
						checkBox.ReadOnly = accountingValue;

						checkBox.Properties.ClientSideEvents.CheckedChanged = "OnAllProductionPlantsCheckedChanged";
					}).GetHtml()
			</td>
		</tr>
		<tr>
			<td width="10%">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "coeficienteLabel";
						label.Text = "¿Coeficiente?:";
						label.AssociatedControlName = "coeficiente";
					}).GetHtml()
			</td>
			<td width="39%">
				@Html.DevExpress().CheckBoxFor(
					m => m.coeficiente,
					checkBox =>
					{
						checkBox.Name = "coeficiente";
						checkBox.Properties.ClientInstanceName = "coeficiente";
						checkBox.Width = Unit.Percentage(100);
					}).GetHtml()
			</td>
			<td width="2%"></td>
			<td width="10%">
				@Html.DevExpress().Label(
					label =>
					{
						label.Name = "valorLabel";
						label.Text = "Valor:*";
						label.AssociatedControlName = "valor";
					}).GetHtml()
			</td>
			<td width="39%">
				@Html.DevExpress().SpinEditFor(
					m => m.valor,
					spinEdit =>
					{
						spinEdit.Name = "valor";
						spinEdit.Properties.ClientInstanceName = "valor";
						spinEdit.Width = Unit.Percentage(100);
						spinEdit.ControlStyle.HorizontalAlign = HorizontalAlign.Right;

						var p = spinEdit.Properties;
						spinEdit.Properties.SpinButtons.ShowIncrementButtons = false;
						spinEdit.Properties.SpinButtons.ShowLargeIncrementButtons = false;
						spinEdit.Properties.MinValue = 0.00m;
						spinEdit.Properties.MaxValue = 1000000000.00m;
						spinEdit.Properties.NumberType = SpinEditNumberType.Float;
						spinEdit.Properties.NumberFormat = SpinEditNumberFormat.Number;
						spinEdit.Properties.DisplayFormatString = "N2";
						spinEdit.Properties.DecimalPlaces = 2;
						spinEdit.Properties.DisplayFormatInEditMode = true;

						spinEdit.ShowModelErrors = true;

						spinEdit.Properties.ClientSideEvents.Validation = "OnValorDetailValidation";

					}).GetHtml()
			</td>
		</tr>
		<tr>
			<td colspan="5" style="text-align: right;">
				@Html.DevExpress().Button(
					button =>
					{
						button.Name = "btnUpdateDetail";
						button.Text = "Actualizar";
						button.RenderMode = ButtonRenderMode.Button;
						button.ImagePosition = ImagePosition.Left;
						button.Images.Image.IconID = IconID.ActionsSave16x16devav;
						button.UseSubmitBehavior = false;
						button.ClientSideEvents.Click = "OnUpdateDetailButtonClick";
					}).GetHtml()

				@Html.DevExpress().Button(
					button =>
					{
						button.Name = "btnCancelDetail";
						button.Text = "Cancelar";
						button.RenderMode = ButtonRenderMode.Button;
						button.ImagePosition = ImagePosition.Left;
						button.Images.Image.IconID = IconID.ActionsClose16x16office2013;
						button.UseSubmitBehavior = false;
						button.ClientSideEvents.Click = "OnCancelDetailButtonClick";
					}).GetHtml()
			</td>
		</tr>
	</table>
}
