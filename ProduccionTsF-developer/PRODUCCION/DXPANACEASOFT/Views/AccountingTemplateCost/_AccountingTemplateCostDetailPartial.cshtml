@using System.Web.Mvc
@using System.Web.Mvc.Html
@using DevExpress.XtraReports.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.AccountLedger>

@{
	var grid = Html.DevExpress().GridView<AccountLedger>(settings =>

	{
		List<string> codigoCuentas = new List<string>();
		codigoCuentas = ViewBag.Key;

		settings.Name = "gvAccountingTemplateCostDetail";
		settings.CallbackRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostDetail" };

		settings.CustomActionRouteValues= new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostDetailChangePartial" };

		settings.ClientSideEvents.BeginCallback = "AccountingTemplateCostDetail_OnBeginCallback";

		settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostDetailAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostDetailUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostDetailDelete" };
		settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
		settings.SettingsBehavior.AllowFixedGroups = true;
		settings.SettingsBehavior.ConfirmDelete = true;

		settings.CommandColumn.Visible = true;
		settings.CommandColumn.ShowNewButton = false;
		settings.CommandColumn.ShowDeleteButton = true;
		settings.CommandColumn.ShowEditButton = true;
		settings.CommandColumn.ShowNewButtonInHeader = true;


		settings.SettingsPopup.EditForm.Modal = true;
		settings.SettingsPopup.EditForm.Width = 800;
		settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
		settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

		settings.Width = Unit.Percentage(100);

		settings.KeyFieldName = "id";

		settings.Settings.ShowGroupPanel = false;
		settings.Settings.ShowFilterRow = false;
		settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;


		settings.SettingsPager.Visible = true;
		settings.SettingsPager.PageSize = 9;

		#region SEARCH PANEL

		settings.SettingsSearchPanel.Visible = true;
		settings.Styles.SearchPanel.CssClass = "searchPanel";

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";
		#endregion

		settings.SettingsBehavior.AllowSelectByRowClick = true;

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;

		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		settings.CommandColumn.Width = Unit.Percentage(8);

		settings.Columns.Add(m => m.code, column =>
		{
			column.Caption = "Código";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;

			column.SetDataItemTemplateContent(c =>
			{
				string codigo = (string)DataBinder.Eval(c.DataItem, "code");
				var codCenter = DataProviderAccountingTemplate.AccountingTemplateCode(codigo);
				if (codCenter != null)
				{
					ViewContext.Writer.Write(codCenter.CCiCuenta);
				}
			});

			column.EditorProperties().ComboBox(p =>
			{

				p.ClientInstanceName = "code";
				p.DataSource = DataProviderAccountingTemplate.LoadCodeComboAccountingTemplate(codigoCuentas);
				p.ValueField = "CCiCuenta";

				p.TextFormatString = "{0} {1} {2}";
				p.ValueType = typeof(string);

				p.Columns.Add("CCiCuenta", "Código");
				p.Columns.Add("CCtTituloDetalle", "Tipo");
				p.Columns.Add("CDsCuenta", "Nombre");


				p.DropDownStyle = DropDownStyle.DropDownList;
				p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
				p.EnableSynchronization = DefaultBoolean.False;
				p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;


				p.ClientSideEvents.Init = "onCodeAccountLedgerInit";
				p.ClientSideEvents.SelectedIndexChanged = "ComboCodeAccounLedger_SelectedIndexChanged";
				p.ClientSideEvents.Validation = "OnCodeAccountValidation";

				p.Width = Unit.Percentage(100);

			});
		});


		settings.Columns.Add(m => m.typeCount, column =>
		{
			column.Caption = "Tipo";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.ReadOnly = true;

			column.EditorProperties().TextBox(p =>
			{
				p.ClientInstanceName = "typeCount";
				p.Width = Unit.Percentage(100);

			});

		});


		settings.Columns.Add(m => m.description, column =>
		{
			column.Caption = "Descripción";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.EditFormSettings.ColumnSpan = 2;
			column.ReadOnly = true;

			column.EditorProperties().TextBox(p =>
			{
				p.ClientInstanceName = "description";
				p.Width = Unit.Percentage(100);

			});
		});

		settings.Columns.Add(m => m.typeAuxiliar, column =>
		{
			column.Caption = "Tipo Auxiliar";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.Name = "typeAuxiliar";
			column.FieldName = "typeAuxiliar";
			column.EditFormCaptionStyle.Font.Size = 11;

			column.SetDataItemTemplateContent(c =>
			{
				string type_auxiliar = (string)DataBinder.Eval(c.DataItem, "typeAuxiliar");

				var objType_Auxiliar = DataProviderAccountingTemplate.AccountingTemplateTypeAuxiliar(type_auxiliar);
				if (objType_Auxiliar != null)
				{
					ViewContext.Writer.Write(objType_Auxiliar.CCiTipoAuxiliar + " - " + objType_Auxiliar.CDsTipoAuxiliar);
				}
			});

			column.EditorProperties().ComboBox(p =>
			{
				column.SetEditItemTemplateContent(c =>
				{
					var dbi = new AccountLedger();
					if (c.ItemIndex >= 0)
					{
						dbi = Model[c.ItemIndex];
					}
					Html.RenderPartial("_ComboBoxAcountingTemplateTypeAuxiliar", dbi);
				});
			});
		});

		settings.Columns.Add(m => m.id_auxiliary,column =>
		{
			column.Caption = "Nombre Auxiliar";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.Name = "id_auxiliary";
			column.FieldName = "id_auxiliary";
			column.EditFormCaptionStyle.Font.Size = 11;

			column.SetDataItemTemplateContent(c =>
			{
				string id_auxiliar = (string)DataBinder.Eval(c.DataItem, "id_auxiliary");

				var codCenter = DataProviderAccountingTemplate.AccountingTemplateAuxiliar(id_auxiliar);
				if (codCenter != null)
				{
					ViewContext.Writer.Write(codCenter.CCiAuxiliar + " - "+ codCenter.CDsAuxiliar);
				}
			});

			column.EditorProperties().ComboBox(p =>
			{
				column.SetEditItemTemplateContent(c =>
				{
					var dbi = new AccountLedger();
					if (c.ItemIndex >= 0)
					{
						dbi = Model[c.ItemIndex];
					}
					Html.RenderPartial("_ComboBoxAcountingTemplate", dbi);
				});
			});
		});

		//settings.Columns.Add(m => m.id_auxiliary, column =>
		//{
		//	column.Caption = "Código Auxiliar";
		//	column.ColumnType = MVCxGridViewColumnType.ComboBox;
		//	column.ReadOnly = true;
		//	column.Visible = false;
		//	column.EditorProperties().TextBox(p =>
		//	{
		//		p.ClientInstanceName = "codeAuxiliar";
		//		p.Width = Unit.Percentage(100);
		//	});
		//});

		settings.Columns.Add(m => m.nameCenterCost, column =>
		{
			column.Caption = "Centro de Costo";
			column.Name = "nameCenterCost";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.EditFormCaptionStyle.Font.Size = 11;

			column.SetDataItemTemplateContent(c =>
			{
				string id_centerCost = (string)DataBinder.Eval(c.DataItem, "nameCenterCost");
				string str_id_centerCost = id_centerCost != null ? id_centerCost.ToString() : "";
				var codCenter = DataProviderAccountingTemplate.AccountingTemplateCenterCostById(str_id_centerCost);
				if (codCenter != null)
				{
					ViewContext.Writer.Write(codCenter.CCiProyecto + " - " + codCenter.CDsProyecto);
				}
			});

			column.EditorProperties().ComboBox(p =>
			{
				column.SetEditItemTemplateContent(c =>
				{
					var dbcost = new AccountLedger();
					if (c.ItemIndex >= 0)
					{
						dbcost = Model[c.ItemIndex];
					}
					Html.RenderPartial("_ComboBoxAcountingTemplateCenterCost", dbcost);
				});
			});

		});

		//settings.Columns.Add(m => m.id_costCenter, column =>
		//{
		//	column.Caption = "Código C/C";
		//	column.ColumnType = MVCxGridViewColumnType.ComboBox;
		//	column.ReadOnly = true;
		//	column.Visible = false;
		//	column.EditorProperties().TextBox(p =>
		//	{
		//		p.ClientInstanceName = "codeCenterCost";
		//		p.Width = Unit.Percentage(100);
		//	});
		//});

		settings.Columns.Add(m => m.nameSubCenterCost, column =>
		{
			column.Caption = "SubCentro de Costo";
			column.Name = "nameSubCenterCost";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.EditFormCaptionStyle.Font.Size = 11;

			column.SetDataItemTemplateContent(c =>
			{
				string id_costcenter = (string)DataBinder.Eval(c.DataItem, "nameCenterCost");
				string id_subcostcenter = (string)DataBinder.Eval(c.DataItem, "nameSubCenterCost");
				string str_id_centerCost = id_costcenter != null ? id_costcenter.ToString() : "";
				string str_id_sub_centerCost = id_subcostcenter != null ? id_subcostcenter.ToString() : "";
				var codSubCenter = DataProviderAccountingTemplate.AccountingTemplateSubCenterCostById(str_id_centerCost, str_id_sub_centerCost);
				if (codSubCenter != null)
				{
					ViewContext.Writer.Write(codSubCenter.CCiSubProyecto + " - " + codSubCenter.CDsSubProyecto);
				}
			});

			column.EditorProperties().ComboBox(p =>
			{
				column.SetEditItemTemplateContent(c =>
				{
					var dbsubcost = new AccountLedger();
					if (c.ItemIndex >= 0)
					{
						dbsubcost = Model[c.ItemIndex];
					}
					Html.RenderPartial("_ComboBoxAcountingTemplateSubCenterCost", dbsubcost);
				});
			});

		});

		settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpIsNewRowEdit"] = gv.IsNewRowEditing;

			e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

			if (ViewData["EditMessage"] != null)
			{
				e.Properties["cpEditMessage"] = ViewData["EditMessage"];
			}

		};
	});

	if (ViewData["EditError"] != null)
	{
		grid.SetEditErrorText((string)ViewData["EditError"]);
	}
}
@grid.Bind(Model).GetHtml()