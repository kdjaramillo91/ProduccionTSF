@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@{
	var grid = Html.DevExpress().GridView<AccountingTemplate>(settings =>
	{


		settings.Name = "gvAccountingTemplateCost";
		settings.CallbackRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostPartial" };
		settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostPartialAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostPartialUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "AccountingTemplateCost", Action = "AccountingTemplateCostPartialDelete" };
		settings.CustomActionRouteValues = new { Controller = "AccountingTemplateCost", Action = "DeleteSelectedAccountingTemplateCost" };

		settings.KeyFieldName = "id";

		settings.Width = Unit.Percentage(100);


		#region GRIDVIEW BEHAIVOR

		settings.SettingsBehavior.AllowSelectByRowClick = true;

		settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
			e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

			if (ViewData["EditMessage"] != null)
			{
				e.Properties["cpEditMessage"] = ViewData["EditMessage"];
			}
		};


		#endregion

		#region EDITFORM

		settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
		settings.SettingsText.PopupEditFormCaption = "Editar Plantilla Contable";

		settings.SettingsPopup.EditForm.Modal = true;
		settings.SettingsPopup.EditForm.Width = 800;
		settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
		settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;


		settings.SettingsBehavior.ConfirmDelete = true;

		#endregion

		#region PAGER

		settings.SettingsPager.Visible = true;

		#endregion

		#region CLIENT SIDE EVENTS (JAVASCRIPT)

		settings.ClientSideEvents.Init = "OnGridViewInit";
		settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
		settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

		#endregion

		#region SEARCH PANEL

		settings.SettingsSearchPanel.Visible = true;
		settings.Styles.SearchPanel.CssClass = "searchPanel";

		#endregion

		#region TITLE PANEL

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";

		settings.SetTitlePanelTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Plantillas Contables de Costos de Producción</span>");
		});

		#endregion

		#region GROUP PANEL

		settings.Settings.ShowGroupPanel = true;

		#endregion

		#region FILTER ROW

		settings.Settings.ShowFilterRow = true;
		settings.Settings.ShowFilterRowMenu = true;
		settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

		#endregion

		#region FOOTER ROW

		settings.Settings.ShowFooter = true;

		settings.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
			if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			{
				ViewContext.Writer.Write(
					@"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""UnselectAllRows();"">Anular Selección</a>"
				);
			}
		});


		#endregion

		#region COMMAND COLUMN

		settings.CommandColumn.Visible = true;
		settings.CommandColumn.Width = Unit.Percentage(2);
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

		#endregion

		#region MASTER DETAILS VIEW

		settings.SettingsDetail.ShowDetailRow = false; // flechas de la deracha para visualizar el detalle
		settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;

		#endregion

		#region AUTOGENERATED

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		#endregion

		settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
		settings.Styles.Header.Font.Bold = true;

		#region Columns

		settings.Columns.Add(column =>
		{
			column.FieldName = "code";
			column.Name = "code";
			column.Caption = "Código Principal";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(8);

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_costProduction";
			column.Name = "id_costProduction";
			column.Caption = "Clasificación de Costos";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.Width = Unit.Percentage(15);

			column.SetDataItemTemplateContent(c =>
			{
				int? id_productionCostType = (int?)DataBinder.Eval(c.DataItem, "id_costProduction");
				ProductionCosts productionCostType = DataProviderProductionCost.ProductionCostTypeByIdOld(id_productionCostType);

				string name = (productionCostType != null) ? productionCostType.name : "";
				ViewContext.Writer.Write(name);
			});

			column.EditorProperties().ComboBox(comboBox =>
			{
				comboBox.DataSource = DataProviderProductionCost.ProductionCostTypeFilterOld((int)ViewData["id_company"]);
				comboBox.ValueField = "id";
				comboBox.TextField = "name";
				comboBox.ValueType = typeof(int);

				comboBox.DropDownStyle = DropDownStyle.DropDown;
				comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
			});

		});


		settings.Columns.Add(column =>
		{
			column.FieldName = "id_expenseProduction";
			column.Name = "id_expenseProduction";
			column.Caption = "Gastos";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.Width = Unit.Percentage(15);

			column.SetDataItemTemplateContent(c =>
			{
				int? id_productionExpense = (int?)DataBinder.Eval(c.DataItem, "id_expenseProduction");

				ProductionExpense productionExpense = DataProviderProductionExpense.ProductionExpenseById(id_productionExpense);

				string name = (productionExpense != null) ? productionExpense.name : "";
				ViewContext.Writer.Write(name);
			});

			column.EditorProperties().ComboBox(comboBox =>
			{
				comboBox.DataSource = DataProviderProductionExpense.ProductionExpenseTypeFilter((int)ViewData["id_company"]);
				comboBox.ValueField = "id";
				comboBox.TextField = "name";
				comboBox.ValueType = typeof(int);

				comboBox.DropDownStyle = DropDownStyle.DropDown;
				comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
			});
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_processPlant";
			column.Name = "id_processPlant";
			column.Caption = "Planta Proceso";
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			column.Width = Unit.Percentage(15);

			column.EditorProperties().ComboBox(comboBox =>
			{
				comboBox.DataSource = DataProviderPerson.GetPersonProcesPlant();
				comboBox.ValueField = "id";
				comboBox.TextField = "processPlant";
				comboBox.ValueType = typeof(int);

				comboBox.DropDownStyle = DropDownStyle.DropDown;
				comboBox.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
				comboBox.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
			});
		});


		settings.Columns.Add(column =>
		{
			column.FieldName = "isActive";
			column.Caption = "¿Activo?";
			column.Width = Unit.Percentage(3);
			column.ColumnType = MVCxGridViewColumnType.CheckBox;
		});

		if (ShowEditButton() || ShowDeleteButton())
		{
			MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
			{
				ShowEditButton = ShowEditButton(),
				ShowDeleteButton = false,
				Visible = true,
				VisibleIndex = 10,
				Width = Unit.Percentage(5),
				Caption = "Acciones"
			};

			if (ShowDeleteButton())
			{
				commandColumn.CustomButtons.Add(
					  new GridViewCommandColumnCustomButton
					  {
						  ID = "btnDeleteRow",
						  Text = "Eliminar"
					  }
				);
			}

			settings.ClientSideEvents.CustomButtonClick = "GridViewAccountingTemplateCostCustomCommandButton_Click";

			settings.Columns.Add(commandColumn);
		}


		/*  ver detalle */
		settings.SetDetailRowTemplateContent(column =>
		{
			int idaccountingTemplateCost = (int)DataBinder.Eval(column.DataItem, "id");
			AccountingTemplate transportTariffs = DataProviderAccountingTemplate.AccountingTemplateById(idaccountingTemplateCost);
		});

		#endregion

		#region EditorLayout
		/*  UUUUUU */
		settings.SetEditFormTemplateContent(content =>
		{
			int? id_accountingTemplateCost = (int?)DataBinder.Eval(content.DataItem, "id");
			AccountingTemplate accountingTemplate = (id_accountingTemplateCost != null) ? DataProviderAccountingTemplate.AccountingTemplateById((int)id_accountingTemplateCost) : new AccountingTemplate { isActive = true };
			Html.RenderPartial("_AccountingTemplateCostFormEditPartial", accountingTemplate);
		});

		#endregion

		settings.PreRender = (s, e) =>
		{
			MVCxGridView g = (s as MVCxGridView);
			if (g != null)
			{
				g.FilterExpression = "isActive = true";
			}
		};
	});

	if (ViewData["EditError"] != null)
	{
		grid.SetEditErrorText((string)ViewData["EditError"]);
	}


}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

    bool ShowEditButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(10));
    }

    bool ShowDeleteButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(8));
    }

}