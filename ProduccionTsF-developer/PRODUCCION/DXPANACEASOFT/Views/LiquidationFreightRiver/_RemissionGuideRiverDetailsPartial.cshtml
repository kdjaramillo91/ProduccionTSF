@using DevExpress.Data
@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
    string lableEnterprise = DataProviderSetting.ValueSetting("EEPRIM");
}
@{
    var grid = Html.DevExpress().GridView<RemissionGuideRiver>(settings =>
    {
        settings.Name = "gvRemissionGuideRiverDetails";
        settings.CallbackRouteValues = new { Controller = "LiquidationFreightRiver", Action = "RemissionGuideRiverDetailsPartial" };

        settings.Width = Unit.Percentage(100);
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(3);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.KeyFieldName = "id";

        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRowMenu = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.ClientSideEvents.Init = "OnGridViewRemissionGuideRiverDetailsInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewRemissionGuideRiverDetailsSelectionChanged";
        settings.ClientSideEvents.EndCallback = "OnGridViewRemissionGuideRiverDetailsEndCallback";

        settings.Toolbars.Add(t =>
        {
            t.EnableAdaptivity = true;
            t.Items.Add(GridViewToolbarCommand.ExportToXls).Text = "Exportar a Excel (2003)";
        });

//Panel para cantidad de registros
settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""GridViewRemissionGuideRiverDetailsSelectAllRow();"">Seleccionar Todos</a>
<a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""GridViewRemissionGuideRiverDetailsClearSelection();"">Anular Selección</a>"
                );
            }
        });

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;
        settings.Columns.Add(m => m.Document.number, column =>
        {
    // column.FieldName = "id_purchaseOrder";
    column.Caption = "No. Guia Remisión";
            column.Width = Unit.Percentage(8);
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
        settings.Columns.Add(m => m.Document.DocumentType.name, column =>
        {
            column.Caption = "Tipo de Documento";
            column.Width = Unit.Percentage(8);
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(m => m.Person1.processPlant, column =>
        {
            column.Caption = "Proceso";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(m => m.Provider.Person.fullname_businessName, column =>
        {
            column.Caption = "Proveedor";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(m => m.RemissionGuideRiverTransportation.DriverVeicleProviderTransport.VeicleProviderTransport.Person.fullname_businessName, column =>
        {
            column.Caption = "Cia. Transporte";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
        settings.Columns.Add(m => m.RemissionGuideRiverTransportation.VehicleProviderTransportBilling.Person.fullname_businessName, column =>
        {
            column.Name = "proveedor";
            column.Caption = "Cia Factura";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
//Logística Empresa
settings.Columns.Add(m => m.requiredLogistic, column =>
        {
            column.Name = "requiredLogistic";
            column.Caption = (lableEnterprise != "") ? "Logística " + lableEnterprise : "Logística Empresa";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
        });
        settings.Columns.Add(m => m.RemissionGuideRiverTransportation.Vehicle.carRegistration, column =>
        {

            column.Caption = "Placa";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
        settings.Columns.Add(m => m.RemissionGuideRiverTransportation.Vehicle.Person.fullname_businessName, column =>
        {

            column.Caption = "Dueño";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });
        settings.Columns.Add(m => m.RemissionGuideRiverTransportation.valuePrice, column =>
        {
            column.Name = "valuePrice";
            column.Caption = "Valor de Flete";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.SetDataItemTemplateContent(c =>
            {
                decimal valuePrice = (decimal)DataBinder.Eval(c.DataItem, "RemissionGuideRiverTransportation.valuePrice");
                ViewContext.Writer.Write(valuePrice.ToString("N2"));
            });
        });
        settings.Columns.Add(m => m.despachureDate, column =>
        {

            column.Caption = "Fecha de Despacho";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;

            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            ((DateEditProperties)column.PropertiesEdit).DisplayFormatString = "dd/MM/yyyy";
            ((DateEditProperties)column.PropertiesEdit).EditFormatString = "dd/MM/yyyy";

        });
        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };
        DXPANACEASOFT.Helper.GridViewFeaturesHelper.SetupGlobalGridViewBehavior(settings);

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        string[] values = new string[] { "id" };
        foreach (var key in grid.GetCurrentPageRowValues(values))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}
