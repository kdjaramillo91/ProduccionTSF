@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models.Dto

@model DXPANACEASOFT.Models.Dto.CostAllocationDto

@{
    string codeState = (Model != null) ? Model.Document.DocumentState.code : "";
}

<table id="documentCostAllocation" class="table table-condensed" style="margin: 0px;">
    <tr style="border-bottom: 1px Solid #C0C0C0;">
        <td colspan="5">
            <span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Asignación de Costo</span>
        </td>
    </tr>

    <tr>
        <td >
            @Html.DevExpress().LabelFor(m => m.anio, settings =>
       {

           settings.Text = "Año:";
           settings.AssociatedControlName = "anio";
       }).GetHtml()
        </td>
        <td >
            @Html.DevExpress().SpinEditFor(m => m.anio, settings =>
       {
           settings.Name = "anio";
           settings.Properties.ClientInstanceName = "anio";
           settings.Width = Unit.Percentage(50);
           settings.Properties.ClientSideEvents.Validation = "OnValidate_Anio";
           settings.Properties.ClientSideEvents.ValueChanged = "OnValueChange_Anio";
           settings.ShowModelErrors = true;
           //settings.Properties.DisplayFormatString = "N0";
           //settings.Properties.DisplayFormatInEditMode = true;
           settings.Properties.DecimalPlaces = 0;

           settings.Properties.NumberType = SpinEditNumberType.Integer;
           settings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
           settings.Properties.ButtonStyle.HorizontalAlign =  HorizontalAlign.Right;
           settings.ReadOnly = Model.IsCalculate;
           settings.Properties.MinValue = 2010;
           settings.Properties.MaxValue = 2100;


       }).GetHtml()
        </td>
        <td >
            @Html.DevExpress().LabelFor(m => m.mes, settings =>
       {
           settings.Text = "Mes:";
           settings.AssociatedControlName = "mes";
       }).GetHtml()
        </td>
        <td >
            @Html.DevExpress().SpinEditFor(m => m.mes, settings =>
       {
           settings.Name = "mes";
           settings.Properties.ClientInstanceName = "mes";
           settings.Width = Unit.Percentage(50);
           settings.Properties.ClientSideEvents.Validation = "OnValidate_Mes";
           settings.Properties.ClientSideEvents.ValueChanged = "OnValueChange_Mes";
           settings.ShowModelErrors = true;
           settings.Properties.DisplayFormatString = "N0";
           settings.Properties.DisplayFormatInEditMode = true;
           settings.Properties.DecimalPlaces = 0;
           settings.Properties.MinValue = 0;
           settings.Properties.NumberType = SpinEditNumberType.Integer;
           settings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
           settings.Properties.ButtonStyle.HorizontalAlign = HorizontalAlign.Right;
           settings.ReadOnly = Model.IsCalculate;
           settings.Properties.MinValue = 0;
           settings.Properties.MaxValue =12;

       }).GetHtml()
        </td>
        <td></td>
    </tr>
    <tr>
        <td >
            @Html.DevExpress().Label(settings =>
       {
           settings.Name = "warehouseLabel";
           settings.Text = "Bodega(s):";
       }).GetHtml()
        </td>
        <td colspan="4" style="width:100%">
            @{
                Html.RenderPartial("_CostAllocationWarehouseToken", Model);
            }
            @{
                /*
                int? id_Warehouse = (Model != null && Model.id_Warehouse != 0) ? (int?)Model.id_Warehouse : null;
                */
            }
            @*
            @Html.DevExpress().ComboBox(settings =>
            {
                settings.Name = "id_Warehouse";
                settings.Width = Unit.Percentage(100);
                settings.Properties.ValueField = "id";
                settings.Properties.TextField = "name";
                settings.Properties.ValueType = typeof(int);
                settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                settings.Properties.EnableSynchronization = DefaultBoolean.False;
                settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                settings.ClientEnabled = (codeState == "01");
                settings.ReadOnly = Model.IsCalculate;
                //settings.ReadOnly = (code == "34");

                settings.ShowModelErrors = true;

                settings.Properties.ClientSideEvents.SelectedIndexChanged = "OnSelectedIndexChanged_Warehouse";
                settings.Properties.ClientSideEvents.Validation = "OnValidate_Warehouse";
            }).BindList(DataProviderWarehouse.FreezerWarehousebyCompanyParameter((int)ViewData["id_company"])).Bind(id_Warehouse).GetHtml()
            *@
        </td>

    </tr>

    <tr>
        <td style="text-align: right;" colspan="5">
            @{

                Html.DevExpress().Button(button =>
                {
                    button.Name = "btnObtenerCostAllocation";
                    button.Text = "Obtener Movimientos";
                    button.RenderMode = ButtonRenderMode.Button;
                    button.ImagePosition = ImagePosition.Left;
                    button.Images.Image.IconID = IconID.SpreadsheetCreatefromselection16x16;
                    button.UseSubmitBehavior = false;
                    button.ClientVisible = true;
                    button.ClientSideEvents.Click = "onObtener_CostAllocation";
                        //button.ClientEnabled = (bool)ViewBag.enabled;
                    }).Render();
            }
        </td>

    </tr>

</table>