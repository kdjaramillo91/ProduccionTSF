@using System.Globalization
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@model DXPANACEASOFT.Models.CategoryCustomerType

@{
    int id_CategoryCustomerType = (Model != null) ? Model.id : 0;
}


@{
    if (ViewData["EditMessage"] != null)
    {
        @Html.Raw(ViewData["EditMessage"]);
    }

    @Html.Hidden("id_CategoryCustomerType", id_CategoryCustomerType)


    <div id="GridMessageError" style="display: none;">
      
    </div>
    <table class="table table-condenced" style="margin: 0px;">
        <tr style="border-bottom: 1px Solid #C0C0C0;">
            <td colspan="6">
                <span class="dxflGroupBoxCaption_Metropolis" style="left: 0px; padding-left: 0px; top: 0px;">Información</span>
            </td>
        </tr>

        <tr>
     
            <td>
                @Html.DevExpress().LabelFor(m => m.id_Category, settings =>
            {
                settings.Name = "id_CategoryLabel";
                settings.Text = "Categoría:";
                settings.AssociatedControlName = "id_Category";
            }).GetHtml()


            </td>
            <td>
                @{
                    int? id_Category = (Model != null && Model.id_Category != 0) ? (int?)Model.id_Category : null;
                }
                @Html.DevExpress().ComboBoxFor(m => m.id_Category, settings =>
            {
                settings.Name = "id_Category";
                settings.Properties.ClientInstanceName = "id_Category";
                settings.Properties.ValueField = "id";
                settings.Properties.TextField = "name";
                settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                settings.Properties.ValueType = typeof(int);
                settings.Properties.Columns.Add("name", "Nombre", 200);
                settings.Width = Unit.Percentage(50);
                settings.Height = Unit.Percentage(50);
                settings.Properties.EnableClientSideAPI = true;
                settings.Properties.CallbackPageSize = 20;
              
                settings.ShowModelErrors = true;
                settings.Properties.ClientSideEvents.Validation = "OnCategory";

            }).BindList(DataProviderClientCategory.ClientCategoryAll((int?)id_Category)).Bind(id_Category).GetHtml()

            </td>
            <!-- FECHA FIn-->
            <td>
                @Html.DevExpress().LabelFor(m => m.id_CustomerType, settings =>
            {
                settings.Name = "id_CustomerTypeLabel";
                settings.Text = "Tipo de CLiente:";
                settings.AssociatedControlName = "id_CustomerType";
            }).GetHtml()
            </td>
            <td>
                @{
                    int? id_CustomerType = (Model != null && Model.id_CustomerType != 0) ? (int?)Model.id_CustomerType : null;
                }
                @Html.DevExpress().ComboBoxFor(m => m.id_CustomerType, settings =>
           {
               settings.Name = "id_CustomerType";
               settings.Properties.ClientInstanceName = "id_CustomerType";
               settings.Properties.ValueField = "id";
               settings.Properties.TextField = "name";
               settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
               settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
               settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
               settings.Properties.ValueType = typeof(int);
               settings.Properties.Columns.Add("name", "Nombre", 200);
               settings.Width = Unit.Percentage(50);
               settings.Height = Unit.Percentage(50);
               settings.Properties.EnableClientSideAPI = true;
               settings.Properties.CallbackPageSize = 20;

               settings.ShowModelErrors = true;
               settings.Properties.ClientSideEvents.Validation = "OnCustomerType";

           }).BindList(DataProviderCustomerType.CustomerTypeAll((int?)id_CustomerType)).Bind(id_CustomerType).GetHtml()
            </td>

        </tr>
        
        <tr></tr>

    </table>

    <table class="table table-condensed">
        <tr style="border-top: 1px Solid #C0C0C0;">
            <td colspan="6" style="text-align: right; margin-top: 5px;">
                @{
                    Html.DevExpress().Button(button =>
                    {

                        button.Name = "btnUpdate";
                        button.Text = "Actualizar";
                        button.RenderMode = ButtonRenderMode.Button;
                        button.ImagePosition = ImagePosition.Left;
                        button.Images.Image.IconID = IconID.ActionsSave16x16devav;
                        button.UseSubmitBehavior = false;
                        button.ValidateInvisibleEditors = true;
                        button.ClientSideEvents.Click = "ButtonUpdate_Click";
               
                    }).Render();

                    ViewContext.Writer.Write("&nbsp;&nbsp;");

                    Html.DevExpress().Button(button =>
                    {
                        button.Name = "btnClose";
                        button.Text = "Cerrar";
                        button.RenderMode = ButtonRenderMode.Button;
                        button.ImagePosition = ImagePosition.Left;
                        button.Images.Image.IconID = IconID.ActionsClose16x16office2013;
                        button.UseSubmitBehavior = false;
                        button.ClientSideEvents.Click = "ButtonCancel_Click";
                    }).Render();
                }
            </td>
        </tr>
    </table>
}

<script src="~/Scripts/categoryCustomerType/editform.js"></script>

<script src="~/Scripts/categoryCustomerType/validations.js"></script>