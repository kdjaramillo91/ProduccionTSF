
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@model DXPANACEASOFT.Models.RemissionGuideRiverTransportation

@{
    string codeState = (Model != null && Model.RemissionGuideRiver != null && Model.RemissionGuideRiver.Document.DocumentState.code != "") ? Model.RemissionGuideRiver.Document.DocumentState.code : "01";
}

<table class="table table-condenced" style="margin: 0px;">
    <!--ZONA Y SITIO-->
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "id_FishingZoneLabel";
                settings.Text = "Zona:";
                settings.AssociatedControlName = "id_FishingZoneLabel";
            }).GetHtml()
        </td>
        <td>
            @{
                int? id_FishingSiteRGR = (Model != null && Model.id_FishingSiteRGR != null && Model.id_FishingSiteRGR > 0) ? (int?)Model.id_FishingSiteRGR : null;
                int? id_FishingZoneRGR = null;
                if (id_FishingSiteRGR != null)
                {
                    var fsObj = DataProviderFishingSite.FishingSiteById(id_FishingSiteRGR);
                    if (fsObj != null) { id_FishingZoneRGR = fsObj.id_FishingZone; }
                }
            }
            @Html.DevExpress().ComboBoxFor(m => m.id_FishingZoneRGRNew, settings =>
            {
                settings.Name = "id_FishingZoneRGRNew";
                settings.Properties.ClientInstanceName = "id_FishingZoneRGRNew";
                settings.Width = Unit.Percentage(100);
                settings.Properties.ValueField = "id";
                settings.Properties.TextField = "name";
                settings.Properties.ValueType = typeof(int);
                settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
                settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                settings.Properties.EnableSynchronization = DefaultBoolean.False;
                settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                settings.ReadOnly = codeState != "01";
                settings.ShowModelErrors = true;
                settings.Properties.ClientSideEvents.BeginCallback = "OnFishingZoneRGRBeginCallback";
                settings.Properties.ClientSideEvents.SelectedIndexChanged = "FishingZoneRGR_SelectedIndexChanged";

            }).BindList(DataProviderFishingZone.FishingZone((int?)ViewData["id_company"])).Bind(id_FishingZoneRGR).GetHtml()
        </td>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Name = "id_FishingSiteLabel";
                settings.Text = "Sitio:";
                settings.AssociatedControlName = "id_FishingSiteLabel";
            }).GetHtml()
        </td>
        <td>
            @{
                Html.RenderPartial("comboboxcascading/_ComboBoxFishingSite");

            }
        </td>
    </tr>    
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
        {
            settings.Text = "Tipo de Tarifario: ";
            settings.AssociatedControlName = "id_TransportTariffType";
        }).GetHtml()
        </td>
        <td>
            @{
                var remissionGuideRiver = Model.RemissionGuideRiver ?? new RemissionGuideRiver(); ;
                Html.RenderPartial("comboboxcascading/_cmbTransportTariffTypePartial", remissionGuideRiver);
            }
        </td>
       
        <td style="width: 10%">
            @Html.DevExpress().Label(settings =>
       {
           settings.Name = "providerLabel";
           settings.Properties.ClientInstanceName = "providerLabel";
           settings.Text = "Compañia de Transporte: ";
           settings.AssociatedControlName = "id_provider";
           // settings.ClientVisible = Model.isOwn;
       }).GetHtml()
        </td>
        <td colspan="5">
            @{
                var id_provider = (Model != null && Model.id_provider != 0) ? Model.id_provider : null;
            }
            @Html.DevExpress().ComboBoxFor(m => m.id_provider, settings =>
       {
           settings.Properties.ClientInstanceName = "id_provider";
           settings.Name = "id_provider";

           settings.Properties.ValueField = "id";
           settings.Properties.TextField = "name";
           settings.Properties.ValueType = typeof(int);

           settings.Properties.DropDownStyle = DropDownStyle.DropDownList;
           settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
           settings.Width = Unit.Percentage(100);
           
           settings.Properties.EnableSynchronization = DefaultBoolean.False;
           settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
           settings.Properties.ValidationSettings.ValidationGroup = "tabTransportation";
           settings.ShowModelErrors = true;
           settings.Properties.ClientSideEvents.Validation = "OnProviderValidation";
           settings.ClientEnabled = false;

       }).BindList(DataProviderPerson.PersonsTransportist((int?)ViewData["id_company"])).Bind(id_provider).GetHtml()
        </td>

    </tr>
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Transporte: ";
                settings.AssociatedControlName = "id_vehicle";
            }).GetHtml()
        </td>
        <td>
            @{ Html.RenderPartial("comboboxcascading/_cmbVehiclePartial", Model); }
        </td>
        <td >
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Marca:";
                settings.AssociatedControlName = "mark";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.Vehicle.mark, settings =>
            {
                settings.Properties.ClientInstanceName = "mark";
                settings.Name = "mark";
                settings.Width = Unit.Percentage(100);
                settings.ReadOnly = true;
            }).GetHtml()
        </td>
        <td>
        <!--<td style="width: 10%">-->
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Modelo:";
                settings.AssociatedControlName = "model";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().TextBoxFor(m => m.Vehicle.model, settings =>
            {
                settings.Properties.ClientInstanceName = "model";
                settings.Name = "model";
                settings.Width = Unit.Percentage(100);
                settings.ReadOnly = true;
            }).GetHtml()
        </td>
    </tr>
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Chofer: ";
                settings.AssociatedControlName = "id_driver";
            }).GetHtml()
        </td>
        <td>
            @{
                var id_driver = (Model != null && Model.id_driver != 0) ? Model.id_driver : null;
                var driverName = (Model != null) ? Model.driverName : "";
            }
            @Html.DevExpress().ComboBoxFor(m => m.id_driver, settings =>
       {
           settings.Properties.ClientInstanceName = "id_driver";
           settings.Name = "id_driver";
           settings.Properties.ValueField = "id";
           settings.Properties.TextField = "fullname_businessName";
           settings.Properties.ValueType = typeof(string);
           settings.Properties.AllowUserInput = true;
           settings.Properties.DropDownStyle = DropDownStyle.DropDown;
           settings.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
           settings.Width = Unit.Percentage(100);
           settings.Properties.EnableSynchronization = DefaultBoolean.False;
           settings.Properties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
           settings.Properties.ValidationSettings.ValidationGroup = "tabTransportation";
           settings.ReadOnly = codeState != "01";
           settings.ShowModelErrors = true;
           settings.Properties.ClientSideEvents.Validation = "OnDriverValidation";
       }).BindList(DataProviderPerson.Driver()).Bind((id_driver != null) ? id_driver.ToString() : driverName).GetHtml()
      </td>
        <td style="width: 10%">
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Valor Flete:";
                settings.AssociatedControlName = "valuePrice";
            }).GetHtml()
        </td>
        <td>
            @Html.DevExpress().SpinEditFor(m => m.valuePrice, settings =>
       {
           settings.Name = "valuePrice";
           settings.Properties.ClientInstanceName = "valuePrice";
           settings.Width = Unit.Percentage(100);
           settings.Properties.NumberType = SpinEditNumberType.Float;
           settings.Properties.DecimalPlaces = 2;
           settings.Properties.AllowMouseWheel = true;
           settings.Properties.Increment = 0.1M;
           settings.Properties.LargeIncrement = 1;
           settings.Properties.SpinButtons.ShowLargeIncrementButtons = true;
           settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
           settings.ShowModelErrors = true;
           settings.ReadOnly = true;
           settings.Properties.ClientSideEvents.Validation = "OnValuePriceValidation";
       }).GetHtml()
        </td>

        <td style="width: 10%">
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Anticipo:";
                settings.AssociatedControlName = "advancePrice";
            }).GetHtml()
        </td>
        <td>

            @Html.DevExpress().SpinEditFor(m => m.advancePrice, settings =>
       {
           settings.Name = "advancePrice";
           settings.Properties.ClientInstanceName = "advancePrice";
           settings.Width = Unit.Percentage(100);
           settings.Properties.NumberType = SpinEditNumberType.Float;
           settings.Properties.DecimalPlaces = 2;
           settings.Properties.AllowMouseWheel = true;
           settings.Properties.Increment = 0.1M;
           settings.Properties.LargeIncrement = 1;
           settings.Properties.SpinButtons.ShowLargeIncrementButtons = true;
           settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
           settings.ShowModelErrors = true;
           settings.ReadOnly = codeState != "01";
           

       }).GetHtml()

    
        </td>
    </tr>
    <!--FILA 5 observacion-->
    <tr>
        <td>
            @Html.DevExpress().Label(settings =>
            {
                settings.Text = "Observación:";
                settings.AssociatedControlName = "ObservationTransLabel";
            }).GetHtml()
        </td>
        <td colspan="5">
            @Html.DevExpress().TextBoxFor(m => m.descriptionTrans, settings =>
            {
                settings.Properties.ClientInstanceName = "descriptionTrans";
                settings.Name = "descriptionTrans";
                settings.Width = Unit.Percentage(100);
                settings.Properties.MaxLength = 250;
            }).GetHtml()
        </td>
    </tr>
</table>

