@using System.Drawing
@using DevExpress.Data
@using DXPANACEASOFT.Models
@{
    var grid = Html.DevExpress().GridView<PurchaseOrderDetail>(settings => {
        settings.Name = "gvPurchaseOrdersDetails";
        settings.CallbackRouteValues = new { Controller = "InventoryMove", Action = "PurchaseOrdersDetailsPartial" };

        settings.Width = Unit.Percentage(100);

        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = false;
        settings.CommandColumn.ShowEditButton = false;
        settings.CommandColumn.Width = Unit.Percentage(3);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        #region SearchPanel

        //Panel de Busqueda
        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        #endregion

        settings.Settings.ShowFooter = true;

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""GridViewPurchaseOrdersDetailsSelectAllRow();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""GridViewPurchaseOrdersDetailsClearSelection();"">Anular Selección</a>"
                );
            }
        });

        settings.ClientSideEvents.Init = "OnGridViewPurchaseOrdersDetailsInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewPurchaseOrdersDetailsSelectionChanged";
        settings.ClientSideEvents.EndCallback = "OnGridViewPurchaseOrdersDetailsEndCallback";

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        settings.Columns.Add(m => m.id, column =>
        {
            column.FieldName = "id";
            column.Visible = false;
        });

        settings.Columns.Add(m => m.PurchaseOrder.Document.number, column =>
        {
            column.FieldName = "id_purchaseOrder";
            column.Caption = "No. Orden de Compra";
            column.Width = Unit.Percentage(8);
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                PurchaseOrderDetail detail = (PurchaseOrderDetail)Model[c.ItemIndex];
                ViewContext.Writer.Write(detail.PurchaseOrder.Document.number);
            });
        });

        settings.Columns.Add(m => m.Item.name, column =>
        {
            column.FieldName = "id_item";
            column.Caption = "Nombre del Producto";
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                PurchaseOrderDetail detail = (PurchaseOrderDetail)Model[c.ItemIndex];
                ViewContext.Writer.Write(detail.Item.name);
            });

        });

        settings.Columns.Add(column =>
        {
            column.Name = "quantityPending";
            column.Caption = "Cant. Pendiente de Recepción";
            column.Width = Unit.Percentage(5);
            column.UnboundType = UnboundColumnType.Decimal;
            column.PropertiesEdit.DisplayFormatString = "N2";

            column.SetDataItemTemplateContent(c =>
            {
                PurchaseOrderDetail detail = (PurchaseOrderDetail)Model[c.ItemIndex];
                decimal quantityPending = detail.quantityApproved - detail.quantityReceived;

                quantityPending = (quantityPending >= 0.0M) ? quantityPending : 0.0M;

                ViewContext.Writer.Write(quantityPending.ToString("N2"));
            });
        });

        settings.Columns.Add(column =>
        {
            column.Name = "id_metricUnitPurchase";
            column.Caption = "UM";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(3);
            //column.ReadOnly = true;
            //column.PropertiesEdit.ClientInstanceName = "metricUnit";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;


            column.SetDataItemTemplateContent(c =>
            {
                PurchaseOrderDetail detail = (PurchaseOrderDetail)Model[c.ItemIndex];
                string metricUnit = (detail.Item.ItemPurchaseInformation != null && detail.Item.ItemPurchaseInformation.MetricUnit != null) ? detail.Item.ItemPurchaseInformation.MetricUnit.code : "";
                //string metricUnit = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                ViewContext.Writer.Write(metricUnit);
            });

        });

        //settings.Columns.Add(column =>
        //{
        //    column.Name = "quantityPending";
        //    column.Caption = "Cantidad Pendiente de Recepción";
        //    column.Width = Unit.Percentage(5);
        //    column.UnboundType = UnboundColumnType.Decimal;
        //    column.ColumnType = MVCxGridViewColumnType.SpinEdit;

        //    column.CellStyle.HorizontalAlign = HorizontalAlign.Right;

        //    column.SetDataItemTemplateContent(c =>
        //    {
        //        PurchaseOrderDetail detail = (PurchaseOrderDetail)Model[c.ItemIndex];
        //        decimal quantityPending = detail.quantityApproved - detail.quantityReceived;

        //        quantityPending = (quantityPending >= 0.0M) ? quantityPending : 0.0M;

        //        ViewContext.Writer.Write(quantityPending.ToString("N2"));
        //    });

        //    column.EditorProperties().SpinEdit(p =>
        //    {
        //        p.DisplayFormatString = "N2";
        //        p.DisplayFormatInEditMode = true;
        //        p.DecimalPlaces = 2;
        //        p.SpinButtons.ShowIncrementButtons = true;
        //        p.SpinButtons.ShowLargeIncrementButtons = false;
        //        p.Increment = 0.01M;
        //        p.LargeIncrement = 1.0M;
        //        p.MinValue = 0;
        //        p.NumberType = SpinEditNumberType.Float;
        //        p.NumberFormat = SpinEditNumberFormat.Custom;
        //    });

        //});

        //settings.Columns.Add(m => m.Item.ItemInventory.minimumStock, column =>
        //{
        //    column.Name = "minimumStock";
        //    column.Caption = "Mínimo";
        //    column.Width = Unit.Percentage(5);
        //    column.ColumnType = MVCxGridViewColumnType.SpinEdit;

        //    column.EditorProperties().SpinEdit(p =>
        //    {
        //        p.DisplayFormatString = "N2";
        //        p.DisplayFormatInEditMode = true;
        //        p.DecimalPlaces = 2;
        //        p.SpinButtons.ShowIncrementButtons = true;
        //        p.SpinButtons.ShowLargeIncrementButtons = false;
        //        p.Increment = 0.01M;
        //        p.LargeIncrement = 1.0M;
        //        p.MinValue = 0;
        //        p.NumberType = SpinEditNumberType.Float;
        //        p.NumberFormat = SpinEditNumberFormat.Custom;
        //    });

        //});

        //settings.Columns.Add(m => m.Item.ItemInventory.currentStock, column =>
        //{
        //    column.Name = "currentStock";
        //    column.Caption = "Existencia";
        //    column.Width = Unit.Percentage(5);
        //    column.ColumnType = MVCxGridViewColumnType.SpinEdit;

        //    column.EditorProperties().SpinEdit(p =>
        //    {
        //        p.DisplayFormatString = "N2";
        //        p.DisplayFormatInEditMode = true;
        //        p.DecimalPlaces = 2;
        //        p.SpinButtons.ShowIncrementButtons = true;
        //        p.SpinButtons.ShowLargeIncrementButtons = false;
        //        p.Increment = 0.01M;
        //        p.LargeIncrement = 1.0M;
        //        p.MinValue = 0;
        //        p.NumberType = SpinEditNumberType.Float;
        //        p.NumberFormat = SpinEditNumberFormat.Custom;
        //    });
        //});

        //settings.Columns.Add(m => m.Item.ItemInventory.Warehouse.name, column =>
        //{
        //    column.Name = "id_warehouse";
        //    column.Caption = "Bodega";
        //    column.Width = Unit.Percentage(10);
        //    column.ColumnType = MVCxGridViewColumnType.TextBox;
        //});

        //settings.Columns.Add(m => m.Item.ItemInventory.WarehouseLocation.name, column =>
        //{
        //    column.Name = "id_warehouseLocation";
        //    column.Caption = "Ubicación";
        //    column.Width = Unit.Percentage(10);
        //    column.ColumnType = MVCxGridViewColumnType.TextBox;
        //});

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

}

