@using DXPANACEASOFT.Models
@model DXPANACEASOFT.Models.InventoryMove

@{
	int id_inventoryMove = (Model != null) ? Model.id : 0;
	string codeDocumentType = (Model != null && Model.Document != null && Model.Document.DocumentType != null) ? Model.Document.DocumentType.code : "";
	bool readOnlyCode = codeDocumentType != "03" && codeDocumentType != "04" && codeDocumentType != "34" && codeDocumentType != "32" &&
						codeDocumentType != "05" && codeDocumentType != "129";
	string codeState = (Model != null && Model.Document != null && Model.Document.DocumentState != null && Model.Document.DocumentState.code != "") ? Model.Document.DocumentState.code : "";
	string natureMove = (string)ViewData["_natureMove"];
	//bool tranferMove = (Model != null && Model.InventoryReason != null && Model.InventoryReason.isForTransfer != null) ? Model.InventoryReason.isForTransfer.Value : false;
	bool tranferMove = false;
	string customParamOP = (string)ViewData["_customParamOP"];
	string MessageError = "";
	string Message = "";
	bool withLotSystem = (ViewBag.withLotSystem != null) ? (bool)ViewBag.withLotSystem : false;
	bool withLotCustomer = (ViewBag.withLotCustomer != null) ? (bool)ViewBag.withLotCustomer : false;

}

@using (Html.BeginForm("", "", FormMethod.Post, new { id = "formEditInventoryMove", name = "formEditInventoryMove" }))
{
    <div id="infoInventoryMove">
        @{
            if (ViewData["EditMessage"] != null)
            {
                Message = (string)ViewData["EditMessage"];
            }

            if (ViewData["ErrorMessage"] != null)
            {
                MessageError = (string)ViewData["ErrorMessage"];
            }

        }
    </div>

    Html.RenderPartial("_GridMessage", Message);
    Html.RenderPartial("_GridMessageErrorIM", MessageError);

    @Html.Hidden("id_inventoryMove", id_inventoryMove)
    @Html.Hidden("codeDocumentType", codeDocumentType)
    @Html.Hidden("natureMoveIM", natureMove)
    @Html.Hidden("withLotSystem", withLotSystem)
    @Html.Hidden("withLotCustomer", withLotCustomer)
    @Html.Hidden("customParamOP", customParamOP)
    @Html.Hidden("MessageErr", MessageError)
    @Html.Hidden("Message", Message)
    @Html.Hidden("tranferMove", tranferMove)

    @Html.DevExpress().PageControl(tabs =>
	{
		//tabs.ClientSideEvents.TabClick = "OnIsSelectInventoryReason";
		tabs.ClientSideEvents.ActiveTabChanging = "OnIsSelectInventoryReasonValidate";

		tabs.Name = "tabControl";
		tabs.Width = Unit.Percentage(100);

		tabs.ClientSideEvents.Init = "OnInitPageControl";
		tabs.CustomJSProperties = (s, e) => {
			e.Properties["cpExistenRegistros"] = this.Model != null && this.Model.InventoryMoveDetail != null
				? this.Model.InventoryMoveDetail.Any() : false;
			e.Properties["cpCodeDocumentType"] = codeDocumentType;
		};

		tabs.TabPages.Add(tab =>
		{
			tab.Name = "tabDocument";
			tab.Text = "Documento    ";
			tab.TabStyle.Width = Unit.Percentage(100);

			tab.TabImage.Width = Unit.Pixel(16);
			tab.TabImage.Height = Unit.Pixel(16);
			tab.TabImage.Align = ImageAlign.Right;
			tab.TabImage.Url = "/Content/image/noimage.png";
			tab.ActiveTabImage.Align = ImageAlign.Right;
			tab.ActiveTabImage.Url = "/Content/image/noimage.png";

			tab.SetContent(() =>
			{
				var document = (Model != null && Model.Document != null) ? Model.Document : new Document();
				Html.RenderPartial("DocumentTemplates/_DocumentFormEditCutInventoryMove", document);
			});
		});
		tabs.TabPages.Add(tab =>
		{

			tab.Name = "tabInventoryMove";
			tab.Text = "Movimiento    ";
			tab.TabStyle.Width = Unit.Percentage(100);

			tab.TabImage.Width = Unit.Pixel(16);
			tab.TabImage.Height = Unit.Pixel(16);
			tab.TabImage.Align = ImageAlign.Right;
			tab.TabImage.Url = "/Content/image/noimage.png";
			tab.ActiveTabImage.Align = ImageAlign.Right;
			tab.ActiveTabImage.Url = "/Content/image/noimage.png";

			tab.SetContent(() =>
			{
				Html.RenderPartial("_InventoryMoveMainFormTabMove");
			});
		});
		tabs.TabPages.Add(tab =>
		{

			tab.Name = "tabDetails";
			tab.Text = "Detalles    ";

			tab.TabStyle.Width = Unit.Percentage(100);
			tab.TabImage.Width = Unit.Pixel(16);
			tab.TabImage.Height = Unit.Pixel(16);
			tab.TabImage.Align = ImageAlign.Right;
			tab.TabImage.Url = "/Content/image/noimage.png";
			tab.ActiveTabImage.Align = ImageAlign.Right;
			tab.ActiveTabImage.Url = "/Content/image/noimage.png";


			tab.SetContent(() =>
			{
				if (codeState == "01")
				{
					if(codeDocumentType.Equals("34"))
					{
						Html.RenderPartial("_InventoryMoveHeadFormDetailPartial");
					}

					Html.RenderPartial("_InventoryMoveMainFormTabDetails");
				}
				else
				{
					ViewData["code"] = (Model != null && Model.Document != null && Model.Document.DocumentType != null)
						? Model.Document.DocumentType.code : "";
					ViewData["id_inventoryMove"] = (Model != null) ? Model.id : 0;
					var details = (Model != null && Model.InventoryMoveDetail != null)
						? Model.InventoryMoveDetail.ToList()
						: new List<InventoryMoveDetail>();

					Html.RenderPartial("_InventoryMoveDetailsPartial", details);
				}

			});
		});

	}).GetHtml()

    <table class="table table-condensed">
        <tr style="border-top: 1px Solid #C0C0C0;">
            <td colspan="6" style="text-align: right">
                @{
                    Html.DevExpress().Button(button =>
                    {
                        button.Name = "btnUpdate";
                        button.Text = "Guardar";
                        button.RenderMode = ButtonRenderMode.Button;
                        button.ImagePosition = ImagePosition.Left;
                        button.Images.Image.IconID = IconID.ActionsSave16x16devav;
                        button.ClientEnabled = codeState == "01" && !readOnlyCode;//(id_inventoryMove == 0);
                            button.UseSubmitBehavior = false;
                        button.EnableClientSideAPI = true;
                        button.ClientSideEvents.Click = "ButtonUpdate_Click";
                    }).Render();

                    ViewContext.Writer.Write("&nbsp;&nbsp;");

                    Html.DevExpress().Button(button =>
                {
                    button.Name = "btnClose";
                    button.Text = "Cerrar";
                    button.RenderMode = ButtonRenderMode.Button;
                    button.ImagePosition = ImagePosition.Left;
                    button.Images.Image.IconID = IconID.ActionsClose16x16office2013;
                    button.ClientEnabled = true;
                    button.UseSubmitBehavior = false;
                    button.EnableClientSideAPI = true;
                    button.ClientSideEvents.Click = "ButtonClose_Click";
                }).Render();
                }
            </td>
        </tr>
    </table>
}

<script src="~/Scripts/inventorymove/editform.js"></script>
