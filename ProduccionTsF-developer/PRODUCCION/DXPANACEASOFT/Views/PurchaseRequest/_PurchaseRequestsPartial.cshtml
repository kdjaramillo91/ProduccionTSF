@using System.Drawing
@using DevExpress.CodeParser
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@{
    var grid = Html.DevExpress().GridView<PurchaseRequest>(settings => {
        settings.Name = "gvPurchaseRequests";
        settings.CallbackRouteValues = new { Controller = "PurchaseRequest", Action = "PurchaseRequestsPartial" };

        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;

        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Panel de Busqueda
        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        //Checkbox de registros de tabla
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.Width = Unit.Percentage(3);
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        //Eventos
        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";
        settings.ClientSideEvents.RowDblClick = "OnRowDoubleClick";


        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        //Pie de tabla
        settings.Settings.ShowFooter = true;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Requerimientos de Compras</span>");
        });

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""gvResultsSelectAllRows()"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""gvResultsClearSelection()"">Anular Selección</a>"
                );
            }
        });

        //Boton de filtro para las columnas de la tabla
        settings.Settings.ShowFilterRowMenu = true;

        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
        settings.SettingsDetail.ShowDetailRow = true;

        settings.SetDetailRowTemplateContent(column =>
        {
            int? id_purchaseRequest = (int?)DataBinder.Eval(column.DataItem, "id");
            PurchaseRequest request = DataProviderPurchaseRequest.PurchaseRequest(id_purchaseRequest);
            Html.RenderPartial("_PurchaseRequestDetailPartial", request);
        });

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        #region COLUMNS

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        //Document
        settings.Columns.Add(m => m.Document.number, column =>
        {
            column.Name = "number";
            column.Caption = "Número";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(12);
        });

        settings.Columns.Add(m => m.Document.emissionDate, column =>
        {
            column.Name = "emissionDate";
            column.Caption = "Fecha de Emisión";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Width = Unit.Percentage(12);

            column.EditorProperties().DateEdit(editorDate =>
            {
                editorDate.DisplayFormatInEditMode = true;
                editorDate.DisplayFormatString = "dd/MM/yyyy";
                editorDate.EditFormat = EditFormat.Custom;
                editorDate.EditFormatString = "dd/MM/yyyy";
            });
        });

        settings.Columns.Add(m => m.Document.EmissionPoint.name, column =>
        {
            column.Name = "emissionPoint";
            column.Caption = "Punto de Emisión";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(m => m.Employee.Person.fullname_businessName, column =>
        {
            column.Name = "personRequesting";
            column.Caption = "Solicitante";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(m => m.Employee.Department.name, column =>
        {
            column.Name = "employeeDepartment";
            column.Caption = "Departamento";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;
        });

        settings.Columns.Add(m => m.Document.DocumentState.name, column =>
        {
            column.Name = "documentState";
            column.Caption = "Estado";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(10);
            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        });

        //Botones de comandos para registros de la tabla
        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = false,
            ShowDeleteButton = false,
            Visible = true,
            VisibleIndex = 20,
            Caption = "Acciones",
            Width = Unit.Percentage(5)
        };
        commandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        commandColumn.AllowDragDrop = DefaultBoolean.False;
        commandColumn.CustomButtons.Add(
            new GridViewCommandColumnCustomButton
            {
                ID = "btnUpdatePurchaseRequest",
                Text = "Editar"
            }
        );
        settings.ClientSideEvents.CustomButtonClick = "OnClickUpdatePurchaseRequest";
        settings.Columns.Add(commandColumn);

        #endregion
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}