@using DevExpress.Data
@using DevExpress.Data.Helpers
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@model List<DXPANACEASOFT.Models.PurchaseRequestDetail>
    

@{
    var grid = Html.DevExpress().GridView<PurchaseRequestDetail>(settings =>
    {
        settings.Name = "gvPurchaseRequestEditFormDetail";
        settings.CallbackRouteValues = new { Controller = "PurchaseRequest", Action = "PurchaseRequestDetails" };

        //settings.ClientSideEvents.BeginCallback = "PurchaseRequestDetail_OnBeginCallback";

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "PurchaseRequest", Action = "PurchaseRequestDetailsAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "PurchaseRequest", Action = "PurchaseRequestDetailsUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "PurchaseRequest", Action = "PurchaseRequestDetailsDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.SettingsBehavior.ConfirmDelete = false;

        settings.Styles.Header.Wrap = DefaultBoolean.True;


        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Checkbox de registros de tabla
        settings.CommandColumn.Width = Unit.Percentage(2);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        //Eventos
        settings.ClientSideEvents.Init = "OnGridViewDetailsInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewDetailsSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnGridViewDetailsBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnGridViewDetailsEndCallback";

        //Pie de tabla
        settings.Settings.ShowFooter = true;

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);

            List<PurchaseRequestDetail> rows = (Model as List<PurchaseRequestDetail>);
            rows = (rows != null) ? rows.Where(d => d.isActive).ToList() : new List<PurchaseRequestDetail>();

            e.Properties["cpRowsCount"] = rows.Count;

            if (gv.IsEditing)
            {
                List<ProductionScheduleScheduleDetailPurchaseRequestDetail> ProductionSchedules = null;

                try
                {
                    ProductionSchedules = (List<ProductionScheduleScheduleDetailPurchaseRequestDetail>)gv.GetRowValues(gv.EditingRowVisibleIndex, "ProductionScheduleScheduleDetailPurchaseRequestDetail");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<ProductionScheduleScheduleDetailPurchaseRequestDetail> temp = (HashSet<ProductionScheduleScheduleDetailPurchaseRequestDetail>)gv.GetRowValues(gv.EditingRowVisibleIndex, "ProductionScheduleScheduleDetailPurchaseRequestDetail");
                        ProductionSchedules = temp.ToList();
                    }
                    catch (Exception)
                    {
                        ProductionSchedules = null;
                    }
                }
                if (ProductionSchedules != null && ProductionSchedules.Count > 0)
                {
                    e.Properties["cpEditingRowSaleProductionSchedule"] = ProductionSchedules[0].id_productionSchedule;
                }
                else
                {
                    e.Properties["cpEditingRowSaleProductionSchedule"] = 0;
                }

                List<PurchaseRequestDetailBusinessOportunity> purchaseRequestDetailBusinessOportunities = null;

                try
                {
                    purchaseRequestDetailBusinessOportunities = (List<PurchaseRequestDetailBusinessOportunity>)gv.GetRowValues(gv.EditingRowVisibleIndex, "PurchaseRequestDetailBusinessOportunity");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<PurchaseRequestDetailBusinessOportunity> temp = (HashSet<PurchaseRequestDetailBusinessOportunity>)gv.GetRowValues(gv.EditingRowVisibleIndex, "PurchaseRequestDetailBusinessOportunity");
                        purchaseRequestDetailBusinessOportunities = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseRequestDetailBusinessOportunities = null;
                    }
                }
                if (purchaseRequestDetailBusinessOportunities != null && purchaseRequestDetailBusinessOportunities.Count > 0)
                {
                    e.Properties["cpEditingRowBusinessOportunity"] = purchaseRequestDetailBusinessOportunities[0].id_businessOportunity;
                }
                else
                {
                    e.Properties["cpEditingRowBusinessOportunity"] = 0;
                }



            }
            e.Properties["cpEditingRowGramage"] = gv.EditingRowVisibleIndex == -1 ? -1 :gv.GetRowValues(gv.EditingRowVisibleIndex,"id_grammageTo");
            e.Properties["cpEditingRowGramagefrom"] = gv.EditingRowVisibleIndex == -1 ? -1 : gv.GetRowValues(gv.EditingRowVisibleIndex, "id_grammageFrom");

        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""gvEditDetailsSelectAllRows()"">Seleccionar Todos</a>
                    <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""gvEditDetailsClearSelection()"">Anular Selección</a>"
                );
            } 
        });

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SettingsEditing.ShowModelErrorsForEditors = true;

        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["currentStock"] = 0.0M;
            e.NewValues["minimumStock"] = 0.0M;
            e.NewValues["quantityRequested"] = 1.00M;
            e.NewValues["quantityApproved"] = 0.00M;
            e.NewValues["quantityOutstandingPurchase"] = 0.00M;
        };

        #region ColumnsAdd

        //id_businessOportunity
        settings.Columns.Add(column =>
        {
            column.Name = "id_businessOportunity";
            column.Caption = "Oportunidad de Compra";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.String;
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            //column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                List<PurchaseRequestDetailBusinessOportunity> purchaseRequestDetailBusinessOportunities = null;

                try
                {
                    purchaseRequestDetailBusinessOportunities = (List<PurchaseRequestDetailBusinessOportunity>)DataBinder.Eval(c.DataItem, "PurchaseRequestDetailBusinessOportunity");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<PurchaseRequestDetailBusinessOportunity> temp = (HashSet<PurchaseRequestDetailBusinessOportunity>)DataBinder.Eval(c.DataItem, "PurchaseRequestDetailBusinessOportunity");
                        purchaseRequestDetailBusinessOportunities = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseRequestDetailBusinessOportunities = null;
                    }
                }

                string text = string.Empty;

                if (purchaseRequestDetailBusinessOportunities != null && purchaseRequestDetailBusinessOportunities.Count > 0)
                {
                    int id_businessOportunity = purchaseRequestDetailBusinessOportunities[0].id_businessOportunity;
                    BusinessOportunity businessOportunity = DataProviderBusinessOportunity.BusinessOportunityById(id_businessOportunity);

                    text += businessOportunity.Document.number;

                    if (purchaseRequestDetailBusinessOportunities[0].id_businessOportunityPlanningDetail == null || businessOportunity.Document.DocumentState.code != "03")//03 APROBADA
                    {
                        text = "<font color='red'>" + text + "</font>";
                    }
                    //text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);

            });

            column.SetEditItemTemplateContent(c =>
            {
                List<PurchaseRequestDetailBusinessOportunity> purchaseRequestDetailBusinessOportunities = null;

                try
                {
                    purchaseRequestDetailBusinessOportunities = (List<PurchaseRequestDetailBusinessOportunity>)DataBinder.Eval(c.DataItem, "PurchaseRequestDetailBusinessOportunity");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<PurchaseRequestDetailBusinessOportunity> temp = (HashSet<PurchaseRequestDetailBusinessOportunity>)DataBinder.Eval(c.DataItem, "PurchaseRequestDetailBusinessOportunity");
                        purchaseRequestDetailBusinessOportunities = temp.ToList();
                    }
                    catch (Exception)
                    {
                        purchaseRequestDetailBusinessOportunities = null;
                    }
                }

                string text = string.Empty;

                if (purchaseRequestDetailBusinessOportunities != null && purchaseRequestDetailBusinessOportunities.Count > 0)
                {
                    int id_businessOportunity = purchaseRequestDetailBusinessOportunities[0].id_businessOportunity;
                    BusinessOportunity businessOportunity = DataProviderBusinessOportunity.BusinessOportunityById(id_businessOportunity);

                    text += businessOportunity.Document.number;

                    if (purchaseRequestDetailBusinessOportunities[0].id_businessOportunityPlanningDetail == null || businessOportunity.Document.DocumentState.code != "03")//03 APROBADA
                    {
                        text = "<font color='red'>" + text + "</font>";
                    }
                    //text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);
            });

        });

        //id_productionSchedule
        settings.Columns.Add(column =>
        {
            column.Name = "id_productionSchedule";
            column.Caption = "No. Programación de Producción";
            column.ReadOnly = true;
            column.UnboundType = UnboundColumnType.String;
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            //column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                List<ProductionScheduleScheduleDetailPurchaseRequestDetail> productionSchedules = null;

                try
                {
                    productionSchedules = (List<ProductionScheduleScheduleDetailPurchaseRequestDetail>)DataBinder.Eval(c.DataItem, "ProductionScheduleScheduleDetailPurchaseRequestDetail");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<ProductionScheduleScheduleDetailPurchaseRequestDetail> temp = (HashSet<ProductionScheduleScheduleDetailPurchaseRequestDetail>)DataBinder.Eval(c.DataItem, "ProductionScheduleScheduleDetailPurchaseRequestDetail");
                        productionSchedules = temp.ToList();
                    }
                    catch (Exception)
                    {
                        productionSchedules = null;
                    }
                }

                string text = string.Empty;

                if (productionSchedules != null && productionSchedules.Count > 0)
                {
                    int id_productionSchedule = productionSchedules[0].id_productionSchedule;
                    ProductionSchedule productionSchedule = DataProviderProductionSchedule.ProductionSchedule(id_productionSchedule);

                    text += productionSchedule.Document.number;

                    if (productionSchedules[0].id_productionScheduleScheduleDetail == null || productionSchedule.Document.DocumentState.code != "03")//03 APROBADA
                    {
                        text = "<font color='red'>" + text + "</font>";
                    }
                    //text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);

            });

            column.SetEditItemTemplateContent(c =>
            {
                List<ProductionScheduleScheduleDetailPurchaseRequestDetail> productionSchedules = null;

                try
                {
                    productionSchedules = (List<ProductionScheduleScheduleDetailPurchaseRequestDetail>)DataBinder.Eval(c.DataItem, "ProductionScheduleScheduleDetailPurchaseRequestDetail");
                }
                catch (Exception)
                {
                    try
                    {
                        HashSet<ProductionScheduleScheduleDetailPurchaseRequestDetail> temp = (HashSet<ProductionScheduleScheduleDetailPurchaseRequestDetail>)DataBinder.Eval(c.DataItem, "ProductionScheduleScheduleDetailPurchaseRequestDetail");
                        productionSchedules = temp.ToList();
                    }
                    catch (Exception)
                    {
                        productionSchedules = null;
                    }
                }

                string text = string.Empty;

                if (productionSchedules != null && productionSchedules.Count > 0)
                {
                    int id_productionSchedule = productionSchedules[0].id_productionSchedule;
                    ProductionSchedule productionSchedule = DataProviderProductionSchedule.ProductionSchedule(id_productionSchedule);

                    text += productionSchedule.Document.number;

                    if (productionSchedules[0].id_productionScheduleScheduleDetail == null || productionSchedule.Document.DocumentState.code != "03")//03 APROBADA
                    {
                        text = "<font color='red'>" + text + "</font>";
                    }
                    //text += (purchaseOrders.Count > 1) ? @"&nbsp<a href=""#"">+" + (purchaseOrders.Count - 1).ToString() + "</a>" : "";
                }

                ViewContext.Writer.Write(text);
            });

        });

        //masterCode
        settings.Columns.Add(column =>
        {
            column.Name = "masterCode";
            column.Caption = "Código";
            column.Width = Unit.Percentage(8);
            column.ReadOnly = true;
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.PropertiesEdit.ClientInstanceName = "masterCode";

            //column.Width = Unit.Percentage(5);
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id = (int)DataBinder.Eval(c.DataItem, "id_item");

                Item item = DataProviderItem.Item(id);
                if (item != null)
                {
                    ViewContext.Writer.Write(item.masterCode);
                }
            });

            column.SetEditItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string masterCode = (item != null) ? item.masterCode : "";

                Html.DevExpress().TextBox(textBox =>
                {
                    textBox.Name = "masterCode";
                    textBox.Properties.ClientInstanceName = "masterCode";
                    textBox.Width = Unit.Percentage(100);
                    textBox.ReadOnly = true;

                }).Bind(masterCode).Render();
            });
        });

        //id_item
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_item";
            column.Name = "id_item";
            column.Caption = "Nombre del Producto";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(33);

            column.SetDataItemTemplateContent(c =>
            {
                int? id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");

                Item item = DataProviderItem.Item(id_item);

                string name = (item != null) ? item.name : "";
                ViewContext.Writer.Write(name);
            });
            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_item";
                p.DataSource = DataProviderItem.AllPurchaseItemsByCompany((int?)ViewData["id_company"]);

                p.ValueField = "id";
                p.Width = Unit.Percentage(100);
                p.TextFormatString = "{1}";
                p.ValueType = typeof(int);

                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.Columns.Add("masterCode", "Código", 70);
                p.Columns.Add("name", "Nombre del Producto", 200);
                p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", 50);//

                p.ClientSideEvents.Init = "ItemCombo_OnInit";
                p.ClientSideEvents.SelectedIndexChanged = "ItemsCombo_SelectedIndexChanged";

                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

                p.ClientSideEvents.Validation = "OnItemValidation";
            });
        });
        //Item Color
        settings.Columns.Add(c => c.colorReference ,column =>
        {
            column.FieldName = "colorReference";
            column.Name = "colorReference";
            column.Caption = "Colores Referencia";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(10);

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "referenceColor";
                p.MaxLength = 200;
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });
        });

        //Gramaje Desde
        settings.Columns.Add(c => c.id_grammageFrom, column =>
        {
            column.FieldName = "id_grammageFrom";
            column.Name = "id_grammageFrom";
            column.Caption = "Gramaje Desde";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(17);

            column.SetDataItemTemplateContent(c =>
            {
                int? id_grammaje = (int?)DataBinder.Eval(c.DataItem, "id_grammageFrom");

                Grammage grammajeTmp = DataProviderGrammage.GrammageById(id_grammaje);

                string descriptionGrammaje = (grammajeTmp != null) ? grammajeTmp.description : "";
                ViewContext.Writer.Write(descriptionGrammaje);
            });
            column.EditorProperties().ComboBox(c =>
            {
                c.ClientInstanceName = "id_grammageFrom";
                c.DataSource = DataProviderGrammage.GrammagesByCompany((int?)ViewData["id_company"]);

                c.ValueField = "id";
                c.TextField = "name";
                c.ValueType = typeof(int);
                c.TextFormatString = "{1}";
                c.Width = Unit.Percentage(100);
                c.DropDownStyle = DropDownStyle.DropDownList;
                c.Columns.Add("code", "Código", 70);
                c.Columns.Add("description", "Gramaje", 100);
                c.Columns.Add("value", "Valor", 70);
                c.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                c.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                c.ClientSideEvents.Validation = "OnGrammageFromToValidation_selectedIndexChanged";
                c.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;

            });
        });
        //Gramaje Hasta
        settings.Columns.Add(c => c.id_grammageTo, column =>
        {
            column.FieldName = "id_grammageTo";
            column.Name = "id_grammageTo";
            column.Caption = "Gramaje Hasta";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(17);

            column.SetDataItemTemplateContent(c =>
            {
                int? id_grammajeTo = (int?)DataBinder.Eval(c.DataItem, "id_grammageTo");

                Grammage grammajeTmpTo = DataProviderGrammage.GrammageById(id_grammajeTo);

                string descriptionGrammajeTo = (grammajeTmpTo != null) ? grammajeTmpTo.description : "";
                ViewContext.Writer.Write(descriptionGrammajeTo);
            });
            column.EditorProperties().ComboBox(c =>
            {
                c.ClientInstanceName = "id_grammageTo";
                c.DataSource = DataProviderGrammage.GrammagesByCompany((int?)ViewData["id_company"]);

                c.ValueField = "id";
                c.TextField = "name";
                c.ValueType = typeof(int);
                c.TextFormatString = "{1}";
                c.Width = Unit.Percentage(100);
                c.DropDownStyle = DropDownStyle.DropDownList;
                c.Columns.Add("code", "Código", 70);
                c.Columns.Add("description", "Gramaje", 100);
                c.Columns.Add("value", "Valor", 70);
                c.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                c.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                c.ClientSideEvents.Validation = "OnGrammageUpToValidation_selectedIndexChanged";
                c.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });
        });
        //Item Grammage


        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "id_proposedProvider";
        //    column.Name = "id_proposedProvider";
        //    column.Caption = "Proveedor Propuesto";
        //    column.Width = Unit.Percentage(17);
        //    column.ColumnType = MVCxGridViewColumnType.ComboBox;

        //    column.EditorProperties().ComboBox(c =>
        //    {
        //        c.ClientInstanceName = "id_proposedProvider";
        //        c.DataSource = DataProviderPerson.AllProviderByCompany((int?)ViewData["id_company"]);

        //        c.ValueField = "id";
        //        c.TextField = "name";
        //        c.ValueType = typeof(int);
        //        c.Width = Unit.Percentage(118);
        //        c.DropDownStyle = DropDownStyle.DropDownList;
        //        c.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
        //        c.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
        //        c.ClientSideEvents.SelectedIndexChanged = "ProposedProviderCombo_SelectedIndexChanged";
        //    });
        //});

        //metricUnit
        settings.Columns.Add(column =>
        {
            column.Name = "metricUnit";
            column.PropertiesEdit.ClientInstanceName = "metricUnit";
            column.Caption = "UM";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(3);
            column.ReadOnly = true;


            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;

            column.SetDataItemTemplateContent(c =>
            {
                var id = (int)DataBinder.Eval(c.DataItem, "id_item");

                Item item = DataProviderItem.Item(id);
                string metricUnit = (item != null && item.ItemPurchaseInformation != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                ViewContext.Writer.Write(metricUnit);
            });

            column.SetEditItemTemplateContent(c =>
            {
                int? id = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id);

                string metricUnit = (item != null && item.ItemPurchaseInformation != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";

                Html.DevExpress().TextBox(p =>
                {
                    p.Name = "metricUnit";
                    p.Properties.ClientInstanceName = "metricUnit";

                    p.Width = Unit.Percentage(100);

                    p.ReadOnly = true;
                    p.ShowModelErrors = false;
                }).Bind(metricUnit).Render();
            });
        });

        //quantityRequested
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityRequested";
            column.Caption = "Cantidad Requerida";
            //column.UnboundType = UnboundColumnType.Decimal;
            column.PropertiesEdit.DisplayFormatString = "N2";
            column.Width = Unit.Percentage(13);
            //column.ReadOnly = true;
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;


            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Right;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityRequested = (decimal)DataBinder.Eval(c.DataItem, "quantityRequested");
                ViewContext.Writer.Write(quantityRequested.ToString("N2"));
            });
            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "quantityRequested";
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                p.ClientSideEvents.ValueChanged = "QuantityRequested_ValueChanged";
                p.ClientSideEvents.Validation = "OnQuantityRequestedValidation";
                p.Width = Unit.Percentage(100);
                p.DisplayFormatString = "N2";
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                p.MinValue = 0;
            });
            //column.EditorProperties().SpinEdit(p =>
            //{
            //    p.ClientInstanceName = "quantityRequested";
            //    p.Width = Unit.Percentage(123);
            //    //p.SpinButtons.ShowIncrementButtons = true;
            //    //p.SpinButtons.ShowLargeIncrementButtons = true;

            //    p.DisplayFormatString = "N2";
            //    p.DisplayFormatInEditMode = true;

            //    p.DecimalPlaces = 2;

            //    //p.Increment = 1.0M;
            //    //p.LargeIncrement = 0.5M;

            //    p.MinValue = 0;
            //    //p.ShowOutOfRangeWarning = true;

            //    p.NumberType = SpinEditNumberType.Float;
            //    p.NumberFormat = SpinEditNumberFormat.Custom;

            //    p.ClientSideEvents.NumberChanged = "QuantityRequested_NumberChange";
            //    p.ClientSideEvents.Validation = "OnQuantityRequestedValidation";
            //});
        });

        //quantityApproved
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityApproved";
            column.Caption = "Cantidad Aprobada";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(13);

            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Right;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityApproved = (decimal)DataBinder.Eval(c.DataItem, "quantityApproved");
                ViewContext.Writer.Write(quantityApproved.ToString("N2"));
            });

            column.EditorProperties().SpinEdit(p =>
            {
                p.Width = Unit.Percentage(100);
                p.ClientInstanceName = "quantityApproved";
                p.DisplayFormatString = "N2";
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                p.SpinButtons.ShowIncrementButtons = true;
                p.SpinButtons.ShowLargeIncrementButtons = false;
                p.Increment = 0.01M;
                p.LargeIncrement = 1.0M;
                p.MinValue = 0;
                //p.MaxValue = 100;
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;
                p.ClientSideEvents.ValueChanged = "QuantityApproved_ValueChanged";
                //p.ClientSideEvents.Init = "QuantityApproved_Init";
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                p.ClientSideEvents.Validation = "OnQuantityApprovedValidation";
            });

            //column.EditorProperties().SpinEdit(p =>
            //{
            //    p.ClientInstanceName = "quantityApproved";
            //    p.Width = Unit.Percentage(123);

            //    //p.SpinButtons.ShowIncrementButtons = true;
            //    //p.SpinButtons.ShowLargeIncrementButtons = true;

            //    p.DisplayFormatString = "N2";
            //    p.DisplayFormatInEditMode = true;

            //    p.DecimalPlaces = 2;

            //    //p.Increment = 1.0M;
            //    //p.LargeIncrement = 0.5M;

            //    p.MinValue = 0;
            //    //p.ShowOutOfRangeWarning = true;

            //    p.NumberType = SpinEditNumberType.Float;
            //    p.NumberFormat = SpinEditNumberFormat.Custom;

            //    //p.ClientSideEvents.Validation = "OnQuantityRequestedValidation";
            //});
        });

        //quantityOutstandingPurchase
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantityOutstandingPurchase";

            column.Caption = "Pendiente de Compra";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(8);
            column.ReadOnly = true;

            column.HeaderStyle.HorizontalAlign = HorizontalAlign.Right;
            column.CellStyle.HorizontalAlign = HorizontalAlign.Right;

            column.SetDataItemTemplateContent(c =>
            {
                decimal quantityOutstandingPurchase = (decimal)DataBinder.Eval(c.DataItem, "quantityOutstandingPurchase");
                ViewContext.Writer.Write(quantityOutstandingPurchase.ToString("N2"));
            });

            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "quantityOutstandingPurchase";
                p.Width = Unit.Percentage(100);
                p.DisplayFormatString = "N2";
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;
                p.DisplayFormatInEditMode = true;
                p.MinValue = 0;
                p.DecimalPlaces = 2;
                p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
            });

            //column.EditorProperties().SpinEdit(p =>
            //{
            //    p.ClientInstanceName = "quantityOutstandingPurchase";
            //    p.Width = Unit.Percentage(124);

            //    //p.SpinButtons.ShowIncrementButtons = false;
            //    //p.SpinButtons.ShowLargeIncrementButtons = false;

            //    p.DisplayFormatString = "N2";
            //    p.DisplayFormatInEditMode = true;

            //    p.DecimalPlaces = 2;

            //    //p.Increment = 1.0M;
            //    //p.LargeIncrement = 0.5M;

            //    p.MinValue = 0;
            //    //p.ShowOutOfRangeWarning = true;

            //    p.NumberType = SpinEditNumberType.Float;
            //    p.NumberFormat = SpinEditNumberFormat.Custom;

            //});
        });

        //Botones de comandos para registros de la tabla
        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = true,
            ShowDeleteButton = true,
            ShowCancelButton = true,
            ShowUpdateButton = true,
            Visible = true,
            VisibleIndex = 20,
            Caption = "Acciones"
        };
        commandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        commandColumn.Width = Unit.Percentage(5);

        settings.Columns.Add(commandColumn);

        #endregion

        settings.PreRender = (s, e) =>
        {
            MVCxGridView g = (s as MVCxGridView);
            if (g != null)
            {
                g.FilterExpression = "isActive = true";
            }
        };

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}
