@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
	var grid = Html.DevExpress().GridView<Vehicle>(settings =>
	{

		settings.Name = "gvVehicle";
		settings.CallbackRouteValues = new { Controller = "Vehicle", Action = "VehiclePartial" };

		settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Vehicle", Action = "VehiclePartialAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Vehicle", Action = "VehiclePartialUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Vehicle", Action = "VehiclePartialDelete" };

		settings.CustomActionRouteValues = new { Controller = "Vehicle", Action = "DeleteSelectedVehicle" };

		settings.Width = Unit.Percentage(100);
		settings.KeyFieldName = "id";


		#region EDITFORM

		settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
		settings.SettingsText.PopupEditFormCaption = "Añadir Vehículo";
		settings.SettingsPopup.EditForm.Modal = true;
		settings.SettingsPopup.EditForm.Width = 800;
		settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
		settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

		settings.SettingsBehavior.ConfirmDelete = true;


		#endregion


		#region EVENT JAVASCRIPT

		settings.ClientSideEvents.Init = "OnGridViewInit";
		settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
		settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

		#endregion

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";

		#region

		settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
			e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

			if (ViewData["EditMessage"] != null)
			{
				e.Properties["cpEditMessage"] = ViewData["EditMessage"];
			}
		};

		#endregion 

		settings.SettingsPager.Visible = true;
		settings.Settings.ShowGroupPanel = true;
		settings.Settings.ShowFilterRow = true;
		settings.Settings.ShowFilterRowMenu = true;
		settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

		settings.SettingsBehavior.AllowSelectByRowClick = true;

		#region SEARCH PANEL

		settings.SettingsSearchPanel.Visible = true;
		settings.Styles.SearchPanel.CssClass = "searchPanel";

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";
		#endregion


		#region COMAND COLUMN

		settings.CommandColumn.Visible = true;
		settings.CommandColumn.Width = Unit.Percentage(2);
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

		#endregion


		#region DONT TOUCH
		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		#endregion

		#region COLUMNS ADD

		settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
		settings.Styles.Header.Font.Bold = true;

		settings.Columns.Add(column =>
		{
			column.FieldName = "carRegistration";
			column.Name = "carRegistration";
			column.Caption = "Placa";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(8);

		});
		settings.Columns.Add(column =>
		{
			column.FieldName = "mark";
			column.Name = "mark";
			column.Caption = "Marca";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});
		settings.Columns.Add(column =>
		{
			column.FieldName = "model";
			column.Name = "model";
			column.Caption = "Modelo";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(10);

		});
		settings.Columns.Add(m => m.rucNameProvider, column =>
		{
			column.Caption = "Ruc Cía Transportista";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});
		settings.Columns.Add(m => m.nameProvider, column =>
		{
			column.Caption = "Compañía Transportista";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});
	settings.Columns.Add(m => m.rucNameProviderBilling, column =>
		{
			column.Caption = "Ruc Cía que Factura";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});
		settings.Columns.Add(m => m.nameProviderBilling, column =>
		{
			column.Caption = "Compañía que Factura";
			column.ColumnType = MVCxGridViewColumnType.TextBox;

		});
		settings.Columns.Add(m => m.VehicleType.description, column =>
		{
			column.Caption = "Tipo de Vehículo";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(10);
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "isOwn";
			column.Name = "isOwn";
			column.PropertiesEdit.ClientInstanceName = "isOwn";
			column.Caption = "¿Propio?";
			column.ColumnType = MVCxGridViewColumnType.CheckBox;
			column.Width = Unit.Percentage(3);
			column.Visible = true;
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "isActive";
			column.Name = "isActive";
			column.PropertiesEdit.ClientInstanceName = "isActive";
			column.Caption = "¿Activo?";
			column.Width = Unit.Percentage(3);
			column.ColumnType = MVCxGridViewColumnType.CheckBox;
			column.Visible = true;
		});
		settings.Columns.Add(column =>
		{
			column.FieldName = "hunterLockText";
			column.Name = "hunterLockText";
			column.PropertiesEdit.ClientInstanceName = "hunterLockText";
			column.Caption = "Hunter?";
			column.Width = Unit.Percentage(3);
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Visible = true;
		});
		settings.Columns.Add(m => m.ItemColor.name, column =>
		{
			column.Caption = "Color";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(10);
		});

		#endregion

		#region BOTONES DE COMANDO PARA REGISTRO

		if (ShowEditButton() || ShowDeleteButton())
		{
			MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
			{
				ShowEditButton = ShowEditButton(),
				ShowDeleteButton = false,
				Visible = true,
				VisibleIndex = 13,
				Width = Unit.Percentage(5),
				Caption = "Acciones"
			};

			if (ShowDeleteButton())
			{
				commandColumn.CustomButtons.Add(
					  new GridViewCommandColumnCustomButton
					  {
						  ID = "btnDeleteRow",
						  Text = "Eliminar"
					  }
				);
			}

			settings.ClientSideEvents.CustomButtonClick = "GridViewItemsCustomCommandButton_Click";

			settings.Columns.Add(commandColumn);
		}
		#endregion

		#region TITLE PANEL

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";

		settings.SetTitlePanelTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblTilte"">Listado de vehículos</span>");
		});

		#endregion

		#region ColumnsEdit


		settings.SetEditFormTemplateContent( c =>
		{
			int? id_vehicle = (int?)DataBinder.Eval(c.DataItem,"id");
			Vehicle vehicle = DataProviderVehicle.Vehicle(id_vehicle);
			int? id_providerTransportist = 0;

			if (vehicle == null && ViewData["rowToCopy"] != null)
			{
				vehicle = (ViewData["rowToCopy"] as Vehicle) ?? new Vehicle
				{
					isActive = true
				};
				vehicle.id = 0;
				vehicle.carRegistration = "";
				vehicle.mark += "-Copia";


			}

			vehicle = vehicle ?? new Vehicle
			{
				isActive = true
			};
			if (vehicle != null && vehicle.VeicleProviderTransport != null)
			{
				var vehicleProviderTransportist = vehicle.VeicleProviderTransport.FirstOrDefault(fod => fod.datefin == null && fod.Estado == true);
				id_providerTransportist = (vehicleProviderTransportist != null) ? vehicleProviderTransportist.id_Provider : 0;
			}
			int? id_providerTBilling = (int?)DataBinder.Eval(c.DataItem, "id_providerTBilling");
			vehicle.id_providerT = id_providerTransportist;
			vehicle.id_providerTBilling = id_providerTBilling;
			Html.RenderPartial("_VehicleEditFormPartial",vehicle);
		});

		#endregion

		#region MASTER DETAILS 



		settings.SettingsDetail.ShowDetailRow = true;
		settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;

		settings.SetDetailRowTemplateContent(c =>
		{
			int? id_vehicle = (int?)DataBinder.Eval(c.DataItem, "id");
			Vehicle vehicle = DataProviderVehicle.Vehicle(id_vehicle);

			Html.RenderPartial("_VehicleDetailPartial", vehicle);
		});
		#endregion

		#region FOOTER


		settings.Settings.ShowFooter = true;

		settings.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
			if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			{
				ViewContext.Writer.Write(
					@"<a id=""lnkSelectAllRows"" style=""cursor pointer;"">Seleccionar Todos</a>
                    <a id=""lnkClearSelection"" style=""cursor pointer;"">Anular Selección </a>"
						);
			}
		});

		#endregion

		settings.Settings.ShowFooter = true;
		settings.SettingsExport.EnableClientSideExportAPI = true;
		settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
		settings.SettingsExport.FileName = "Sitio_Cosecha" + DateTime.Now.ToString("yyyy_MM_dd_hh_mm_ss");
		settings.Toolbars.Add(t =>
		{
			t.EnableAdaptivity = true;
			t.Items.Add(GridViewToolbarCommand.ExportToXls);
			t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
			t.Items.Add(GridViewToolbarCommand.ExportToCsv);
		});

	});

}
@grid.Bind(Model).GetHtml()

@functions {

    bool ShowEditButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(10));
    }

    bool ShowDeleteButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(8));
    }

    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}

