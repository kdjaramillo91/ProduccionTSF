@using System.Web.Mvc.Html
@using DevExpress.XtraReports.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.CustomerAddress>

@{
    var grid = Html.DevExpress().GridView<CustomerAddress>(settings =>
    {
        settings.Name = "gridCustomerAddress";
        settings.CallbackRouteValues = new { Controller = "Person", Action = "CustomerAddress" };

        settings.ClientSideEvents.BeginCallback = "CustomerAddress_OnBeginCallback";

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Person", Action = "CustomerAddressAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Person", Action = "CustomerAddressUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Person", Action = "CustomerAddressDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;

        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.CommandColumn.Width = Unit.Percentage(8);

        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["isActive"] = true;
        };



        settings.Columns.Add(column =>
        {
            column.FieldName = "id_addressType";
            column.Name = "id_addressType";
            column.Caption = "Tipo de Dirección ";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                int? id_addressType = (int)DataBinder.Eval(c.DataItem, "id_addressType");
                AddressType addressType  = DataProviderAddressType.AddressTypeById (id_addressType);

                if (addressType != null)
                {
                    ViewContext.Writer.Write(addressType.name);
                }
            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_addressType";
                p.DataSource = DataProviderAddressType.AddressTypeByCompany((int)ViewData["id_company"]) ;
                //p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.ValueType = typeof(int);

                p.Columns.Add("code", "Cod.", 50);
                p.Columns.Add("name", "Nombre", 100);

                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;

                //p.EnableSynchronization = DefaultBoolean.False;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.ClientSideEvents.Validation = "OnUpdateImagenWhenRequiredField";
                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                //   p.ClientSideEvents.SelectedIndexChanged = "ProviderPaymentMethodDivisionCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });


            //settings.Properties.ClientSideEvents.Validation = "OnUpdateImagenWhenRequiredField";
            settings.CustomJSProperties = (s, e) =>
            {
                e.Properties["cpTabContainer"] = "tabCustomer";
                e.Properties["cpMessageError"] = "Campo Obligatorio.";
                e.Properties["cpIsRequired"] = "true";
                e.Properties["cpTabControl"] = "tabControl";
            };


        });


        settings.Columns.Add(column =>
        {
            column.FieldName = "addressdescription";
            column.Name = "addressdescription";
            column.Caption = "Dirección ";
            column.ColumnType = MVCxGridViewColumnType.Memo;

            column.EditorProperties().Memo(p =>
            {
                p.ClientInstanceName = "addressdescription";
                
                //p.EnableSynchronization = DefaultBoolean.False;
                
                p.ClientSideEvents.Validation = "OnUpdateImagenWhenRequiredField";
                 
                p.Width = Unit.Percentage(100);
            });


            //settings.Properties.ClientSideEvents.Validation = "OnUpdateImagenWhenRequiredField";
            settings.CustomJSProperties = (s, e) =>
            {
                e.Properties["cpTabContainer"] = "tabCustomer";
                e.Properties["cpMessageError"] = "Campo Obligatorio.";
                e.Properties["cpIsRequired"] = "true";
                e.Properties["cpTabControl"] = "tabControl";
            };


        });

        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "isPredetermined";
        //    column.Name = "isPredeterminedPM";
        //    column.Caption = "¿Predeterminado?";
        //    column.Width = Unit.Percentage(3);
        //    column.ColumnType = MVCxGridViewColumnType.CheckBox;
        //    //column.AutoFilterBy("Sí");
        //    //column.Settings.AllowAutoFilter = DefaultBoolean.True;

        //    column.EditorProperties().CheckBox(p =>
        //    {
        //        p.ClientInstanceName = "isPredeterminedPM";
        //    });

        //});

        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Name = "isActive";
            column.Caption = "¿Activo?";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            //column.AutoFilterBy("Sí");
            //column.Settings.AllowAutoFilter = DefaultBoolean.True;

            column.EditorProperties().CheckBox(p =>
            {
                p.ClientInstanceName = "isActive";
            });

        });

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()