@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
	var copack = this.ViewBag.isCopackingPerson;
	if (copack == null)
	{
		copack = false;
	}
}
@model List<DXPANACEASOFT.Models.ProductionUnitProvider>
@{
    var grid = Html.DevExpress().GridView<ProductionUnitProvider>(settings =>
    {
        settings.Name = "ProductionShrimpUnitProvider";
        settings.CallbackRouteValues = new { Controller = "Person", Action = "ProductionShrimpUnitProvider" };

        settings.ClientSideEvents.BeginCallback = "ProductionShrimpUnitProvider_OnBeginCallback";

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Person", Action = "ProductionShrimpUnitProviderAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Person", Action = "ProductionShrimpUnitProviderUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Person", Action = "ProductionShrimpUnitProviderDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = false;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;

        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        // esto comentado
        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["isActive"] = true;
            if (copack)
            {
                e.NewValues["isCopackingDetail"] = true;
            }
            else
            {
                e.NewValues["isCopackingDetail"] = false;
            }


        };


        settings.SettingsPager.Visible = true;
        //false
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = false;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        //esto comentado
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        //esto comentado
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.CommandColumn.Width = Unit.Percentage(8);


        settings.Columns.Add(column =>
        {
            column.FieldName = "code";
            column.Caption = "Código";
            column.ColumnType = MVCxGridViewColumnType.TextBox;


            column.SetDataItemTemplateContent(c =>
            {
                string code = (string)DataBinder.Eval(c.DataItem, "code");

                ViewContext.Writer.Write(code);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "code";
                p.MaxLength = 20;
                //p.EnableSynchronization = DefaultBoolean.False;

                p.ClientSideEvents.Validation = "OnCodeProductionUnitProvider";
                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemDivisionCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });

        });


        settings.Columns.Add(column =>
        {
            column.FieldName = "name";
            column.Caption = "Nombre";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string nombre = (string)DataBinder.Eval(c.DataItem, "name");

                ViewContext.Writer.Write(nombre);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "nameProductionUnitProvider";

                //p.EnableSynchronization = DefaultBoolean.False;

                p.ClientSideEvents.Validation = "OnNameProductionUnitProvider";
                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemDivisionCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "poolNumber";
            column.Caption = "N. Piscinas";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;

            column.SetDataItemTemplateContent(c =>
            {
                int? poolNumber = (int?)DataBinder.Eval(c.DataItem, "poolNumber");
                ViewContext.Writer.Write(poolNumber != null ? poolNumber.Value.ToString() : "");
            });

            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "poolNumberProductionUnitProvider";
                p.NumberType = SpinEditNumberType.Integer;
                p.DecimalPlaces = 0;
                p.AllowMouseWheel = true;
                p.Increment = 1.0M;
                p.LargeIncrement = 1;
                p.MinValue = 0;
                p.MaxValue = 200;
                //p.ClientSideEvents.Validation = "OnPoolNumberProductionUnitProviderValidation";
                p.SpinButtons.ShowLargeIncrementButtons = true;
            });
        });

        /* poolprefix */
        settings.Columns.Add(column =>
        {
            column.FieldName = "poolprefix";
            column.Caption = "Prefijo";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string ministerialAgreement = (string)DataBinder.Eval(c.DataItem, "poolprefix");

                ViewContext.Writer.Write(ministerialAgreement);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "poolprefix";
                p.MaxLength = 4;
                //p.ClientSideEvents.Validation = "OnMinisterialAgreementProductionUnitProvider";

                p.Width = Unit.Percentage(100);
            });

        });
        /* poolsuffix */
        settings.Columns.Add(column =>
        {
            column.FieldName = "poolsuffix";
            column.Caption = "Sufijo";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string ministerialAgreement = (string)DataBinder.Eval(c.DataItem, "poolsuffix");

                ViewContext.Writer.Write(ministerialAgreement);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "poolsuffix";
                p.MaxLength = 4;
                //p.ClientSideEvents.Validation = "OnMinisterialAgreementProductionUnitProvider";

                p.Width = Unit.Percentage(100);
            });

        });
        /* INP */
        settings.Columns.Add(column =>
        {
            column.FieldName = "INPnumber";
            column.Caption = "INP";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string INPnumber = (string)DataBinder.Eval(c.DataItem, "INPnumber");

                ViewContext.Writer.Write(INPnumber);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "INPnumberProductionUnitProvider";
                p.MaxLength = 30;
                p.ClientSideEvents.Validation = "OnINPnumberProductionUnitProviderValidation";

                p.Width = Unit.Percentage(100);
            });

        });

        /* ministerialAgreement */
        settings.Columns.Add(column =>
        {
            column.FieldName = "ministerialAgreement";
            column.Caption = "Acuerdo Ministerial";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string ministerialAgreement = (string)DataBinder.Eval(c.DataItem, "ministerialAgreement");

                ViewContext.Writer.Write(ministerialAgreement);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "ministerialAgreementProductionUnitProvider";
                p.MaxLength = 100;
                p.ClientSideEvents.Validation = "OnMinisterialAgreementProductionUnitProviderValidation";
                p.ClientSideEvents.TextChanged = "OnMinisterialAgreementProductionUnitProviderTextChanged";
                p.Width = Unit.Percentage(100);
            });

        });
        #region CUSTOM PROPERTIES

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            if (gv.EditingRowVisibleIndex != -1)
                e.Properties["cpEditingRowVisibleIndex"] = gv.EditingRowVisibleIndex;
        };
        #endregion
        /*tramitNumber */
        settings.Columns.Add(column =>
        {
            column.FieldName = "tramitNumber";
            column.Caption = "Número de Trámite";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string tramitNumber = (string)DataBinder.Eval(c.DataItem, "tramitNumber");
                ViewContext.Writer.Write(tramitNumber);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "tramitNumberProductionUnitProvider";
                p.MaxLength = 100;
                p.ClientSideEvents.Validation = "OnTramitNumberProductionUnitProviderValidation";
                p.ClientSideEvents.TextChanged = "OnTramitNumberProductionUnitProviderTextChanged";
                p.Width = Unit.Percentage(100);
            });

        });

        /* id_shippingType */
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_shippingType";
            column.Name = "id_shippingType";
            column.Caption = "Vía de Transporte";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(10);

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_shippingType";
                p.DataSource = DataProviderPurchaseOrderShippingType.PurchaseOrderShippingType((int)ViewData["id_company"]);
                p.ValueField = "id";
                p.TextFormatString = "{1}";
                p.ValueType = typeof(int);
                p.CallbackPageSize = 30;
                p.Width = Unit.Percentage(93);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.Columns.Add("code", "Código", 70);
                p.Columns.Add("name", "Sitio", 70);
                p.ClientSideEvents.Validation = "OnshippingTypeValidation";

            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_FishingZone";
            column.Name = "id_FishingZone";
            column.Caption = "Zona de Cosecha";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(10);


            column.EditorProperties().ComboBox(p =>
            {

                p.ClientInstanceName = "id_FishingZone";
                p.DataSource = DataProviderFishingZone.FishingZone((int?)ViewData["id_company"]);
                p.ValueField = "id";
                p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueType = typeof(int);
                p.CallbackPageSize = 30;

                p.Width = Unit.Percentage(90);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.ClientSideEvents.Init = "FishingZone_Init";
                p.ClientSideEvents.SelectedIndexChanged = "FishingZone_SelectedIndexChanged";


            });
        });


        /* id_FishingSite */
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_FishingSite";
            column.Name = "id_FishingSite";
            column.Caption = "Sitio de Cosecha";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(10);


            column.SetDataItemTemplateContent(c =>
            {
                int? id_FishingSite = (int?)DataBinder.Eval(c.DataItem, "id_FishingSite");

                ViewContext.Writer.Write(DataProviderFishingSite.FishingSiteById(id_FishingSite) != null ? DataProviderFishingSite.FishingSiteById(id_FishingSite).name : "");
            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_FishingSite";

                p.ValueField = "id";
                p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueType = typeof(int);
                p.CallbackPageSize = 30;
                p.Width = Unit.Percentage(93);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.Columns.Add("code", "Código", 70);
                p.Columns.Add("name", "Sitio", 100);
                p.ClientSideEvents.Validation = "OnFishingSiteValidation";
            });
        });
        //address
        settings.Columns.Add(column =>
        {

            column.FieldName = "address";
            column.Caption = "Dirección";
            column.ColumnType = MVCxGridViewColumnType.Memo;

            column.SetDataItemTemplateContent(c =>
            {
                string address = (string)DataBinder.Eval(c.DataItem, "address");

                ViewContext.Writer.Write(address);
            });

            column.EditorProperties().Memo(p =>
            {
                p.ClientInstanceName = "addressProductionUnitProvider";
                p.MaxLength = 250;

                p.ClientSideEvents.Validation = "OnAddressProductionUnitProvider";

                p.Width = Unit.Percentage(100);
            });

        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Caption = "¿Activo?";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
        });
        settings.PreRender = (sender, e) =>
        {
            ((MVCxGridView)sender).StartEdit(1);
        };
        settings.PreRender = (s, e) =>
        {
            MVCxGridView g = (s as MVCxGridView);
            if (g != null)
            {
                g.FilterExpression = "isActive = true";
            }
        };

        settings.Columns.Add(column =>
        {
            column.FieldName = "isCopackingDetail";
            column.Caption = "¿Copacking?";
            column.Name = "isCopackingDetail";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;

            column.EditorProperties().CheckBox(p =>
            {
                p.ClientSideEvents.Init = "InitCopackingDetail";
                p.ClientInstanceName = "isCopackingDetail";
            });
        });
    });


    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}@grid.Bind(Model).GetHtml()