@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.BusinessOportunityNote>

@{
    var grid = Html.DevExpress().GridView<BusinessOportunityNote>(settings =>
    {
        settings.Name = "gvBusinessOportunityNotes";


        settings.CallbackRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityNotesPartial" };

        //settings.ClientSideEvents.BeginCallback = "BusinessOportunity_OnBeginCallback";


        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityNotesPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityNotesPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityNotesPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Caption = "Acciones";
        settings.CommandColumn.VisibleIndex = 3;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        //settings.CommandColumn.ShowNewButtonInHeader = true;

        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.CommandColumn.Width = Unit.Percentage(8);

        //settings.Columns.Add(m => m.id, column =>
        //{
        //    column.Caption = "No.";
        //    column.EditFormSettings.Visible = DefaultBoolean.False;
        //    column.Width = Unit.Percentage(3);

        //});

        settings.Styles.Header.Font.Bold = true;

        settings.Columns.Add(column =>
        {
            column.FieldName = "referenceNote";
            column.Caption = "Referencia";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string referenceNote = (string)DataBinder.Eval(c.DataItem, "referenceNote");

                ViewContext.Writer.Write(referenceNote);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "referenceNote";

                //p.MaskSettings.Mask = "000-000";
                //p.MaskSettings.IncludeLiterals = MaskIncludeLiteralsMode.None;
                //p.MaskSettings.ErrorText = "Número de Serie no válido";
                //p.EnableSynchronization = DefaultBoolean.False;

                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemDivisionCombo_SelectedIndexChanged";
                p.ClientSideEvents.Validation = "OnReferenciaValidation";
                p.Width = Unit.Percentage(100);
            });

        });
        //settings.Columns.Add(m => m.reference, column =>
        //{
        //    column.Caption = "Referencia";
        //    column.ColumnType = MVCxGridViewColumnType.TextBox;
        //});
        settings.Columns.Add(column =>
        {
            column.FieldName = "descriptionNote";
            column.Caption = "Descripción";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string descriptionNote = (string)DataBinder.Eval(c.DataItem, "descriptionNote");

                ViewContext.Writer.Write(descriptionNote);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "descriptionNote";

                //p.MaskSettings.Mask = "000-000";
                //p.MaskSettings.IncludeLiterals = MaskIncludeLiteralsMode.None;
                //p.MaskSettings.ErrorText = "Número de Serie no válido";
                //p.EnableSynchronization = DefaultBoolean.False;

                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemDivisionCombo_SelectedIndexChanged";

                p.Width = Unit.Percentage(100);
            });

        });
        //settings.Columns.Add(m => m.description, column =>
        //{
        //    column.Caption = "Descripción";
        //    column.ColumnType = MVCxGridViewColumnType.TextBox;
        //});
    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
