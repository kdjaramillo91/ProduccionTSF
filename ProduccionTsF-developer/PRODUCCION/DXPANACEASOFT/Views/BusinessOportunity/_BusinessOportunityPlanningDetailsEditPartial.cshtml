@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.BusinessOportunityPlanningDetail>
@{
    string codeBusinessOportunityDocumentType = (string)ViewData["codeBusinessOportunityDocumentType"];
}

@{
    var grid = Html.DevExpress().GridView<BusinessOportunityPlanningDetail>(settings => {
        settings.Name = "gvBusinessOportunityPlanningDetails";

        settings.CallbackRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityPlanningDetailsPartial" };

        //settings.ClientSideEvents.BeginCallback = "BusinessOportunityPlanningDetail_OnBeginCallback";
        settings.ClientSideEvents.EndCallback = "BusinessOportunityPlanningDetail_OnEndCallback";


        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityPlanningDetailsPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityPlanningDetailsPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "BusinessOportunity", Action = "BusinessOportunityPlanningDetailsPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.Styles.Header.Wrap = DefaultBoolean.True;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.VisibleIndex = 12;
        settings.CommandColumn.Caption = "Acciones";
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        //settings.CommandColumn.ShowNewButtonInHeader = true;

        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.CommandColumn.Width = Unit.Percentage(8);

        settings.Styles.Header.Font.Bold = true;
        
        //id_item
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_item";
            column.Caption = "Producto";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];
                Item item = DataProviderItem.Item(id_item);
                string name = (item != null) ? item.name : "";
                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                ViewContext.Writer.Write(name);

            });

            column.EditorProperties().ComboBox(p =>
            {
                //p.Name = "id_item";
                p.ClientInstanceName = "id_item";
                p.DataSource = null;// DataProviderItem.AllItemsByCompany((int?)ViewData["id_company"]);
                p.ValueField = "id";
                //p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueType = typeof(int);
                p.CallbackPageSize = 15;
                p.Width = Unit.Percentage(100);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.EnableSynchronization = DefaultBoolean.False;
                p.Columns.Add("masterCode", "Código", 70);//, Unit.Percentage(50));
                p.Columns.Add("name", "Nombre del Producto", 200);//, Unit.Percentage(70));
                                                                  //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));
                p.Columns.Add("MetricUnitCode", "UM", 50);//, Unit.Percentage(20));
                p.ClientSideEvents.Init = "ItemCombo_OnInit";
                //p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                p.ClientSideEvents.SelectedIndexChanged = "DetailsItemCombo_SelectedIndexChanged";
                p.ClientSideEvents.Validation = "OnItemValidation";
                p.CallbackRouteValues = new { Controller = "BusinessOportunity", Action = "GetPlanningDetailItem"/*, TextField = "CityName"*/ };
                p.ClientSideEvents.BeginCallback = "BusinessPlanningDetailItem_BeginCallback";
                p.ClientSideEvents.EndCallback = "BusinessPlanningDetailItem_EndCallback";
                //p.ClientSideEvents.ValueChanged = "ItemsCombo_ValueChanged";}
            });

        });

        //metricUnit
        settings.Columns.Add(column =>
        {
            column.Name = "metricUnit";
            column.Caption = "UM";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(5);
            column.ReadOnly = true;
            column.PropertiesEdit.ClientInstanceName = "metricUnit";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;

            column.SetDataItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];
                Item item = DataProviderItem.Item(id_item);

                string metricUnitPurchase = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                string metricUnitSale = (item != null && item.ItemSaleInformation != null && item.ItemSaleInformation.MetricUnit != null) ? item.ItemSaleInformation.MetricUnit.code : "";

                //var id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                string metricUnit = (codeBusinessOportunityDocumentType == "15") ? metricUnitSale : ((codeBusinessOportunityDocumentType == "16") ? metricUnitPurchase : "");
                ViewContext.Writer.Write(metricUnit);

            });

            column.SetEditItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];
                Item item = DataProviderItem.Item(id_item);

                string metricUnitPurchase = (item != null && item.ItemPurchaseInformation != null && item.ItemPurchaseInformation.MetricUnit != null) ? item.ItemPurchaseInformation.MetricUnit.code : "";
                string metricUnitSale = (item != null && item.ItemSaleInformation != null && item.ItemSaleInformation.MetricUnit != null) ? item.ItemSaleInformation.MetricUnit.code : "";

                //var id_item = (int)DataBinder.Eval(c.DataItem, "id_item");

                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                string metricUnit = (codeBusinessOportunityDocumentType == "15") ? metricUnitSale : ((codeBusinessOportunityDocumentType == "16") ? metricUnitPurchase : "");

                Html.DevExpress().TextBox(p =>
                {
                    p.Name = "metricUnit";
                    p.Properties.ClientInstanceName = "metricUnit";

                    p.Width = Unit.Percentage(100);

                    p.ReadOnly = true;
                    p.Properties.ClientSideEvents.Validation = "OnValidation";
                }).Bind(metricUnit).GetHtml();//.Render();//.Bind(metricUnit).Render();
            });

        });

        //size
        settings.Columns.Add(column =>
        {
            column.Name = "size";
            column.Caption = "Talla";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(5);
            column.ReadOnly = true;
            column.PropertiesEdit.ClientInstanceName = "size";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;

            column.SetDataItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string size = (item != null && item.ItemGeneral != null && item.ItemGeneral.ItemSize != null) ? item.ItemGeneral.ItemSize.name : "";

                ViewContext.Writer.Write(size);

            });

            column.SetEditItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string size = (item != null && item.ItemGeneral != null && item.ItemGeneral.ItemSize != null) ? item.ItemGeneral.ItemSize.name : "";

                Html.DevExpress().TextBox(p =>
                {
                    p.Name = "size";
                    p.Properties.ClientInstanceName = "size";

                    p.Width = Unit.Percentage(100);

                    p.ReadOnly = true;
                    p.Properties.ClientSideEvents.Validation = "OnValidation";
                }).Bind(size).GetHtml();//.Render();//.Bind(metricUnit).Render();
            });

        });

        //itemTypeCategory
        settings.Columns.Add(column =>
        {
            column.Name = "itemTypeCategory";
            column.Caption = "Tipo Categoría de Item";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(5);
            column.ReadOnly = true;
            column.PropertiesEdit.ClientInstanceName = "itemTypeCategory";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Center;

            column.SetDataItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string itemTypeCategory = (item != null && item.ItemTypeCategory != null) ? item.ItemTypeCategory.name : "";

                ViewContext.Writer.Write(itemTypeCategory);

            });

            column.SetEditItemTemplateContent(c =>
            {
                var id_item = (int?)DataBinder.Eval(c.DataItem, "id_item");
                Item item = DataProviderItem.Item(id_item);

                string itemTypeCategory = (item != null && item.ItemTypeCategory != null) ? item.ItemTypeCategory.name : "";

                Html.DevExpress().TextBox(p =>
                {
                    p.Name = "itemTypeCategory";
                    p.Properties.ClientInstanceName = "itemTypeCategory";

                    p.Width = Unit.Percentage(100);

                    p.ReadOnly = true;
                    p.Properties.ClientSideEvents.Validation = "OnValidation";
                }).Bind(itemTypeCategory).GetHtml();//.Render();//.Bind(metricUnit).Render();
            });

        });

        //quantity
        settings.Columns.Add(column =>
        {
            column.FieldName = "quantity";
            column.Caption = "Cantidad";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(7);

            column.SetDataItemTemplateContent(c =>
            {
                decimal? quantity = (decimal?)DataBinder.Eval(c.DataItem, "quantity");
                ViewContext.Writer.Write(quantity == null ? "0.00" : quantity.Value.ToString("N2"));
            });

            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "quantity";
                p.DisplayFormatString = "N2";
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                p.SpinButtons.ShowIncrementButtons = true;
                p.SpinButtons.ShowLargeIncrementButtons = false;
                //p.Increment = 0.01M;
                //p.LargeIncrement = 1.0M;
                //p.MinValue = 0.01M;
                //p.MaxValue = 9999999999999.99M;
                //p.ValidationSettings.ErrorText = "Cantidad debe estar entre 0.01 y 9,999,999,999,999.99";
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;
                p.ClientSideEvents.ValueChanged = "Changed_QuantityOrPriceDetail";
                //p.ClientSideEvents.ValueChanged = "QuantityOrdered_ValueChanged";
                p.ClientSideEvents.Validation = "QuantityValidation";
            });
        });

        //price
        settings.Columns.Add(column =>
        {
            column.FieldName = "price";
            column.Caption = "Precio";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(7);

            column.SetDataItemTemplateContent(c =>
            {
                decimal? price = (decimal?)DataBinder.Eval(c.DataItem, "price");
                ViewContext.Writer.Write(price == null ? "0.00" : price.Value.ToString("C2"));
            });

            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "price";
                p.DisplayFormatString = "C2";
                p.DisplayFormatInEditMode = true;
                p.DecimalPlaces = 2;
                p.SpinButtons.ShowIncrementButtons = true;
                p.SpinButtons.ShowLargeIncrementButtons = false;
                //p.Increment = 0.01M;
                //p.LargeIncrement = 1.0M;
                //p.MinValue = 0.01M;
                //p.MaxValue = 9999999999999.99M;
                //p.ValidationSettings.ErrorText = "Precio debe estar entre $0.01 y $9,999,999,999,999.99";
                p.NumberType = SpinEditNumberType.Float;
                p.NumberFormat = SpinEditNumberFormat.Custom;
                p.Width = Unit.Percentage(100);
                p.ClientSideEvents.ValueChanged = "Changed_QuantityOrPriceDetail";
                //p.ClientSideEvents.ValueChanged = "QuantityOrdered_ValueChanged";
                p.ClientSideEvents.Validation = "PriceValidation";
            });
        });

        //totalItemDetail
        settings.Columns.Add(column =>
        {
            column.Name = "totalItemDetail";
            column.Caption = "Total";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Width = Unit.Percentage(7);
            column.ReadOnly = true;
            column.PropertiesEdit.ClientInstanceName = "totalItemDetail";

            column.CellStyle.HorizontalAlign = HorizontalAlign.Right;

            column.SetDataItemTemplateContent(c =>
            {
                var quantity = (decimal?)DataBinder.Eval(c.DataItem, "quantity");
                var price = (decimal?)DataBinder.Eval(c.DataItem, "price");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];

                //decimal quantity = (detail != null) ? detail.quantity : 0;
                //decimal price = (detail != null) ? detail.price : 0;
                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                string total = ((quantity == null ? 0 : quantity.Value) * (price == null ? 0 : price.Value)).ToString("$#,###.00");
                ViewContext.Writer.Write(total);

            });

            column.SetEditItemTemplateContent(c =>
            {
                var quantity = (decimal?)DataBinder.Eval(c.DataItem, "quantity");
                var price = (decimal?)DataBinder.Eval(c.DataItem, "price");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];

                //decimal quantity = (detail != null) ? detail.quantity : 0;
                //decimal price = (detail != null) ? detail.price : 0;
                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                var total = ((quantity == null ? 0 : quantity.Value) * (price == null ? 0 : price.Value));

                Html.DevExpress().SpinEdit(p =>
                {
                    p.Name = "totalItemDetail";
                    p.Properties.ClientInstanceName = "totalItemDetail";
                    p.Properties.DisplayFormatString = "C2";
                    //p.DisplayFormatInEditMode = true;
                    p.Properties.DecimalPlaces = 2;
                    p.Properties.SpinButtons.ShowIncrementButtons = false;
                    p.Properties.SpinButtons.ShowLargeIncrementButtons = false;

                    p.Width = Unit.Percentage(100);
                    p.Properties.NumberFormat = SpinEditNumberFormat.Custom;

                    p.ReadOnly = true;
                    p.Properties.ClientSideEvents.Validation = "OnValidation";
                }).Bind(total).GetHtml();//.Render();//.Bind(metricUnit).Render();
            });

        });

        //id_person
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_person";
            column.Caption = "Socio de Negocio";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                var id_person = (int?)DataBinder.Eval(c.DataItem, "id_person");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];
                var person = DataProviderPerson.Person(id_person);
                string strPerson = (person != null) ? person.fullname_businessName : "";
                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                ViewContext.Writer.Write(strPerson);

            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_person";
                //p.DataSource = null;// DataProviderPerson.Persons((int)ViewData["id_company"]);

                p.ValueField = "id";
                p.TextField = "fullname_businessName";
                p.ValueType = typeof(int);

                p.CallbackPageSize = 30;
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.CallbackRouteValues = new { Controller = "BusinessOportunity", Action = "GetPlanningDetailPerson"/*, TextField = "CityName"*/ };
                p.ClientSideEvents.BeginCallback = "BusinessPlanningDetailPerson_BeginCallback";
                p.ClientSideEvents.EndCallback = "BusinessPlanningDetailPerson_EndCallback";
                //p.Columns.Add("masterCode", "Código", Unit.Percentage(50));
                //p.Columns.Add("name", "Nombre del Producto", Unit.Percentage(70));
                //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));

                //p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", Unit.Percentage(20));

                //p.ClientSideEvents.Init = "ItemCombo_OnInit";
                //p.ClientSideEvents.DropDown = "ItemCombo_DropDown";
                p.ClientSideEvents.SelectedIndexChanged = "DetailsPersonCombo_SelectedIndexChanged";
                p.ClientSideEvents.Validation = "OnPersonValidation";
                //p.ClientSideEvents.ValueChanged = "ItemsCombo_ValueChanged";}
            });
        });

        //id_priceList
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_priceList";
            column.Caption = "Lista de Precio/Cotización";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                var id_priceList = (int?)DataBinder.Eval(c.DataItem, "id_priceList");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];
                var priceList = DataProviderPriceList.PriceListById(id_priceList);
                string strPerson = (priceList != null) ? (priceList.name + " (" + priceList.Document.DocumentType.name + ") " + priceList.CalendarPriceList.CalendarPriceListType.name + " [" + priceList.CalendarPriceList.startDate.ToString("dd/MM/yyyy") + " - " +
                                                                           priceList.CalendarPriceList.endDate.ToString("dd/MM/yyyy") + "]") : "";
                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                ViewContext.Writer.Write(strPerson);

            });

            column.EditorProperties().ComboBox(p =>
            {
                p.ClientInstanceName = "id_priceList";
                p.DataSource = null;// DataProviderPerson.Persons((int)ViewData["id_company"]);

                p.ValueField = "id";
                p.TextField = "name";
                p.ValueType = typeof(int);

                p.CallbackPageSize = 30;
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

                p.CallbackRouteValues = new { Controller = "BusinessOportunity", Action = "GetPriceList"/*, TextField = "CityName"*/ };
                p.ClientSideEvents.BeginCallback = "BusinessPlanningDetailPriceListBeginCallback";
                p.ClientSideEvents.EndCallback = "BusinessPlanningDetailPriceList_EndCallback";
                //p.Columns.Add("masterCode", "Código", Unit.Percentage(50));
                //p.Columns.Add("name", "Nombre del Producto", Unit.Percentage(70));
                //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));

                //p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", Unit.Percentage(20));

                //p.ClientSideEvents.Init = "ItemCombo_OnInit";
                //p.ClientSideEvents.DropDown = "ItemCombo_DropDown";
                p.ClientSideEvents.SelectedIndexChanged = "DetailsPriceListCombo_SelectedIndexChanged";
                p.ClientSideEvents.Validation = "OnPriceListValidation";
                //p.ClientSideEvents.ValueChanged = "ItemsCombo_ValueChanged";}
            });
        });

        //id_document
        settings.Columns.Add(column =>
        {
            column.FieldName = "id_document";
            column.Caption = codeBusinessOportunityDocumentType == "15" ? "Requerimiento Pedido de Venta" :
                             (codeBusinessOportunityDocumentType == "16" ? "Requerimiento Orden de Compra" : "Requerimiento Pedido de Venta/Orden de Compra");
            column.ColumnType = MVCxGridViewColumnType.ComboBox;

            column.SetDataItemTemplateContent(c =>
            {
                var id_document = (int?)DataBinder.Eval(c.DataItem, "id_document");
                //BusinessOportunityPlanningDetail detail = (BusinessOportunityPlanningDetail)Model[c.ItemIndex];
                var document = DataProviderDocument.Document(id_document);
                string strDocument = (document != null) ? document.number : "";
                //string codeBusinessOportunityDocumentType = (detail != null && detail.BusinessOportunityPlaninng != null && detail.BusinessOportunityPlaninng.BusinessOportunity != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document != null && detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType != null) ? detail.BusinessOportunityPlaninng.BusinessOportunity.Document.DocumentType.code : "";

                //15: Oportunidad de Venta y 16: Oportunidad de Compra
                ViewContext.Writer.Write(strDocument);

            });

            column.SetEditItemTemplateContent(c =>
            {
                var id_document = (int?)DataBinder.Eval(c.DataItem, "id_document");
                var document = DataProviderDocument.Document(id_document);
                string strDocument = (document != null) ? document.number : "";

                Html.DevExpress().TextBox(p =>
                {
                    p.Name = "id_documentSalesPurchase";
                    p.Properties.ClientInstanceName = "id_documentSalesPurchase";

                    p.Width = Unit.Percentage(100);

                    p.ReadOnly = true;
                    //p.ShowModelErrors = true;
                    p.Properties.ClientSideEvents.Validation = "OnValidation";
                }).Bind(strDocument).Render();
            });
            //column.EditorProperties().ComboBox(p =>
            //{
            //    p.ClientInstanceName = "id_document";
            //    p.DataSource = DataProviderDocument.DocumentsByCompany((int)ViewData["id_company"], codeBusinessOportunityDocumentType);

            //    p.ValueField = "id";
            //    p.TextField = "number";
            //    p.ValueType = typeof(int);

            //    p.CallbackPageSize = 30;
            //    p.DropDownStyle = DropDownStyle.DropDownList;
            //    p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            //    p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;

            //    //p.Columns.Add("masterCode", "Código", Unit.Percentage(50));
            //    //p.Columns.Add("name", "Nombre del Producto", Unit.Percentage(70));
            //    //p.Columns.Add("barCode", "EAN", Unit.Percentage(50));

            //    //p.Columns.Add("ItemPurchaseInformation.MetricUnit.code", "UM", Unit.Percentage(20));

            //    //p.ClientSideEvents.Init = "ItemCombo_OnInit";
            //    //p.ClientSideEvents.DropDown = "ItemCombo_DropDown";
            //    //p.ClientSideEvents.SelectedIndexChanged = "ItemCombo_SelectedIndexChanged";
            //    //p.ClientSideEvents.Validation = "OnPersonValidation";
            //    //p.ClientSideEvents.ValueChanged = "ItemsCombo_ValueChanged";}
            //});
        });

        //referencePlanning
        settings.Columns.Add(column =>
        {
            column.FieldName = "referencePlanning";
            column.Caption = "Referencia";
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(c =>
            {
                string referencePlanning = (string)DataBinder.Eval(c.DataItem, "referencePlanning");

                ViewContext.Writer.Write(referencePlanning);
            });

            column.EditorProperties().TextBox(p =>
            {
                p.ClientInstanceName = "referencePlanning";

                //p.MaskSettings.Mask = "000-000";
                //p.MaskSettings.IncludeLiterals = MaskIncludeLiteralsMode.None;
                //p.MaskSettings.ErrorText = "Número de Serie no válido";
                //p.EnableSynchronization = DefaultBoolean.False;

                //p.ClientSideEvents.Init = "ItemCompanyCombo_Init";
                //p.ClientSideEvents.SelectedIndexChanged = "ItemDivisionCombo_SelectedIndexChanged";
                //p.ClientSideEvents.Validation = "OnReferenciaValidation";
                p.Width = Unit.Percentage(100);
            });

        });
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()