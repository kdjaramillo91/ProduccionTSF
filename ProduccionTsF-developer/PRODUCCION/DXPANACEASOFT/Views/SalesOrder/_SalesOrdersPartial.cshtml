@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@{
    var grid = Html.DevExpress().GridView<SalesOrder>(settings =>
    {
        settings.Name = "gvSalesOrders";
        settings.CallbackRouteValues = new { Controller = "SalesOrder", Action = "SalesOrdersPartial" };

        settings.Width = Unit.Percentage(100);

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        settings.CommandColumn.Visible = true;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.CommandColumn.Width = Unit.Percentage(3);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRowMenu = true;

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.Settings.ShowFooter = true;

        settings.ClientSideEvents.Init = "SalesOrdersOnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "SalesOrdersOnGridViewSelectionChanged";
        settings.ClientSideEvents.EndCallback = "SalesOrdersOnGridViewEndCallback";

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Ordenes de Ventas</span>");
        });

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SalesOrdersSelectAllRows()"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""SalesOrdersClearSelection()"">Anular Selección</a>"
                );
            }
        });

        //MASTER DETAILS
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
        settings.SettingsDetail.ShowDetailRow = true;

        //DETALLES EN GRID LLAMADA A OTRA TABLA
        settings.SetDetailRowTemplateContent(column =>
        {
            int? id_salesOrder = (int?)DataBinder.Eval(column.DataItem, "id");
            SalesOrder order = DataProviderSalesOrder.SalesOrder(id_salesOrder);
            Html.RenderPartial("_SalesOrderResultsDetailViewPartial", order);
        });

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        //Document
        settings.Columns.Add(column =>
        {
            column.Caption = "Número";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(8);

            column.SetDataItemTemplateContent(c =>
            {
                SalesOrder order = (SalesOrder)Model[c.ItemIndex];
                ViewContext.Writer.Write(order.Document.number);
            });
        });

        settings.Columns.Add(column =>
        {
            column.Caption = "Tipo de Documento";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(10);

            column.SetDataItemTemplateContent(c =>
            {
                SalesOrder order = (SalesOrder)Model[c.ItemIndex];
                ViewContext.Writer.Write(order.Document.DocumentType.name);
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_customer";
            column.Caption = "Cliente";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            //column.Width = Unit.Percentage(15);
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;

            column.SetDataItemTemplateContent(c =>
            {
                SalesOrder order = (SalesOrder)Model[c.ItemIndex];
                ViewContext.Writer.Write(order.Customer != null ? order.Customer.Person.fullname_businessName: "Stock");
            });
        });

        settings.Columns.Add(m => m.Document.emissionDate, column =>
        {
            //column.FieldName = "emissionDate";
            column.Caption = "Fecha de Emisión";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Width = Unit.Percentage(8);

            column.EditorProperties().DateEdit(editorDate =>
            {
                editorDate.DisplayFormatInEditMode = true;
                editorDate.DisplayFormatString = "dd/MM/yyyy";
                editorDate.EditFormat = EditFormat.Custom;
                editorDate.EditFormatString = "dd/MM/yyyy";
            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "requiredLogistic";
            column.Caption = "Logística";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.Width = Unit.Percentage(3);
        });

        //settings.Columns.Add(column =>
        //{
        //    column.FieldName = "isImportation";
        //    column.Caption = "Requeire Importación";
        //    column.ColumnType = MVCxGridViewColumnType.CheckBox;
        //    column.Width = Unit.Percentage(3);
        //});

        settings.Columns.Add(column =>
        {
            //column.FieldName = "id_documentState";
            column.Caption = "Estado";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(5);

            column.SetDataItemTemplateContent(c =>
            {
                SalesOrder order = (SalesOrder)Model[c.ItemIndex];
                ViewContext.Writer.Write(order.Document.DocumentState.name);
            });

            column.EditorProperties().ComboBox(c =>
            {
                c.DataSource = DataProviderDocumentState.DocumentStates((int)ViewData["id_company"]);
                c.ValueField = "id";
                c.TextField = "name";
                c.ValueType = typeof(int);
                c.Width = Unit.Percentage(100);
                c.DropDownStyle = DropDownStyle.DropDownList;
                c.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                c.EnableSynchronization = DefaultBoolean.False;
                c.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                //c.ClientSideEvents.SelectedIndexChanged = "DocumentTypesCombo_SelectedIndexChanged";
            });
        });

        // COMMAND COLUMN

        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn();
        commandColumn.ShowEditButton = false;
        commandColumn.ShowDeleteButton = false;
        commandColumn.Visible = true;
        commandColumn.VisibleIndex = 14;
        commandColumn.Caption = "Acciones";
        commandColumn.Width = Unit.Percentage(8);

        commandColumn.CustomButtons.Add(
            new GridViewCommandColumnCustomButton
            {
                ID = "btnEditRow",
                Text = "Editar"
            }
        );
        settings.ClientSideEvents.CustomButtonClick = "SalesOrdersGridViewCustomCommandButton_Click";
        settings.Columns.Add(commandColumn);

    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {

    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
    
}