@using DevExpress.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models



@{
    var grid = Html.DevExpress().GridView<TransportTariff>(settings =>
    {


        settings.Name = "gvTransportTariff";
        settings.CallbackRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffPartial" };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffPartialDelete" };
        settings.CustomActionRouteValues = new { Controller = "TransportTariff", Action = "DeleteSelectedTransportTariff" };

        settings.KeyFieldName = "id";

        settings.Width = Unit.Percentage(100);


        #region GRIDVIEW BEHAIVOR

        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
            e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

            if (ViewData["EditMessage"] != null)
            {
                e.Properties["cpEditMessage"] = ViewData["EditMessage"];
            }
        };


        #endregion

        #region EDITFORM

        settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
        settings.SettingsText.PopupEditFormCaption = "Editar Tarifario de Transporte";

        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.Width = 800;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
        

        settings.SettingsBehavior.ConfirmDelete = true;

        #endregion

        #region PAGER

        settings.SettingsPager.Visible = true;

        #endregion

        #region CLIENT SIDE EVENTS (JAVASCRIPT)

        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

        #endregion

        #region SEARCH PANEL

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        #endregion

        #region TITLE PANEL

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Tarifarios de Transporte</span>");
        });

        #endregion

        #region GROUP PANEL

        settings.Settings.ShowGroupPanel = true;

        #endregion

        #region FILTER ROW

        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowFilterRowMenu = true;
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

        #endregion

        #region FOOTER ROW

        settings.Settings.ShowFooter = true;

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""UnselectAllRows();"">Anular Selección</a>"
                );
            }
        });


        #endregion

        #region COMMAND COLUMN

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(2);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        #endregion

        #region MASTER DETAILS VIEW

        settings.SettingsDetail.ShowDetailRow = false; // flechas de la deracha para visualizar el detalle
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;


        //settings.SetDetailRowTemplateContent(column =>
        //{
        //    int? id_TransportTariff = (int?)DataBinder.Eval(column.DataItem, "id");
        //    TransportTariff transportTariff = DataProviderTransportTariff.TransportTariffById((int)id_TransportTariff);
        //    Html.RenderPartial("_TransportTariffsDetailPartial", transportTariff);
        //});

        #endregion

        #region AUTOGENERATED

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        #endregion

        #region Columns

        /* Nombre Tarifaruio*/
        settings.Columns.Add(m => m.name, column =>
        {
            column.Name = "name";
            column.Caption = "Tarifario";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(8);

        });

        /* Tipo de tarifario - Tipo de Transporte */
        /*  m.Provider.ProviderGeneralData.ProviderType.name*/
        settings.Columns.Add(m => m.TransportTariffType.PurchaseOrderShippingType.name , column =>
        {
            column.Name = "transportTariffTypeShippingType";
            column.Caption = "Tipo de Transporte";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(8);



            column.SetDataItemTemplateContent(c =>
            {

                int? id_TransportTariffType = (int)DataBinder.Eval(c.DataItem, "id_TransportTariffType");
                TransportTariffType transportTariffType =  DataProviderTransportTariffType.TransportTariffTypeById((int) id_TransportTariffType);
                if (transportTariffType != null)
                {
                    ViewContext.Writer.Write(transportTariffType.name);
                }

            });

        });

        /* Tipo de tarifario - Tipo de Transporte */
        /*  m.Provider.ProviderGeneralData.ProviderType.name*/
        settings.Columns.Add(m => m.TransportTariffType.isInternal, column =>
        {
            column.Name = "transportTariffTypeisInternal";
            column.Caption = "Transporte Interno?";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            column.Width = Unit.Percentage(8);

        });


        /* Fecha Inicio Vingencia*/
        settings.Columns.Add(column =>
        {
            column.FieldName = "dateInit";
            column.Caption = "Fecha Inicio Vigencia";
            column.Width = Unit.Percentage(15);
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";


        });

        /* Fecha Inicio Vingencia*/
        settings.Columns.Add(column =>
        {
            column.FieldName = "dateEnd";
            column.Caption = "Fecha Fin Vigencia";
            column.Width = Unit.Percentage(15);
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";

        });


        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Caption = "¿Activo?";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
        });

        if (ShowEditButton() || ShowDeleteButton())
        {
            MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
            {
                ShowEditButton = ShowEditButton(),
                ShowDeleteButton = false,
                Visible = true,
                VisibleIndex = 10,
                Width = Unit.Percentage(5),
                Caption = "Acciones"
            };

            if (ShowDeleteButton())
            {
                commandColumn.CustomButtons.Add(
                      new GridViewCommandColumnCustomButton
                      {
                          ID = "btnDeleteRow",
                          Text = "Eliminar"
                      }
                );
            }

            settings.ClientSideEvents.CustomButtonClick = "GridViewTransportTariffCustomCommandButton_Click";

            settings.Columns.Add(commandColumn);
        }



        /*  ver detalle */
        settings.SetDetailRowTemplateContent(column =>
        {
            // var idCompany = DataBinder.Eval(column.DataItem, "id");
            //ViewData["id_company"] = idCompany;

            int idtransportTariff = (int)DataBinder.Eval(column.DataItem, "id");
            TransportTariff transportTariffs = DataProviderTransportTariff.TransportTariffById(idtransportTariff);
            // Html.RenderAction("TransportTariffsDetailPartial", new { transportTariff = transportTariffs });
            //  Html.RenderPartial("_TransportTariffsDetailPartial", transportTariffs);
        });

        #endregion

        #region EditorLayout
        /*  UUUUUU */
        settings.SetEditFormTemplateContent(content =>
        {
            int? id_transportTariff = (int?)DataBinder.Eval(content.DataItem, "id");
            TransportTariff transportTariff = (id_transportTariff != null) ? DataProviderTransportTariff.TransportTariffById((int)id_transportTariff) : new TransportTariff { isActive = true };
            Html.RenderPartial("_TransportTariffFormEditPartial", transportTariff);
        });

        #endregion

        settings.PreRender = (s, e) =>
        {
            MVCxGridView g = (s as MVCxGridView);
            if (g != null)
            {
                g.FilterExpression = "isActive = true";
            }
        };
    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }


}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }

    bool ShowEditButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(10));
    }

    bool ShowDeleteButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(8));
    }

}