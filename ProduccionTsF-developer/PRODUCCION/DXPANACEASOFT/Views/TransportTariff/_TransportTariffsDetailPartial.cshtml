@using System.Web.Mvc
@using System.Web.Mvc.Html
@using DevExpress.XtraReports.Data
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models

@model List<DXPANACEASOFT.Models.TransportTariffDetail>


@{

    var grid = Html.DevExpress().GridView<TransportTariffDetail>(settings =>

    {

        settings.Name = "gvTransportTariffDetail";
        settings.CallbackRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffDetail" };

        settings.CustomActionRouteValues= new { Controller = "TransportTariff", Action = "TransportTariffDetailChangePartial" };

        settings.ClientSideEvents.BeginCallback = "TransportTariffDetail_OnBeginCallback";

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffDetailAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffDetailUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "TransportTariff", Action = "TransportTariffDetailDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.AllowFixedGroups = true;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;


        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.Width = 800;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";

        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;


        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 9;

        #region SEARCH PANEL

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";
        #endregion

        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;

        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.CommandColumn.Width = Unit.Percentage(8);


        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["isActive"] = true;
            e.NewValues["orderTariff"] = 0;
        };


        settings.CellEditorInitialize = (sender, e) =>
        {
            if (e.Column.FieldName == "id_FishingSite" || e.Column.FieldName == "id_TransportSize" || e.Column.FieldName == "tariff")
            {

                MVCxGridView g = sender as MVCxGridView;

                if (g.IsNewRowEditing)
                {
                    e.Editor.ReadOnly = false;

                }
                else
                {
                    if(e.Column.FieldName == "id_FishingSite" || e.Column.FieldName == "id_TransportSize")
                    {

                        e.Editor.ReadOnly = true;
                    }
                    else
                    {
                        e.Editor.ReadOnly = false;
                    }

                }



            }
        };

        /*Sitio de Cosecha*/
        settings.Columns.Add(d => d.FishingSite, column =>
        {
            column.FieldName = "id_FishingSite";
            column.Caption = "Sitio de Cosecha :";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;


            column.SetDataItemTemplateContent(c =>
            {

                int? id_FishingSite = (int)DataBinder.Eval(c.DataItem, "id_FishingSite");
                FishingSite fishingSite = DataProviderFishingSite.FishingSiteById(id_FishingSite);
                String fishingZoneName = fishingSite.FishingZone.name ?? "";
                String fishingSiteNameDisplay = fishingSite.name +" ( Zona:"+ fishingZoneName+") ";

                if (fishingSite != null)
                {
                    ViewContext.Writer.Write(fishingSiteNameDisplay);
                }
            });




            column.EditorProperties().ComboBox(p =>
            {

                p.ClientInstanceName = "id_FishingSite";
                p.DataSource = DataProviderFishingSite.FishingSites((int)ViewData["id_company"]);
                p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.TextField = "name";

                p.ValueType = typeof(int);
                p.Columns.Add("code", "Cod.", 50);
                p.Columns.Add("name", "Sitio", 170);
                //p.Columns.Add("FishingZone.{0}.Name", "Zona", 100);
                p.Columns.Add(string.Format("FishingZone.{0}", "name"), "Zona", 100);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;

                //p.EnableSynchronization = DefaultBoolean.False;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.ClientSideEvents.SelectedIndexChanged = "OnTTDFishingSiteSelectedIndexChanged";
                p.ClientSideEvents.Validation = "OnTTDFishingSiteValid";
                //e.Grid.IsNewRowEditing;

                p.Width = Unit.Percentage(100);


            });



        }).GroupIndex = 1;

        /*   tamaño de transporte */
        /*   Validar si es un tipo de tranporte interno o no si el tipo de tarifario tiene un tipo de tranpsorte tipo vehiculo */
        // -- si no es interno Y  dbo.[TransportTariffType] / id_shippingType  -> [PurchaseOrderShippingType].isTerrestriel =1


        settings.Columns.Add( d=>d.TransportSize ,column =>
        {

            column.FieldName = "id_TransportSize";
            column.Caption = "Tamaño de Transporte";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;



            column.SetDataItemTemplateContent(c =>
            {

                int? id_TransportSize = (int)DataBinder.Eval(c.DataItem, "id_TransportSize");
                TransportSize transportSize = DataProviderTransportSize.TrasportSizeById((int) id_TransportSize);
                if (transportSize != null)
                {
                    ViewContext.Writer.Write(transportSize.name);
                }

            });


            column.EditorProperties().ComboBox(p =>
            {

                p.ClientSideEvents.Init = "OnTTDFishingSiteSelectedIndexChanged";
                p.ClientInstanceName = "id_TransportSize";

                p.TextField = "name";
                p.TextFormatString = "{1}";
                p.ValueField = "id";
                p.ValueType = typeof(int);

                p.Columns.Add("code", "Cod.", 50);
                p.Columns.Add("name", "Nombre", 100);
                p.DropDownStyle = DropDownStyle.DropDownList;
                p.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                p.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                p.ClientSideEvents.Validation = "OnTTDTransportSizeValidation";
                p.Width = Unit.Percentage(100);


            });
            //fin


        });
        //fin tamaño transporte


        /* Tarifa */
        settings.Columns.Add(column =>
        {
            column.FieldName = "tariff";
            column.Caption = "Tarifa ";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;


            column.SetDataItemTemplateContent(c =>
            {
                decimal? tariff = (decimal?)DataBinder.Eval(c.DataItem, "tariff");
                ViewContext.Writer.Write(tariff != null ? tariff.Value.ToString("N2") : "");
            });

            column.EditorProperties().SpinEdit(p =>
            {
                p.ClientInstanceName = "tariff";
                p.NumberType = SpinEditNumberType.Float;
                p.DecimalPlaces = 2;
                p.AllowMouseWheel = true;
                p.LargeIncrement = 1;
                p.MinValue = 0;
                p.MaxValue = 99999;
                p.SpinButtons.ShowLargeIncrementButtons = true;
                p.ClientSideEvents.Validation = "OnTariffControlValidation";
            });
        });


        /* Orden  Tarifa */
        settings.Columns.Add(column =>
        {
            column.FieldName = "orderTariff";
            column.Caption = "Orden ";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.ReadOnly = true;


            column.EditorProperties().TextBox(p =>
            {

                p.ClientInstanceName = "orderTariff";

            });
        });

        /* Estado */
        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Name = "isActive";
            column.Caption = "¿Activo?";
            column.Width = Unit.Percentage(3);
            column.ColumnType = MVCxGridViewColumnType.CheckBox;
            //column.AutoFilterBy("Sí");
            //column.Settings.AllowAutoFilter = DefaultBoolean.True;

            column.EditorProperties().CheckBox(p =>
            {
                p.ClientInstanceName = "isActive";
            });

        });


        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            //    e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
            e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

            if (ViewData["EditMessage"] != null)
            {
                e.Properties["cpEditMessage"] = ViewData["EditMessage"];
            }

        };



    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model ).GetHtml()