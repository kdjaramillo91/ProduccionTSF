@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "gvPermissions";
        settings.CallbackRouteValues = new { Controller = "Permission", Action = "PermissionsPartial" };

        //settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Permission", Action = "PermissionsPartialAddNew" };
        //settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Permission", Action = "PermissionsPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Permission", Action = "PermissionsPartialDelete" };
        
        settings.Width = Unit.Percentage(100);

        settings.KeyFieldName = "id";
        
        #region  GridViewBehavior

        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Checkbox seleccionado para nuevos registros
        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["isActive"] = true;
        };

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        #endregion

        #region EditForm

        settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
        settings.SettingsText.PopupEditFormCaption = "Editar Permiso";

        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.Width = 800;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

        settings.SettingsBehavior.ConfirmDelete = true;

        #endregion

        #region  Pager

        settings.SettingsPager.Visible = true;

        #endregion

        #region ClientSideEvents(JavaScript)

        //Eventos
        settings.ClientSideEvents.Init = "OnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
        settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

        #endregion

        #region SearchPanel

        //Panel de Busqueda
        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        #endregion

        #region TitlePanel

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado Permisos</span>");
        });

        #endregion

        #region GroupPanel

        settings.Settings.ShowGroupPanel = true;

        #endregion

        #region Filter

        settings.Settings.ShowFilterRow = true;
        //Boton de filtro para las columnas de la tabla
        settings.Settings.ShowFilterRowMenu = true;
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

        #endregion

        #region Footer

        //Pie de tabla
        settings.Settings.ShowFooter = true;

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""UnselectAllRows();"">Anular Selección</a>"
                );
            }
        });

        #endregion

        #region MasterDetailsView

        settings.SettingsDetail.ShowDetailRow = true;
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;


        settings.SetDetailRowTemplateContent(column =>
        {
            int? id_permission = (int?)DataBinder.Eval(column.DataItem, "id");
            Permission permission = DataProviderPermission.Permission(id_permission);
            Html.RenderPartial("_PermissionDetailsPartial", permission);
        });

        #endregion

        #region COMMAND COLUMN

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.Width = Unit.Percentage(2);
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

        #endregion

        #region AUTOGENERATED

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;

        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        #endregion

        #region COLUMNS

        settings.Columns.Add(column =>
        {
            column.FieldName = "name";
            column.Name = "name";
            column.Caption = "Permiso";

            column.ColumnType = MVCxGridViewColumnType.TextBox;

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "description";
            column.Name = "description";
            column.Caption = "Descripción";

            column.ColumnType = MVCxGridViewColumnType.TextBox;

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "isActive";
            column.Name = "isActive";
            column.Caption = "¿Activo?";

            column.Width = Unit.Percentage(3);

            column.ColumnType = MVCxGridViewColumnType.CheckBox;

            column.AutoFilterBy("Sí");
            column.Settings.AllowAutoFilter = DefaultBoolean.True;
        });

        MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
        {
            ShowEditButton = true,
            ShowDeleteButton = false,
            Visible = true,
            VisibleIndex = 10,
            Width = Unit.Percentage(5),
            Caption = "Acciones"
        };

        commandColumn.CustomButtons.Add(
              new GridViewCommandColumnCustomButton
              {
                  ID = "btnDeleteRow",
                  Text = "Eliminar"
              }
        );

        settings.ClientSideEvents.CustomButtonClick = "GridViewPermissionsCustomCommandButton_Click";

        settings.Columns.Add(commandColumn);

        #endregion

        #region EDITOR FORM LAYOUT

        settings.SetEditFormTemplateContent(c =>
        {
            int? id_permission = (int?)DataBinder.Eval(c.DataItem, "id");
            Permission permission = DataProviderPermission.Permission(id_permission);

            permission = permission ?? new Permission
            {
                isActive = true
            };

            Html.RenderPartial("_PermissionEditFormPartial", permission);
        });

        #endregion 

        settings.PreRender = (s, e) =>
        {
            MVCxGridView g = (s as MVCxGridView);
            if (g != null)
            {
                g.FilterExpression = "isActive = true";
            }
        };
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {
    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
    //String GetUserName(int id)
    //{
    //    var user = DataProviderUser.UserById(id);
    //    return user.username;
    //}
}