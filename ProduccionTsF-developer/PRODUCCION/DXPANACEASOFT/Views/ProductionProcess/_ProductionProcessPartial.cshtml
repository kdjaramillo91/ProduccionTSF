@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
	var grid = Html.DevExpress().GridView(settings =>
	{
		settings.Name = "gvProductionProcess";
		settings.CallbackRouteValues = new { Controller = "ProductionProcess", Action = "ProductionProcessPartial" };

		settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ProductionProcess", Action = "ProductionProcessPartialAddNew" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ProductionProcess", Action = "ProductionProcessPartialUpdate" };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ProductionProcess", Action = "ProductionProcessPartialDelete" };

		settings.CustomActionRouteValues = new { Controller = "ProductionProcess", Action = "DeleteSelectedProductionProcess" };

		settings.Width = Unit.Percentage(100);
		settings.KeyFieldName = "id";


		#region GRIDVIEW  BEHAIVOR

		settings.SettingsBehavior.AllowSelectByRowClick = true;

		settings.CustomJSProperties = (s, e) =>
		{
			MVCxGridView gv = s as MVCxGridView;
			if (gv == null) return;

			e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
			e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
			e.Properties["cpEditingRowKey"] = (gv.IsEditing && gv.GetRowValues(gv.EditingRowVisibleIndex, "id") != null) ? gv.GetRowValues(gv.EditingRowVisibleIndex, "id") : 0;

			if (ViewData["EditMessage"] != null)
			{
				e.Properties["cpEditMessage"] = ViewData["EditMessage"];
			}
		};

		#endregion

		#region EDITFORM

		settings.SettingsEditing.Mode = GridViewEditingMode.EditForm;
		settings.SettingsText.PopupEditFormCaption = "Estado de lote de producción";
		settings.SettingsPopup.EditForm.Modal = true;
		settings.SettingsPopup.EditForm.Width = 800;
		settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
		settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;

		settings.SettingsBehavior.ConfirmDelete = true;

		#endregion

		#region PAGER

		settings.SettingsPager.Visible = true;

		#endregion

		#region CLIENT SIDE EVENTS (JAVASCRIPT)

		settings.ClientSideEvents.Init = "OnGridViewInit";
		settings.ClientSideEvents.SelectionChanged = "OnGridViewSelectionChanged";
		settings.ClientSideEvents.BeginCallback = "OnGridViewBeginCallback";
		settings.ClientSideEvents.EndCallback = "OnGridViewEndCallback";

		#endregion

		#region SEARCH PANEL

		settings.SettingsSearchPanel.Visible = true;
		settings.Styles.SearchPanel.CssClass = "searchPanel";

		#endregion

		#region TITLE PANEL

		settings.Settings.ShowTitlePanel = true;
		settings.Styles.TitlePanel.CssClass = "titleContainer";

		settings.SetTitlePanelTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblTilte"">Proceso de producción</span>");
		});

		#endregion

		#region GROUP PANEL

		settings.Settings.ShowGroupPanel = true;

		#endregion

		#region FILTER ROW

		settings.Settings.ShowFilterRow = true;
		settings.Settings.ShowFilterRowMenu = true;
		settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

		#endregion

		#region FOOTER ROW

		settings.Settings.ShowFooter = true;

		settings.SetFooterRowTemplateContent(c =>
		{
			ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
			if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
			{
				ViewContext.Writer.Write(
					@"<a href=""javascript:;"" id=""lnkSelectAllRows"" style=""cursor pointer;"" onclick=""SelectAllRows();"">Seleccionar Todos</a>
                    <a href=""javascript:;"" id=""lnkClearSelection"" style=""cursor pointer;"" onclick=""UnselectAllRows();"">Anular Selección </a>"
						);
			}
		});

		#endregion

		#region COMAND COLUMN

		settings.CommandColumn.Visible = true;
		settings.CommandColumn.Width = Unit.Percentage(2);
		settings.CommandColumn.ShowSelectCheckbox = true;
		settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;

		#endregion

		#region MASTER DETAILS

		settings.SettingsDetail.ShowDetailRow = true;
		settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;

		settings.SetDetailRowTemplateContent(c =>
		{
			int? id_productionProcess = (int?)DataBinder.Eval(c.DataItem, "id");
			ProductionProcess productionProcess = DataProviderProductionProcess.ProductionProcessById(id_productionProcess);

			Html.RenderPartial("_ProductionProcessDetailPartial", productionProcess);
		});

		#endregion

		#region AUTOGENERATED

		settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
		settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
		settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
		settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
		settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

		#endregion

		#region COLUMNS ADD


		settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
		settings.Styles.Header.Font.Bold = true;

		settings.Columns.Add(column =>
		{
			column.FieldName = "code";
			column.Name = "code";
			column.Caption = "Código";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(8);

		});
		settings.Columns.Add(column =>
		{
			column.FieldName = "name";
			column.Name = "name";
			column.Caption = "Nombre";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "sequential";
			column.Name = "sequential";
			column.Caption = "Sequencial";
			column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(7);

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_ProductionUnit";
			column.Name = "id_ProductionUnit";
			column.Caption = "Unidad de Producción";
			column.Visible = true;
			//column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(30);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			var ColProp = column.PropertiesEdit as ComboBoxProperties;
			ColProp.DataSource = DataProviderProductionUnit.ProductionUnitByCompany((int?)ViewData["id_company"]);
			ColProp.ValueField = "id";
			ColProp.TextField = "name";
			ColProp.ValueType = typeof(int);

			column.SetDataItemTemplateContent(c =>
			{
				int? id_ProductionUnit = (int?)DataBinder.Eval(c.DataItem, "id_ProductionUnit");
				var ProductionUnit = DataProviderProductionUnit.ProductionUnitById(id_ProductionUnit);
				string text = "";
				if (ProductionUnit != null)
				{
					text = ProductionUnit.name;

				}

				ViewContext.Writer.Write(text);
			});

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_warehouse";
			column.Name = "id_warehouse";
			column.Caption = "Bodega";
			column.Visible = true;
			//column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(30);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			var ColProp = column.PropertiesEdit as ComboBoxProperties;
			ColProp.DataSource = DataProviderWarehouse.WarehouseByCompany((int?)ViewData["id_company"]);
			ColProp.ValueField = "id";
			ColProp.TextField = "name";
			ColProp.ValueType = typeof(int);

			column.SetDataItemTemplateContent(c =>
			{
				int? id_warehouse = (int?)DataBinder.Eval(c.DataItem, "id_warehouse");
				var warehouse = DataProviderWarehouse.WarehouseById(id_warehouse);
				string text = "";
				if (warehouse != null)
				{
					text = warehouse.name;

				}

				ViewContext.Writer.Write(text);
			});

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_WarehouseLocation";
			column.Name = "id_WarehouseLocation";
			column.Caption = "Ubicación";
			column.Visible = true;
			//column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(30);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			var ColProp = column.PropertiesEdit as ComboBoxProperties;
			ColProp.DataSource = DataProviderWarehouseLocation.WarehouseLocations((int?)ViewData["id_company"]);
			ColProp.ValueField = "id";
			ColProp.TextField = "name";
			ColProp.ValueType = typeof(int);

			column.SetDataItemTemplateContent(c =>
			{
				int? id_warehouseLocation = (int?)DataBinder.Eval(c.DataItem, "id_WarehouseLocation");
				var warehouseLocation = DataProviderWarehouseLocation.WarehouseLocationById(id_warehouseLocation);
				string text = "";
				if (warehouseLocation != null)
				{
					text = warehouseLocation.name;

				}

				ViewContext.Writer.Write(text);
			});

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_CostCenter";
			column.Name = "id_CostCenter";
			column.Caption = "Centro de Costo";
			column.Visible = true;
			//column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(30);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			var ColProp = column.PropertiesEdit as ComboBoxProperties;
			ColProp.DataSource = DataProviderCostCenter.AllCostCenters();
			ColProp.ValueField = "id";
			ColProp.TextField = "name";
			ColProp.ValueType = typeof(int);

			column.SetDataItemTemplateContent(c =>
			{
				int? id_costCenter = (int?)DataBinder.Eval(c.DataItem, "id_CostCenter");
				var CostCenter = DataProviderCostCenter.CostCenterById(id_costCenter);
				string text = "";
				if (CostCenter != null)
				{
					text = CostCenter.name;

				}

				ViewContext.Writer.Write(text);
			});

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "id_SubCostCenter";
			column.Name = "id_SubCostCenter";
			column.Caption = "SubCentro de Costo";
			column.Visible = true;
			//column.ColumnType = MVCxGridViewColumnType.TextBox;
			column.Width = Unit.Percentage(30);
			column.ColumnType = MVCxGridViewColumnType.ComboBox;
			var ColProp = column.PropertiesEdit as ComboBoxProperties;
			ColProp.DataSource = DataProviderCostCenter.SubCostCenters();
			ColProp.ValueField = "id";
			ColProp.TextField = "name";
			ColProp.ValueType = typeof(int);

			column.SetDataItemTemplateContent(c =>
			{
				int? id_subCostCenter = (int?)DataBinder.Eval(c.DataItem, "id_SubCostCenter");
				var SubCostCenter = DataProviderCostCenter.CostCenterById(id_subCostCenter);
				string text = "";
				if (SubCostCenter != null)
				{
					text = SubCostCenter.name;

				}

				ViewContext.Writer.Write(text);
			});

		});

		settings.Columns.Add(column =>
		{
			column.FieldName = "isActive";
			column.Name = "isActive";
			column.PropertiesEdit.ClientInstanceName = "isActive";
			column.Caption = "¿Activo?";
			column.Width = Unit.Percentage(3);
			column.ColumnType = MVCxGridViewColumnType.CheckBox;
			column.Visible = true;
		});

		#endregion

		#region EDITOR FORM LAYOUT

		settings.SetEditFormTemplateContent(c =>
		{
			int? id_productionProcess = (int?)DataBinder.Eval(c.DataItem, "id");
			ProductionProcess productionProcess = DataProviderProductionProcess.ProductionProcessById(id_productionProcess);

			if (productionProcess == null && ViewData["rowToCopy"] != null)
			{
				productionProcess = (ViewData["rowToCopy"] as ProductionProcess) ?? new ProductionProcess
				{
					isActive = true
				};
				productionProcess.id = 0;
				productionProcess.code = "";
				productionProcess.name += "-Copia";
				productionProcess.id_warehouse = 0;
				productionProcess.id_WarehouseLocation = 0;
				productionProcess.id_CostCenter = 0;
				productionProcess.id_SubCostCenter = 0;
			}

			productionProcess = productionProcess ?? new ProductionProcess
			{
				isActive = true
			};
			Html.RenderPartial("_ProductionProcessEditFormPartial", productionProcess);
		});

		#endregion

		#region BOTONES DE COMANDO PARA REGISTRO

		if (ShowEditButton() || ShowDeleteButton())
		{
			MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
			{
				ShowEditButton = ShowEditButton(),
				ShowDeleteButton = false,
				Visible = true,
				VisibleIndex = 10,
				AdaptivePriority = (5),
				Width = Unit.Percentage(5),
				Caption = "Acciones"
			};

			if (ShowDeleteButton())
			{
				commandColumn.CustomButtons.Add(
					  new GridViewCommandColumnCustomButton
					  {
						  ID = "btnDeleteRow",
						  Text = "Eliminar"
					  }
				);
			}

			settings.ClientSideEvents.CustomButtonClick = "GridViewItemsCustomCommandButton_Click";

			settings.Columns.Add(commandColumn);
		}

		#endregion

		settings.Settings.ShowFooter = true;
		settings.SettingsExport.EnableClientSideExportAPI = true;
		settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
		settings.SettingsExport.FileName = "Procesos_Produccion_" + DateTime.Now.ToString("yyyy_MM_dd_hh_mm_ss");
		settings.Toolbars.Add(t =>
		{
			t.EnableAdaptivity = true;
			t.Items.Add(GridViewToolbarCommand.ExportToXls);
			t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
			t.Items.Add(GridViewToolbarCommand.ExportToCsv);
		});

	});

}
@grid.Bind(Model).GetHtml()


@functions {

    bool ShowEditButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(10));
    }

    bool ShowDeleteButton()
    {
        var permissions = (ViewData["permissions"] as List<int>);
        return (permissions != null && permissions.Contains(8));
    }

    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}