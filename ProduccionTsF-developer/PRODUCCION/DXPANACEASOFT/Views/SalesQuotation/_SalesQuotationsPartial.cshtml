@using System.Drawing
@using DXPANACEASOFT.DataProviders
@using DXPANACEASOFT.Models
@{
    var grid = Html.DevExpress().GridView<SalesQuotation>(settings => {
        settings.Name = "gvSalesQuotations";
        settings.CallbackRouteValues = new { Controller = "SalesQuotation", Action = "SalesQuotationsPartial" };

        settings.Width = Unit.Percentage(100);

        settings.SettingsSearchPanel.Visible = true;
        settings.Styles.SearchPanel.CssClass = "searchPanel";

        settings.CommandColumn.Visible = true;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.Page;
        settings.CommandColumn.Width = Unit.Percentage(3);

        settings.KeyFieldName = "id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.Settings.ShowFooter = true;
        settings.Settings.ShowFilterRowMenu = true;

        settings.Settings.ShowTitlePanel = true;
        settings.Styles.TitlePanel.CssClass = "titleContainer";

        settings.Settings.ShowFooter = true;

        settings.ClientSideEvents.Init = "SalesQuotationOnGridViewInit";
        settings.ClientSideEvents.SelectionChanged = "SalesQuotationOnGridViewSelectionChanged";
        settings.ClientSideEvents.EndCallback = "SalesQuotationOnGridViewEndCallback";

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SetTitlePanelTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblTitle"">Listado de Cotizaciones</span>");
        });

        //Panel para cantidad de registros
        settings.CustomJSProperties = (s, e) =>
        {
            MVCxGridView gv = s as MVCxGridView;
            if (gv == null) return;

            e.Properties["cpVisibleRowCount"] = gv.VisibleRowCount;
            e.Properties["cpFilteredRowCountWithoutPage"] = GetFilteredRowCountWithoutPage(gv);
        };

        settings.SetFooterRowTemplateContent(c =>
        {
            ViewContext.Writer.Write(@"<span id=""lblInfo""></span>");
            if (settings.CommandColumn.SelectAllCheckboxMode != GridViewSelectAllCheckBoxMode.AllPages)
            {
                ViewContext.Writer.Write(
                    @"<a id=""lnkSelectAllRows"" style=""cursor: pointer;"" onclick=""SalesQuotationSelectAllRows()"">Seleccionar Todos</a>
                      <a id=""lnkClearSelection"" style=""cursor: pointer;"" onclick=""SalesQuotationClearSelection()"">Anular Selección</a>"
                );
            }
        });

        //MASTER DETAILS
        settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = true;
        settings.SettingsDetail.ShowDetailRow = true;

        //DETALLES EN GRID LLAMADA A OTRA TABLA
        settings.SetDetailRowTemplateContent(column =>
        {
            int? id_saleQuotation = (int?)DataBinder.Eval(column.DataItem, "id");
            SalesQuotation quotation = DataProviderSalesQuotation.SalesQuotation(id_saleQuotation);
            Html.RenderPartial("_SalesQuotationResultsDetailViewPartial", quotation);
        });

        settings.Styles.Header.BackColor = Color.FromArgb(255, 255, 191, 102);
        settings.Styles.Header.Font.Bold = true;

        #region ADD QUOTATIONS

        settings.Columns.Add(m => m.Document.number, column =>
        {
            column.Name = "number";
            column.Caption = "Número";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            column.Width = Unit.Percentage(8);            
        });

        settings.Columns.Add(m => m.Document.emissionDate, column =>
        {
            column.Name = "emissionDate";
            column.Caption = "Fecha de Emisión";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Width = Unit.Percentage(12);

            column.EditorProperties().DateEdit(editorDate =>
            {
                editorDate.DisplayFormatInEditMode = true;
                editorDate.DisplayFormatString = "dd/MM/yyyy";
                editorDate.EditFormat = EditFormat.Custom;
                editorDate.EditFormatString = "dd/MM/yyyy";
            });
        });

        settings.Columns.Add(m => m.Document.EmissionPoint.name, column =>
        {
            column.Name = "emissionPoint";
            column.Caption = "Punto de Emisión";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "id_customer";
            column.Caption = "Cliente";
            column.ColumnType = MVCxGridViewColumnType.TextBox;
            //column.Width = Unit.Percentage(15);
            column.CellStyle.HorizontalAlign = HorizontalAlign.Left;

            column.SetDataItemTemplateContent(c =>
            {
                SalesQuotation quotation = (SalesQuotation)Model[c.ItemIndex];
                ViewContext.Writer.Write(quotation.Customer.Person.fullname_businessName);
            });
        });

        settings.Columns.Add(m => m.Document.DocumentState.id, column =>
        {
            //column.FieldName = "id_documentState";
            column.Caption = "Estado";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Width = Unit.Percentage(5);

            column.SetDataItemTemplateContent(c =>
            {
                SalesQuotation quotation = (SalesQuotation)Model[c.ItemIndex];
                ViewContext.Writer.Write(quotation.Document.DocumentState.name);
            });

            column.EditorProperties().ComboBox(c =>
            {
                c.DataSource = DataProviderDocumentState.DocumentStates((int)ViewData["id_company"]);
                c.ValueField = "id";
                c.TextField = "name";
                c.ValueType = typeof(int);
                c.Width = Unit.Percentage(100);
                c.DropDownStyle = DropDownStyle.DropDownList;
                c.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
                c.EnableSynchronization = DefaultBoolean.False;
                c.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
            });

            // COMMAND COLUMN

            MVCxGridViewCommandColumn commandColumn = new MVCxGridViewCommandColumn
            {
                ShowEditButton = false,
                ShowDeleteButton = false,
                Visible = true,
                VisibleIndex = 14,
                Caption = "Acciones",
                Width = Unit.Percentage(8)
            };

            commandColumn.CustomButtons.Add(
                new GridViewCommandColumnCustomButton
                {
                    ID = "btnEditRow",
                    Text = "Editar"
                }
            );
            settings.ClientSideEvents.CustomButtonClick = "SaleQuoatationsGridViewCustomCommandButton_Click";
            settings.Columns.Add(commandColumn);
        });

        #endregion
    });

    if (ViewData["EditError"] != null){
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

@functions {

    int GetFilteredRowCountWithoutPage(MVCxGridView grid)
    {
        int selectedRowsOnPage = 0;
        foreach (var key in grid.GetCurrentPageRowValues("id"))
        {
            if (grid.Selection.IsRowSelectedByKey(key))
                selectedRowsOnPage++;
        }
        return grid.Selection.FilteredCount - selectedRowsOnPage;
    }
}