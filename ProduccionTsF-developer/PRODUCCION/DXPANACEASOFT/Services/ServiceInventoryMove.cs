
using Dapper;
using DevExpress.CodeParser;
using DevExpress.Web.ASPxHtmlEditor.Internal;
using DevExpress.XtraReports.Wizards.Templates;
using DocumentFormat.OpenXml.Office2010.Excel;
using DXPANACEASOFT.Dapper;

//using DocumentFormat.OpenXml.Spreadsheet;
using DXPANACEASOFT.Models;
using DXPANACEASOFT.Models.Dto;
using DXPANACEASOFT.Models.DTOModel;
using DXPANACEASOFT.Models.Helpers;
using DXPANACEASOFT.Models.InventoryBalance;
using DXPANACEASOFT.Models.InventoryMoveDTO;
using DXPANACEASOFT.Models.Mastereds;
using DXPANACEASOFT.Models.RequestInventoryMoveModel;
using DXPANACEASOFT.Operations;
using EntidadesAuxiliares.General;
using EntidadesAuxiliares.SQL;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using Utilitarios.General;
using Utilitarios.Logs;
using Utilitarios.ProdException;
using static DXPANACEASOFT.Services.ServiceInventoryBalance;

namespace DXPANACEASOFT.Services
{
    public class ServiceInventoryMove
    {
        private static string RUTALOG;
        #region ReCosting

        public static string ReCosting(InventoryMoveDetail inventoryMoveDetail, DBContext db, User ActiveUser)
        {
            string result = "";
            try
            {
                var priceIfReverse = inventoryMoveDetail.InventoryMove.InventoryMove2?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == inventoryMoveDetail.id_item &&
                                                                                                                                fod.id_warehouse == inventoryMoveDetail.id_warehouse &&
                                                                                                                                fod.id_warehouseLocation == inventoryMoveDetail.id_warehouseLocation &&
                                                                                                                                fod.id_lot == inventoryMoveDetail.id_lot).unitPrice;
                var quantity = inventoryMoveDetail.entryAmount - inventoryMoveDetail.exitAmount;
                var entry = quantity > 0;
                var quantityCost = (entry ? (quantity) * (priceIfReverse ?? inventoryMoveDetail.unitPrice) : (quantity) * (priceIfReverse ?? (inventoryMoveDetail?.InventoryMoveDetail3?.averagePrice ?? 0)));
                var balanceaux = (inventoryMoveDetail?.InventoryMoveDetail3?.balance ?? 0) + quantity;
                var balanceCost = (inventoryMoveDetail?.InventoryMoveDetail3?.balanceCost ?? 0) + quantityCost;
                var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);
                inventoryMoveDetail.entryAmountCost = entry ? quantity * (priceIfReverse ?? inventoryMoveDetail.unitPrice) : 0;
                inventoryMoveDetail.exitAmountCost = entry ? 0 : (-quantity) * (priceIfReverse ?? (inventoryMoveDetail?.InventoryMoveDetail3?.averagePrice ?? 0));
                inventoryMoveDetail.id_userUpdate = ActiveUser.id;
                inventoryMoveDetail.dateUpdate = DateTime.Now;
                inventoryMoveDetail.unitPrice = priceIfReverse ?? (entry ? (inventoryMoveDetail.unitPrice) : (inventoryMoveDetail?.InventoryMoveDetail3?.averagePrice ?? 0));
                inventoryMoveDetail.averagePrice = averagePriceAux;
                inventoryMoveDetail.balanceCost = balanceCost;
                db.InventoryMoveDetail.Attach(inventoryMoveDetail);
                db.Entry(inventoryMoveDetail).State = EntityState.Modified;
                if (inventoryMoveDetail.id_inventoryMoveDetailNext != null)
                {
                    ReCosting(inventoryMoveDetail.InventoryMoveDetail4, db, ActiveUser);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        #endregion ReCosting

        #region UpdateInventaryMoveProductionLot

        public static string UpdateInventaryMoveEntryMateriaPrimaReception(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "64" : "63")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);

                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERIMPRA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Recepción de Materia Prima del Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Ingreso Materia Prima Recepción Automático con código(ERIMPRA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouse,
                        id_warehouseLocationExit = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = productionLot.receptionDate
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IMPRA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Recepción de Materia Prima del Lote debido a que no existe el Motivo de Inventario del Sistema, Ingreso Materia Prima Recepción Automático con código(IMPRA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouse,
                        id_warehouseLocationEntry = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = productionLot.receptionDate
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = productionLot.ProductionLotDetail.ToList();

                foreach (var i in itemDetail)
                {
                    var secondsOver = 0;
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null)
                    {
                        throw new Exception("El Producto de Materia Prima: " + i.Item.name + " está configurado como que no gestiona inventario por favor configure esa opción en su mantenimiento e intente esta opción de nuevo.");
                    }

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == i.id_productionLot &&
                                                     d.id_item == i.id_item &&
                                                     d.id_warehouse == i.id_warehouse &&
                                                     d.id_warehouseLocation == i.id_warehouseLocation &&
                                                     !d.inMaximumUnit).ToList();
                    foreach (var inventoryMoveDetail in inventoryMove.InventoryMoveDetail)
                    {
                        if (inventoryMoveDetail.id_lot == i.id_productionLot &&
                                                     inventoryMoveDetail.id_item == i.id_item &&
                                                     inventoryMoveDetail.id_warehouse == i.id_warehouse &&
                                                     inventoryMoveDetail.id_warehouseLocation == i.id_warehouseLocation &&
                                                     !inventoryMoveDetail.inMaximumUnit)
                        {
                            secondsOver++;
                        }
                    }
                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.receptionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal priceAux = i.ProductionLotDetailPurchaseDetail?.FirstOrDefault()?.PurchaseOrderDetail?.price ?? 0;

                    decimal amountMoveAux = i.quantityRecived;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = priceAux;
                    decimal unitPriceInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemPurchaseInformation.MetricUnit.id;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemPurchaseInformation.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    var factorConversion2 = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitInvAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitMovAux)?.factor ?? 0 : 1;
                    if (factorConversion2 == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemPurchaseInformation.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        unitPriceInvAux = unitPriceMoveAux * factorConversion2;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_productionLot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                               i.id_warehouseLocation, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver);

                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_warehouse,
                                                                i.id_warehouseLocation,
                                                                i.id_productionLot,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " el Ingreso de la Materia Prima de Recepción del lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name +
                                            ", perteneciente al Lote: " + tempDetail.Lot.ProductionLot.number);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailEntryProductionLotDetail = i.InventoryMoveDetailEntryProductionLotDetail.FirstOrDefault(fod => fod.id_productionLotDetail == i.id);
                        i.InventoryMoveDetailEntryProductionLotDetail.Remove(detailInventoryMoveDetailEntryProductionLotDetail);
                        db.Entry(detailInventoryMoveDetailEntryProductionLotDetail).State = EntityState.Deleted;
                    }
                    else
                    {
                        i.InventoryMoveDetailEntryProductionLotDetail = new List<InventoryMoveDetailEntryProductionLotDetail>();
                        var newInventoryMoveDetailEntryProductionLotDetail = new InventoryMoveDetailEntryProductionLotDetail
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_productionLotDetail = i.id,
                            ProductionLotDetail = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailEntryProductionLotDetail.Add(newInventoryMoveDetailEntryProductionLotDetail);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveExitMateriaPrimaReception(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "66" : "65")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREMPRA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse el Lote debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Materia Prima Recepción Automático con código(IREMPRA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouse,
                        id_warehouseLocationEntry = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EMPRA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse el Lote en Proceso debido a que no existe el Motivo de Inventario del Sistema, Egreso Materia Prima Recepción Automático con código(EMPRA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouse,
                        id_warehouseLocationExit = productionLot.ProductionLotDetail.FirstOrDefault().id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = productionLot.ProductionLotDetail.ToList();

                foreach (var i in itemDetail)
                {
                    var secondsOver = 0;
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null)
                    {
                        throw new Exception("El Producto de Materia Prima: " + i.Item.name + " está configurado como que no gestiona inventario por favor configure esa opción en su mantenimiento e intente esta opción de nuevo.");
                    }

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == i.id_productionLot &&
                                                     d.id_item == i.id_item &&
                                                     d.id_warehouse == i.id_warehouse &&
                                                     d.id_warehouseLocation == i.id_warehouseLocation &&
                                                     !d.inMaximumUnit).ToList();
                    foreach (var inventoryMoveDetail in inventoryMove.InventoryMoveDetail)
                    {
                        if (inventoryMoveDetail.id_lot == i.id_productionLot &&
                                                     inventoryMoveDetail.id_item == i.id_item &&
                                                     inventoryMoveDetail.id_warehouse == i.id_warehouse &&
                                                     inventoryMoveDetail.id_warehouseLocation == i.id_warehouseLocation &&
                                                     !inventoryMoveDetail.inMaximumUnit)
                        {
                            secondsOver++;
                        }
                    }
                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.receptionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal priceAux = i.ProductionLotDetailPurchaseDetail?.FirstOrDefault()?.PurchaseOrderDetail?.price ?? 0;

                    decimal amountMoveAux = i.quantityRecived;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = priceAux;
                    decimal unitPriceInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemPurchaseInformation.MetricUnit.id;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemPurchaseInformation.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    var factorConversion2 = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitInvAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitMovAux)?.factor ?? 0 : 1;
                    if (factorConversion2 == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemPurchaseInformation.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        unitPriceInvAux = unitPriceMoveAux * factorConversion2;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, i.id_productionLot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                               i.id_warehouseLocation, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver);

                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_warehouse,
                                                                i.id_warehouseLocation,
                                                                i.id_productionLot,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " el Egreso de la Materia Prima de Recepción del Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name +
                                            ", perteneciente al Lote: " + tempDetail.Lot.ProductionLot.number);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailExitProductionLotDetail = i.InventoryMoveDetailExitProductionLotDetail.FirstOrDefault(fod => fod.id_productionLotDetail == i.id);
                        i.InventoryMoveDetailExitProductionLotDetail.Remove(detailInventoryMoveDetailExitProductionLotDetail);
                        db.Entry(detailInventoryMoveDetailExitProductionLotDetail).State = EntityState.Deleted;
                    }
                    else
                    {
                        i.InventoryMoveDetailExitProductionLotDetail = new List<InventoryMoveDetailExitProductionLotDetail>();
                        var newInventoryMoveDetailExitProductionLotDetail = new InventoryMoveDetailExitProductionLotDetail
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_productionLotDetail = i.id,
                            ProductionLotDetail = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailExitProductionLotDetail.Add(newInventoryMoveDetailExitProductionLotDetail);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveEntryDispatchMaterial(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "47" : "46")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);

                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERIMDA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse el Ingreso de Materiales de Despacho debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Ingreso Materiales de Despacho Automático con código(ERIMDA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.ProductionLotDispatchMaterial.FirstOrDefault().id_warehouse,
                        id_warehouseLocationExit = productionLot.ProductionLotDispatchMaterial.FirstOrDefault().id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IMDA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Ingresarse los Materiales de Despacho debido a que no existe el Motivo de Inventario del Sistema, Ingreso Materiales de Despacho Automático con código(IMDA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.ProductionLotDispatchMaterial.FirstOrDefault().id_warehouse,
                        id_warehouseLocationEntry = productionLot.ProductionLotDispatchMaterial.FirstOrDefault().id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = productionLot.ProductionLotDispatchMaterial.ToList();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    if (i.arrivalDestinationQuantity == 0) continue;

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == null &&
                                                     d.id_item == i.id_item &&
                                                     d.id_warehouse == i.Warehouse.id &&
                                                     d.id_warehouseLocation == i.WarehouseLocation.id &&
                                                     !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.receptionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal priceAux = lastInventoryMove?.averagePrice ?? 0;

                    decimal amountMoveAux = i.arrivalDestinationQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, priceAux, amountMoveAux, false, priceAux, i.id_warehouse.Value,
                                                                               i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_warehouse,
                                                                i.id_warehouseLocation,
                                                                null,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " el Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + " del detalle de materiales de despacho");
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailEntryDispatchMaterialsInProductionLot = i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot.FirstOrDefault(fod => fod.id_productionLotDispatchMaterial == i.id);
                        i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot.Remove(detailInventoryMoveDetailEntryDispatchMaterialsInProductionLot);
                        db.Entry(detailInventoryMoveDetailEntryDispatchMaterialsInProductionLot).State = EntityState.Deleted;
                    }
                    else
                    {
                        i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot = new List<InventoryMoveDetailEntryDispatchMaterialsInProductionLot>();
                        var newInventoryMoveDetailEntryDispatchMaterialsInProductionLot = new InventoryMoveDetailEntryDispatchMaterialsInProductionLot
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_productionLotDispatchMaterial = i.id,
                            ProductionLotDispatchMaterial = i,
                            id_remissionGuideDispatchMaterial = i.ProductionLotDispatchMaterialRemissionDetail.FirstOrDefault().id_remissionGuideDispatchMaterial,
                            RemissionGuideDispatchMaterial = i.ProductionLotDispatchMaterialRemissionDetail.FirstOrDefault().RemissionGuideDispatchMaterial,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot.Add(newInventoryMoveDetailEntryDispatchMaterialsInProductionLot);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveEntryLiquidationPlant(User ActiveUser,
                                                                        Company ActiveCompany,
                                                                        EmissionPoint ActiveEmissionPoint,
                                                                        ProductionLot productionLot,
                                                                        DBContext db,
                                                                        bool reverse,
                                                                        InventoryMove inventoryMoveToReverse = null,
                                                                        decimal priceLbs = 0,
                                                                        int? id_costCenter = null,
                                                                        int? id_subCostCenter = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault().id_warehouse);
                }

                #endregion Validar Fecha emision de Reversión

                #region ProductionProcess

                var productionProcess = db.ProductionProcess.FirstOrDefault(r => r.id == productionLot.id_productionProcess);

                #endregion ProductionProcess

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "26" : "23")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                var itemDetail = productionLot.ProductionLotLiquidation.ToList();

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, itemDetail[0].id_warehouse);


                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                int? id_warehouseAux = null;
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;
                id_warehouseAux = productionProcess.id_warehouse;

                // Verificamos si es neceario reversar el movimiento
                var parametroAnularMovAut = db.Setting.FirstOrDefault(e => e.code == "ANUMOVGENAUT");
                if (parametroAnularMovAut == null)
                {
                    throw new Exception("El parámetro ['ANUMOVGENAUT': Anular movimientos de iventarios generados de manera automática] no ha podido ser recuperado.");
                }
                var anularMovimientosAutomaticos = parametroAnularMovAut.value == "SI";

                if (reverse && !anularMovimientosAutomaticos)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERLP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Liquidacion Planta con código(ERLP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;
                    inventoryMove.idWarehouse = productionProcess.id_warehouse;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouse,
                        id_warehouseLocationExit = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }
                else if (reverse && anularMovimientosAutomaticos)
                {
                    var inventoryMoveDetailAux = productionLot.InventoryMove.Where(w => w.InventoryReason.code.Equals("ILP") && w.Document.DocumentState.code == "03").OrderByDescending(d => d.Document.dateCreate).ToList();
                    InventoryMove lastInventoryMoveToReverse = (inventoryMoveDetailAux.Count > 0)
                                                                        ? inventoryMoveDetailAux.First()
                                                                        : null;

                    if (lastInventoryMoveToReverse != null)
                    {
                        var documentRevert = lastInventoryMoveToReverse.Document;
                        documentRevert.id_documentState = db.DocumentState.FirstOrDefault(e => e.code == "05").id;
                        //db.Document.Attach(documentRevert);
                        db.Entry(documentRevert).State = EntityState.Modified;
                    }

                    return "";
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ILP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Ingreso Liquidacion Planta con código(ILP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.idWarehouse = productionProcess.id_warehouse;
                    inventoryMove.sequential = document.sequential;
                    inventoryMove.natureSequential = document.number;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouse,
                        id_warehouseLocationEntry = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = productionLot.receptionDate
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var metricUnitUMTPAux = db.Setting.FirstOrDefault(fod => fod.code.Equals("UMTP"));
                var id_metricUnitUMTPValueAux = int.Parse(metricUnitUMTPAux?.value ?? "0");
                var metricUnitUMTP = db.MetricUnit.FirstOrDefault(fod => fod.id == id_metricUnitUMTPValueAux);

                var id_metricUnitLbsAux = metricUnitUMTP?.id ?? 0;

                #region  -- Optimizacion consulta Saldo --
                SaldoProductoLote[] SaldoValidaAprobacion = null;

                SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                    inventoryMove.idWarehouse,
                                                                    itemDetail.Select(r => new SaldoProductoLote
                                                                    {
                                                                        id_item = r.id_item,
                                                                        id_warehouseLocation = r.id_warehouseLocation,
                                                                        id_lote = r.id_productionLot

                                                                    }).ToArray(),
                                                                    db,
                                                                    null,
                                                                    inventoryMove.Document.emissionDate);

                #endregion
                foreach (var i in itemDetail)
                {
                    var secondsOver = 0;
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    decimal priceAux = 0;
                    if (priceLbs > 0)
                    {
                        var metricUnitAux = i.MetricUnit1;
                        var factorConversionLbs = (metricUnitAux.id != id_metricUnitLbsAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == metricUnitAux.id &&
                                                                                                                                  fod.id_metricDestiny == id_metricUnitLbsAux)?.factor ?? 0 : 1;
                        if (factorConversionLbs == 0)
                        {
                            throw new Exception("Falta el Factor de Conversión entre : " + metricUnitAux.code + " y " + (metricUnitUMTP?.code ?? "") + ".Necesario para el precio Configúrelo, e intente de nuevo");
                        }
                        else
                        {
                            priceAux = priceLbs * factorConversionLbs * (i.Item.Presentation?.minimum ?? 1);
                        }
                    }

                    var id_metricUnitFormulationAux = i.Item.ItemHeadIngredient?.MetricUnit?.id ?? i.MetricUnit.id;
                    var metricUnitFormulationAux = db.MetricUnit.FirstOrDefault(fod => fod.id == id_metricUnitFormulationAux);

                    var factorConversionFormulation = (i.MetricUnit.id != metricUnitFormulationAux.id) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == i.MetricUnit.id &&
                                                                                                                                  fod.id_metricDestiny == metricUnitFormulationAux.id)?.factor ?? 0 : 1;
                    if (factorConversionFormulation == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.MetricUnit.code + " y " + metricUnitFormulationAux.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        priceAux = priceAux * factorConversionFormulation;
                    }

                    decimal amountMoveAux = i.quantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = priceAux;
                    decimal unitPriceInvAux = 0;

                    int id_metricUnitMovAux = i.MetricUnit.id;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    var factorConversion2 = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitInvAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitMovAux)?.factor ?? 0 : 1;
                    if (factorConversion2 == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        unitPriceInvAux = unitPriceMoveAux * factorConversion2;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse,
                                                                                amountInvAux,
                                                                                i.id_item,
                                                                                i.id_productionLot,
                                                                                id_metricUnitInvAux,
                                                                                id_metricUnitMovAux,
                                                                                unitPriceMoveAux,
                                                                                amountMoveAux,
                                                                                false,
                                                                                unitPriceInvAux,
                                                                                i.id_warehouse,
                                                                                i.id_warehouseLocation,
                                                                                null,
                                                                                inventoryMove,
                                                                                ActiveUser,
                                                                                ActiveCompany,
                                                                                db,
                                                                                null,
                                                                                null,
                                                                                secondsOver,
                                                                                0,
                                                                                id_costCenter,
                                                                                id_subCostCenter);

                    #region  -- Optimizacion consulta Saldo --
                    var remainingBalance = (SaldoValidaAprobacion?
                                                        .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                    && r.id_lote == i.id_productionLot
                                                                    && r.id_item == i.id_item)?
                                                        .Sum(r => r.saldo) ?? 0);


                    //var remainingBalance = GetRemainingBalance( ActiveCompany.id, 
                    //                                            i.id_item, 
                    //                                            i.id_warehouse, 
                    //                                            i.id_warehouseLocation, 
                    //                                            i.id_originLot, 
                    //                                            db, 
                    //                                            null, 
                    //                                            i.lotMarked);
                    #endregion

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance + tempDetail.entryAmount) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Liquidación del Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name +
                                            ", perteneciente al Lote: " + tempDetail.Lot.ProductionLot.number);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailEntryProductionLotLiquidation = i.InventoryMoveDetailEntryProductionLotLiquidation.FirstOrDefault(fod => fod.id_productionLotLiquidation == i.id);
                        if (detailInventoryMoveDetailEntryProductionLotLiquidation != null)
                        {
                            i.InventoryMoveDetailEntryProductionLotLiquidation.Remove(detailInventoryMoveDetailEntryProductionLotLiquidation);
                            db.Entry(detailInventoryMoveDetailEntryProductionLotLiquidation).State = EntityState.Deleted;
                        }
                    }
                    else
                    {
                        i.InventoryMoveDetailEntryProductionLotLiquidation = new List<InventoryMoveDetailEntryProductionLotLiquidation>();
                        var newInventoryMoveDetailEntryProductionLotLiquidation = new InventoryMoveDetailEntryProductionLotLiquidation
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_productionLotLiquidation = i.id,
                            ProductionLotLiquidation = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailEntryProductionLotLiquidation.Add(newInventoryMoveDetailEntryProductionLotLiquidation);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveExitPackingMaterial(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Check a Param of Exit automatic

                var aprobarReversarSE = reverse ? "Reversar" : "Efectuar";
                Setting settingAEME = db.Setting.FirstOrDefault(t => t.code == "AEME");
                if (settingAEME == null)
                {
                    throw new Exception("No se pudo " + aprobarReversarSE + " el Egreso de los Materiales de Empaque debido a no estar configurado el Parámetro de: Automático Egreso de Materiales de Empaque con código(AEME) " +
                                        "necesario para egresarlos de manera automática o no");
                }
                if (reverse)
                {
                    var inventoryMoveDetailExitPackingMaterialEME = productionLot.ProductionLotPackingMaterial.FirstOrDefault()?.InventoryMoveDetailExitPackingMaterial?.FirstOrDefault(fod => fod.InventoryMoveDetail.InventoryMove.InventoryReason.code.Equals("EME"))?.InventoryMoveDetail.InventoryMove;

                    if (inventoryMoveDetailExitPackingMaterialEME != null)
                    {
                        throw new Exception("No se pudo Reversar el Egreso de los Materiales de Empaque debido a tener hecho Egreso de Materiales de Empaque de forma manual. Revéreselo de forma manual e inténtelo de nuevo.");
                    }
                }

                if (settingAEME.value == "0")
                {
                    return result;
                }

                #endregion Check a Param of Exit automatic

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    foreach (var item in inventoryMoveToReverse.InventoryMoveDetail)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, item.id_warehouse);
                    }
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "51" : "52")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.liquidationDate.Value;

                var itemDetail = productionLot.ProductionLotPackingMaterial.ToList();
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = null;
                inventoryMove.ProductionLot = null;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                // Verificamos si es neceario reversar el movimiento
                var parametroAnularMovAut = db.Setting.FirstOrDefault(e => e.code == "ANUMOVGENAUT");
                if (parametroAnularMovAut == null)
                {
                    throw new Exception("El parámetro ['ANUMOVGENAUT': Anular movimientos de iventarios generados de manera automática] no ha podido ser recuperado.");
                }
                var anularMovimientosAutomaticos = parametroAnularMovAut.value == "SI";

                if (reverse && !anularMovimientosAutomaticos)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREMEA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No se pudo Reversar el Egreso de material de Empaque debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Materiales de Empaque Automatica con código(IREMEA), que el administrador del sistema lo configure.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = null,
                        id_warehouseLocationEntry = null,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else if (reverse && anularMovimientosAutomaticos)
                {
                    var inventoryMoveDetailAux = productionLot.InventoryMove.Where(w => w.InventoryReason.code.Equals("EMEA") && w.Document.DocumentState.code == "03").OrderByDescending(d => d.Document.dateCreate).ToList();
                    InventoryMove lastInventoryMoveToReverse = (inventoryMoveDetailAux.Count > 0)
                                                                        ? inventoryMoveDetailAux.First()
                                                                        : null;

                    if (lastInventoryMoveToReverse != null)
                    {
                        var documentRevert = lastInventoryMoveToReverse.Document;
                        documentRevert.id_documentState = db.DocumentState.FirstOrDefault(e => e.code == "05").id;
                        db.Document.Attach(documentRevert);
                        db.Entry(documentRevert).State = EntityState.Modified;
                    }

                    return "";
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EMEA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No se pudo Efectuar el Egreso de material de Empaque debido a que no existe el Motivo de Inventario del Sistema, Egreso Materiales de Empaque Automático con código(EMEA), que el administrador del sistema lo configure.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = null,
                        id_warehouseLocationExit = null,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item).WarehouseLocation;
                    }
                    else
                    {
                        Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new Exception("No se pudo efectuar el Egreso de material de Empaque Automaticamente debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new Exception("No se pudo efectuar el Egreso de material de Empaque Automaticamente debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                        var id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                        warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);
                    }

                    List<InventoryMoveDetail> lastsMoveDetails =
                    db.InventoryMoveDetail.Where(d =>
                                                 d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                 d.id_lot == null &&
                                                 d.id_item == i.id_item &&
                                                 d.id_warehouse == warehouseLocationAux.Warehouse.id &&
                                                 d.id_warehouseLocation == warehouseLocationAux.id &&
                                                 !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.liquidationDate.Value, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.quantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("No se pudo " + aprobarReversarSE + " el Egreso de material de Empaque Automaticamente debido a que falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo.");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        throw new Exception("No se pudo " + aprobarReversarSE + " el Egreso de material de Empaque Automaticamente debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailExitPackingMaterial = i.InventoryMoveDetailExitPackingMaterial.FirstOrDefault(fod => fod.id_productionLotPackingMaterial == i.id);
                        i.InventoryMoveDetailExitPackingMaterial.Remove(detailInventoryMoveDetailExitPackingMaterial);
                        db.Entry(detailInventoryMoveDetailExitPackingMaterial).State = EntityState.Deleted;
                    }
                    else
                    {
                        i.InventoryMoveDetailExitPackingMaterial = new List<InventoryMoveDetailExitPackingMaterial>();
                        var newInventoryMoveDetailExitPackingMaterial = new InventoryMoveDetailExitPackingMaterial
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_productionLotPackingMaterial = i.id,
                            ProductionLotPackingMaterial = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailExitPackingMaterial.Add(newInventoryMoveDetailExitPackingMaterial);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
            }

            return result;
        }

        public static string UpdateInventaryMoveEntryTrash(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    foreach (var item in inventoryMoveToReverse.InventoryMoveDetail)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, item.id_warehouse);
                    }
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "27" : "24")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                var itemDetail = productionLot.ProductionLotTrash.ToList();
                foreach (var item in itemDetail)
                {
                    ValidateEmissionDateInventoryMove(db, document.emissionDate, false, item.id_warehouse);
                }
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                int? id_warehouseAux = null;
                id_warehouseAux = productionLot.ProductionLotTrash.FirstOrDefault().id_warehouse;
                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                // Verificamos si es neceario reversar el movimiento
                var parametroAnularMovAut = db.Setting.FirstOrDefault(e => e.code == "ANUMOVGENAUT");
                if (parametroAnularMovAut == null)
                {
                    throw new Exception("El parámetro ['ANUMOVGENAUT': Anular movimientos de iventarios generados de manera automática] no ha podido ser recuperado.");
                }
                var anularMovimientosAutomaticos = parametroAnularMovAut.value == "SI";

                if (reverse && !anularMovimientosAutomaticos)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERD"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Desperdicio con código(ERD), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.ProductionLotTrash.FirstOrDefault().id_warehouse,
                        id_warehouseLocationExit = productionLot.ProductionLotTrash.FirstOrDefault().id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = productionLot.receptionDate
                    };
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }
                else if (reverse && anularMovimientosAutomaticos)
                {
                    var inventoryMoveDetailAux = productionLot.InventoryMove.Where(w => w.InventoryReason.code.Equals("IDE") && w.Document.DocumentState.code == "03").OrderByDescending(d => d.Document.dateCreate).ToList();
                    InventoryMove lastInventoryMoveToReverse = (inventoryMoveDetailAux.Count > 0)
                                                                        ? inventoryMoveDetailAux.First()
                                                                        : null;

                    if (lastInventoryMoveToReverse != null)
                    {
                        var documentRevert = lastInventoryMoveToReverse.Document;
                        documentRevert.id_documentState = db.DocumentState.FirstOrDefault(e => e.code == "05").id;
                        db.Document.Attach(documentRevert);
                        db.Entry(documentRevert).State = EntityState.Modified;
                    }

                    return "";
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IDE"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Ingreso Desperdicio con código(IDE), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.ProductionLotTrash.FirstOrDefault().id_warehouse,
                        id_warehouseLocationEntry = productionLot.ProductionLotTrash.FirstOrDefault().id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }
                inventoryMove.idWarehouse = id_warehouseAux;
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == i.id_productionLot &&
                                                     d.id_item == i.id_item &&
                                                     d.id_warehouse == i.id_warehouse &&
                                                     d.id_warehouseLocation == i.id_warehouseLocation &&
                                                     !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.receptionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.quantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;

                    int id_metricUnitMovAux = i.MetricUnit.id;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_productionLot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                               i.id_warehouseLocation, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_warehouse,
                                                                i.id_warehouseLocation,
                                                                i.id_productionLot,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Liquidación del Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name +
                                            ", perteneciente al Lote: " + tempDetail.Lot.ProductionLot.number);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveEntryLoss(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    foreach (var item in inventoryMoveToReverse.InventoryMoveDetail)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, item.id_warehouse);
                    }
                   ;
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "151" : "150")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                var itemDetail = productionLot.ProductionLotLoss.ToList();
                foreach (var item in itemDetail)
                {
                    ValidateEmissionDateInventoryMove(db, document.emissionDate, false, item.id_warehouse);
                }
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                int? id_warehouseAux = null;
                id_warehouseAux = productionLot.ProductionLotLoss.FirstOrDefault().id_warehouse;
                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                // Verificamos si es neceario reversar el movimiento
                var parametroAnularMovAut = db.Setting.FirstOrDefault(e => e.code == "ANUMOVGENAUT");
                if (parametroAnularMovAut == null)
                {
                    throw new Exception("El parámetro ['ANUMOVGENAUT': Anular movimientos de iventarios generados de manera automática] no ha podido ser recuperado.");
                }
                var anularMovimientosAutomaticos = parametroAnularMovAut.value == "SI";

                if (reverse && !anularMovimientosAutomaticos)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EPM"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Merma con código(EPM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.ProductionLotLoss.FirstOrDefault().id_warehouse,
                        id_warehouseLocationExit = productionLot.ProductionLotLoss.FirstOrDefault().id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }
                else if (reverse && anularMovimientosAutomaticos)
                {
                    var inventoryMoveDetailAux = productionLot.InventoryMove.Where(w => w.InventoryReason.code.Equals("IPM") && w.Document.DocumentState.code == "03").OrderByDescending(d => d.Document.dateCreate).ToList();
                    InventoryMove lastInventoryMoveToReverse = (inventoryMoveDetailAux.Count > 0)
                                                                        ? inventoryMoveDetailAux.First()
                                                                        : null;

                    if (lastInventoryMoveToReverse != null)
                    {
                        var documentRevert = lastInventoryMoveToReverse.Document;
                        documentRevert.id_documentState = db.DocumentState.FirstOrDefault(e => e.code == "05").id;
                        db.Document.Attach(documentRevert);
                        db.Entry(documentRevert).State = EntityState.Modified;
                    }

                    return "";
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IPM"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Ingreso Merma con código(IPM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.ProductionLotLoss.FirstOrDefault().id_warehouse,
                        id_warehouseLocationEntry = productionLot.ProductionLotLoss.FirstOrDefault().id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }

                inventoryMove.idWarehouse = id_warehouseAux;
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == i.id_productionLot &&
                                                     d.id_item == i.id_item &&
                                                     d.id_warehouse == i.id_warehouse &&
                                                     d.id_warehouseLocation == i.id_warehouseLocation &&
                                                     !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.receptionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.quantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;

                    int id_metricUnitMovAux = i.MetricUnit.id;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_productionLot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                               i.id_warehouseLocation, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_warehouse,
                                                                i.id_warehouseLocation,
                                                                i.id_productionLot,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Liquidación del Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name +
                                            ", perteneciente al Lote: " + tempDetail.Lot.ProductionLot.number);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveEntryLiqudation(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    foreach (var item in inventoryMoveToReverse.InventoryMoveDetail)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, item.id_warehouse);
                    }
                   ;
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();
                var _documentType = db.InventoryReason.FirstOrDefault(t => t.id == productionLot.id_incomeReason).DocumentType.code;
                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "26" : _documentType));
                document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                var itemDetail = productionLot.ProductionLotLiquidation.ToList();
                foreach (var item in itemDetail)
                {
                    ValidateEmissionDateInventoryMove(db, document.emissionDate, false, item.id_wareHouseDetailTransfer);
                }
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                int? id_warehouseAux = null;
                id_warehouseAux = productionLot.id_wareHouseTransfer;
                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                // Verificamos si es neceario reversar el movimiento
                var parametroAnularMovAut = db.Setting.FirstOrDefault(e => e.code == "ANUMOVGENAUT");
                if (parametroAnularMovAut == null)
                {
                    throw new Exception("El parámetro ['ANUMOVGENAUT': Anular movimientos de iventarios generados de manera automática] no ha podido ser recuperado.");
                }
                var anularMovimientosAutomaticos = parametroAnularMovAut.value == "SI";

                if (reverse && !anularMovimientosAutomaticos)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERLP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Merma con código(ERLP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.id_wareHouseTransfer,
                        id_warehouseLocationExit = productionLot.id_wareHouseLocationTransfer,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }
                else if (reverse && anularMovimientosAutomaticos)
                {
                    var documentRevert = inventoryMoveToReverse.Document;
                    documentRevert.id_documentState = db.DocumentState.FirstOrDefault(e => e.code == "05").id;
                    db.Document.Attach(documentRevert);
                    db.Entry(documentRevert).State = EntityState.Modified;

                    return "";
                }
                else
                {
                    var _documentTypeCode = db.InventoryReason.FirstOrDefault(t => t.id == productionLot.id_incomeReason).code;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals(_documentTypeCode));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Transferirse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.id_wareHouseTransfer,
                        id_warehouseLocationEntry = productionLot.id_wareHouseLocationTransfer,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }

                inventoryMove.idWarehouse = id_warehouseAux;
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == i.id_productionLot &&
                                                     d.id_item == i.id_item &&
                                                     d.id_warehouse == i.id_wareHouseDetailTransfer &&
                                                     d.id_warehouseLocation == i.id_wareHouseLocationDetailTransfer &&
                                                     !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.receptionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.quantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;

                    int id_metricUnitMovAux = i.MetricUnit.id;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_productionLot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_wareHouseDetailTransfer.Value,
                                                                               i.id_wareHouseLocationDetailTransfer.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_wareHouseDetailTransfer,
                                                                i.id_wareHouseLocationDetailTransfer,
                                                                i.id_productionLot,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Transferirse";
                        throw new Exception("No puede " + action + " la Liquidación del Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse1.name + ", en la Ubicación: " + tempDetail.WarehouseLocation1.name +
                                            ", perteneciente al Lote: " + tempDetail.Lot.ProductionLot.number);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveExitLiqudation(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    foreach (var item in inventoryMoveToReverse.InventoryMoveDetail)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, item.id_warehouse);
                    }
                   ;
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();
                var _documentType = db.InventoryReason.FirstOrDefault(t => t.id == productionLot.id_dischargeReason).DocumentType.code;
                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "28" : _documentType));
                document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                var itemDetail = productionLot.ProductionLotLiquidation.ToList();
                foreach (var item in itemDetail)
                {
                    ValidateEmissionDateInventoryMove(db, document.emissionDate, false, item.id_wareHouseDetailTransfer);
                }
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                int? id_warehouseAux = null;
                id_warehouseAux = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouse;
                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;


                // Verificamos si es neceario reversar el movimiento
                var parametroAnularMovAut = db.Setting.FirstOrDefault(e => e.code == "ANUMOVGENAUT");
                if (parametroAnularMovAut == null)
                {
                    throw new Exception("El parámetro ['ANUMOVGENAUT': Anular movimientos de iventarios generados de manera automática] no ha podido ser recuperado.");
                }
                var anularMovimientosAutomaticos = parametroAnularMovAut.value == "SI";

                if (reverse && !anularMovimientosAutomaticos)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREPT"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Merma con código(ERLP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouse,
                        id_warehouseLocationEntry = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }
                else if (reverse && anularMovimientosAutomaticos)
                {
                    var documentRevert = inventoryMoveToReverse.Document;
                    documentRevert.id_documentState = db.DocumentState.FirstOrDefault(e => e.code == "05").id;
                    db.Document.Attach(documentRevert);
                    db.Entry(documentRevert).State = EntityState.Modified;

                    return "";
                }
                else
                {
                    var _documentTypeCode = db.InventoryReason.FirstOrDefault(t => t.id == productionLot.id_dischargeReason).code;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals(_documentTypeCode));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Transferirse la Liquidación del Lote debido a que no existe el Motivo de Inventario del Sistema, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouse,
                        id_warehouseLocationExit = productionLot.ProductionLotLiquidation.FirstOrDefault().id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = productionLot.receptionDate
                    };

                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)id_warehouseAux);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                    inventoryMove.isAuthomatic = true;
                    inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                }

                inventoryMove.idWarehouse = id_warehouseAux;
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == i.id_productionLot &&
                                                     d.id_item == i.id_item &&
                                                     d.id_warehouse == i.id_warehouse &&
                                                     d.id_warehouseLocation == i.id_warehouseLocation &&
                                                     !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionLot.receptionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.quantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;

                    int id_metricUnitMovAux = i.MetricUnit.id;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, i.id_productionLot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                               i.id_warehouseLocation, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_warehouse,
                                                                i.id_warehouseLocation,
                                                                i.id_productionLot,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Transferirse";
                        throw new Exception("No puede " + action + " la Liquidación del Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name +
                                            ", perteneciente al Lote: " + tempDetail.Lot.ProductionLot.number);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveExitRawMaterialProcess(User ActiveUser,
                                                                        Company ActiveCompany,
                                                                        EmissionPoint ActiveEmissionPoint,
                                                                        ProductionLot productionLot,
                                                                        DBContext db,
                                                                        bool reverse,
                                                                        InventoryMove inventoryMoveToReverse = null,
                                                                        int? id_costCenter = null,
                                                                        int? id_subCostCenter = null)
        {
            string result = "";
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault().id_warehouse);
                }

                #endregion Validar Fecha emision de Reversión

                #region ProductionProcess

                ProductionProcess productionProcess = db.ProductionProcess.FirstOrDefault(r => r.id == productionLot.id_productionProcess);

                #endregion ProductionProcess

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "28" : "25")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = productionLot.receptionDate;

                var itemDetail = productionLot.ProductionLotDetail.ToList();


                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, itemDetail[0].id_warehouse);

                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = productionLot.id;
                inventoryMove.ProductionLot = productionLot;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                // Verificamos si es neceario reversar el movimiento
                var parametroAnularMovAut = db.Setting.FirstOrDefault(e => e.code == "ANUMOVGENAUT");
                if (parametroAnularMovAut == null)
                {
                    throw new Exception("El parámetro ['ANUMOVGENAUT': Anular movimientos de iventarios generados de manera automática] no ha podido ser recuperado.");
                }
                var anularMovimientosAutomaticos = parametroAnularMovAut.value == "SI";

                if (reverse && !anularMovimientosAutomaticos)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IRMPP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse el Lote en Proceso debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Materia Prima Proceso con código(IRMPP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.idWarehouse = productionProcess.id_warehouse;
                    inventoryMove.sequential = document.sequential;
                    inventoryMove.natureSequential = document.number;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = productionProcess.id_warehouse,
                        id_warehouseLocationEntry = productionProcess.id_WarehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else if (reverse && anularMovimientosAutomaticos)
                {
                    var inventoryMoveDetailAux = productionLot.InventoryMove.Where(w => w.InventoryReason.code.Equals("EMPP") && w.Document.DocumentState.code == "03").OrderByDescending(d => d.Document.dateCreate).ToList();
                    InventoryMove lastInventoryMoveToReverse = (inventoryMoveDetailAux.Count > 0)
                                                                        ? inventoryMoveDetailAux.First()
                                                                        : null;
                    if (lastInventoryMoveToReverse != null)
                    {
                        var documentRevert = lastInventoryMoveToReverse.Document;
                        documentRevert.id_documentState = db.DocumentState.FirstOrDefault(e => e.code == "05").id;
                        //db.Document.Attach(documentRevert);
                        db.Entry(documentRevert).State = EntityState.Modified;
                    }

                    return "";
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EMPP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse el Lote en Proceso debido a que no existe el Motivo de Inventario del Sistema, Egreso Materia Prima Proceso con código(EMPP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.idWarehouse = productionProcess.id_warehouse;
                    inventoryMove.sequential = document.sequential;
                    inventoryMove.natureSequential = document.number;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = productionProcess.id_warehouse,
                        id_warehouseLocationExit = productionProcess.id_WarehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                #region  -- Optimizacion consulta Saldo --
                SaldoProductoLote[] SaldoValidaAprobacion = null;

                SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                    inventoryMove.idWarehouse,
                                                                    itemDetail.Select(r => new SaldoProductoLote
                                                                    {
                                                                        id_item = r.id_item,
                                                                        id_warehouseLocation = r.id_warehouseLocation,
                                                                        id_lote = r.id_originLot

                                                                    }).ToArray(),
                                                                    db,
                                                                    null);

                #endregion

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    decimal amountMoveAux = i.quantityRecived;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    var aprobarReversarSE = reverse ? "Reversarse" : "Aprobarse";
                    if (factorConversion == 0)
                    {
                        throw new Exception("No puede " + aprobarReversarSE + " el Lote en Proceso debido a que falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo.");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailPrepareOP(reverse,
                                                                                amountInvAux,
                                                                                i.id_item,
                                                                                i.id_originLot,
                                                                                id_metricUnitInvAux,
                                                                                id_metricUnitMovAux,
                                                                                0,
                                                                                amountMoveAux,
                                                                                false,
                                                                                0,
                                                                                i.id_warehouse,
                                                                                i.id_warehouseLocation,
                                                                                null,
                                                                                inventoryMove,
                                                                                ActiveUser,
                                                                                ActiveCompany,
                                                                                db,
                                                                                null,
                                                                                null,
                                                                                0,
                                                                                0,
                                                                                id_costCenter,
                                                                                id_subCostCenter, false, null, null, null, null, null, i.lotMarked,
                                                                                productionLot.id_personProcessPlant);
                    #region  -- Optimizacion consulta Saldo --
                    var remainingBalance = (SaldoValidaAprobacion?
                                                        .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                    && r.id_lote == i.id_originLot
                                                                    && r.id_item == i.id_item)?
                                                        .Sum(r => r.saldo) ?? 0);


                    //var remainingBalance = GetRemainingBalance( ActiveCompany.id, 
                    //                                            i.id_item, 
                    //                                            i.id_warehouse, 
                    //                                            i.id_warehouseLocation, 
                    //                                            i.id_originLot, 
                    //                                            db, 
                    //                                            null, 
                    //                                            i.lotMarked);
                    #endregion
                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var item = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                        var warehouse = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                        var warehouseLocation = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);
                        var productionLotErr = db.ProductionLot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                        throw new Exception($"No puede {aprobarReversarSE} el Lote en Proceso debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            $"{item?.name}, en la Bodega: {warehouse?.name}, en la Ubicación: {warehouseLocation?.name}, perteneciente al Lote: {productionLotErr?.number}");
                    }
                }

                #endregion Details

                int batchSize = 25; // Tamaño del lote
                int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                int index = 0;

                using (var transaction = db.Database.BeginTransaction())
                {
                    try
                    {
                        while (index <= totalDetalles)
                        {
                            var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList();

                            foreach (var detalle in batchDetalles)
                            {
                                if (detalle.id == 0)
                                {
                                    db.InventoryMoveDetail.Add(detalle);
                                }

                            }

                            db.SaveChanges();
                            index += batchSize;
                        }
                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        MetodosEscrituraLogs.EscribeExcepcionLogNest(ex, getRutaLog(), "ServiceInventoryMove", "Produccion");
                        transaction.Rollback();
                        throw;
                    }


                }


            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveTransferOpeningClosingPlateLying(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, OpeningClosingPlateLying openingClosingPlateLying, DBContext db, bool reverse, InventoryMove inventoryMoveToReverseExit = null, InventoryMove inventoryMoveToReverseEntry = null)
        {
            string result = "";
            try
            {
                if (reverse)
                {
                    var inventoryMoveExit = UpdateInventaryMoveEntryOpeningClosingPlateLying(ActiveUser, ActiveCompany, ActiveEmissionPoint, openingClosingPlateLying, db, reverse, inventoryMoveToReverseExit);
                    UpdateInventaryMoveExitOpeningClosingPlateLying(ActiveUser, ActiveCompany, ActiveEmissionPoint, openingClosingPlateLying, db, reverse, inventoryMoveToReverseEntry, inventoryMoveExit);
                }
                else
                {
                    var inventoryMoveExit = UpdateInventaryMoveExitOpeningClosingPlateLying(ActiveUser, ActiveCompany, ActiveEmissionPoint, openingClosingPlateLying, db, reverse, inventoryMoveToReverseEntry);
                    UpdateInventaryMoveEntryOpeningClosingPlateLying(ActiveUser, ActiveCompany, ActiveEmissionPoint, openingClosingPlateLying, db, reverse, inventoryMoveToReverseExit, inventoryMoveExit);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitOpeningClosingPlateLying(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, OpeningClosingPlateLying openingClosingPlateLying, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, InventoryMove inventoryMoveExit = null)
        {
            InventoryMove result = null;
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = DateTime.Now;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, openingClosingPlateLying.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREATTP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la tumbada debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Automatico de Transferencia Por Tumbada Placa con código(IREATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = openingClosingPlateLying.id_freezerWarehouse,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else
                {
                    result = inventoryMove;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EATTP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Tumbada debido a que no existe el Motivo de Inventario del Sistema, Egreso Automatico de Transferencia Por Tumbada Placa con código(EATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = openingClosingPlateLying.id_freezerWarehouse,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = openingClosingPlateLying.OpeningClosingPlateLyingDetail.ToList();

                foreach (var i in itemDetail)
                {
                    List<InventoryMoveDetail> lastsMoveDetails = new List<InventoryMoveDetail>();

                    lastsMoveDetails = lastsMoveDetails
                        .Where(w => DateTime.Compare(document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0)
                        .OrderByDescending(d => d.InventoryMove.Document.emissionDate)
                        .ThenByDescending(d => d.dateCreate)
                        .ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    var action = reverse ? "Reversarse" : "Aprobarse";

                    InventoryMoveDetail tempDetail = new InventoryMoveDetail();
                    if (!tempDetail.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                        throw new Exception("No puede " + action + " el egreso por transferencia automática de la Tumbada de Placa debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                    }

                    if (reverse)
                    {
                        var inventoryMoveDetailExitAux = new InventoryMoveDetail();
                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = 0
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryOpeningClosingPlateLying(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, OpeningClosingPlateLying openingClosingPlateLying, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, InventoryMove inventoryMoveExit = null)
        {
            InventoryMove result = null;
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = DateTime.Now;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, openingClosingPlateLying.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    result = inventoryMove;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERIATTP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Tumbada debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Ingreso Automatico de Transferencia Por Tumbada Placa con código(ERIATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IATTP"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Tumbada debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automatico de Transferencia Por Tumbada Placa con código(IATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = openingClosingPlateLying.OpeningClosingPlateLyingDetail.ToList();

                foreach (var i in itemDetail)
                {
                    List<InventoryMoveDetail> lastsMoveDetails = new List<InventoryMoveDetail>();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(openingClosingPlateLying.Document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    var action = reverse ? "Reversarse" : "Aprobarse";

                    InventoryMoveDetail tempDetail = new InventoryMoveDetail();
                    if (!tempDetail.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                        throw new Exception("No puede " + action + " el ingreso por transferencia automática de la Tumbada de Placa debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                    }

                    if (!reverse)
                    {
                        var inventoryMoveDetailExitAux = new InventoryMoveDetail();
                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = 0
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveTransferDispatchMaterialsReception(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverseExit = null, InventoryMove inventoryMoveToReverseEntry = null)
        {
            string result = "";
            try
            {
                if (reverse)
                {
                    var inventoryMoveExit = UpdateInventaryMoveEntryDispatchMaterialsReception(ActiveUser, ActiveCompany, ActiveEmissionPoint, productionLot, db, reverse, inventoryMoveToReverseEntry);
                    UpdateInventaryMoveExitDispatchMaterialsReception(ActiveUser, ActiveCompany, ActiveEmissionPoint, productionLot, db, reverse, inventoryMoveToReverseExit, inventoryMoveExit);
                }
                else
                {
                    var inventoryMoveExit = UpdateInventaryMoveExitDispatchMaterialsReception(ActiveUser, ActiveCompany, ActiveEmissionPoint, productionLot, db, reverse, inventoryMoveToReverseExit);
                    UpdateInventaryMoveEntryDispatchMaterialsReception(ActiveUser, ActiveCompany, ActiveEmissionPoint, productionLot, db, reverse, inventoryMoveToReverseEntry, inventoryMoveExit);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitDispatchMaterialsReception(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, InventoryMove inventoryMoveExit = null)
        {
            InventoryMove result = null;
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = DateTime.Now;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;
                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREPTAMDR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse el Lote debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Por Transferencia Automática Materiales de Despacho en Recepción con código(IREPTAMDR) necesario para reversar la transferencia de Materiales de Despacho, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = null,
                        id_warehouseLocationEntry = null,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else
                {
                    result = inventoryMove;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EPTAMDR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse el Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Materiales de Despacho en Recepción con código(EPTAMDR) necesario para realizar la transferencia de Materiales de Despacho, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = null,
                        id_warehouseLocationExit = null,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = productionLot.ProductionLotDispatchMaterial.ToList();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    if (i.arrivalDestinationQuantity == 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item).WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == productionLot.id_provider);
                        warehouseLocationAux = GetWarehouseLocationProvider(productionLot.id_provider, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse el Lote debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }

                    List<InventoryMoveDetail> lastsMoveDetails =
                    db.InventoryMoveDetail.Where(d =>
                                                 d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                 d.id_lot == null &&
                                                 d.id_item == i.id_item &&
                                                 d.id_warehouse == warehouseLocationAux.Warehouse.id &&
                                                 d.id_warehouseLocation == warehouseLocationAux.id &&
                                                 !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.arrivalDestinationQuantity;

                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " el Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == i.id_warehouse &&
                                                                                                           fod.id_warehouseLocation == i.id_warehouseLocation);

                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = i.sourceExitQuantity
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryDispatchMaterialsReception(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, InventoryMove inventoryMoveExit = null)
        {
            InventoryMove result = null;
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = DateTime.Now;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, productionLot.Lot.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    result = inventoryMove;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERIPTAMDR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse el Lote debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Ingreso Por Transferencia Automática Materiales de Despacho en Recepción con código(ERIPTAMDR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = null,
                        id_warehouseLocationExit = null,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IPTAMDR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Guía debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Materiales de Despacho en Recepción con código(IPTAMDR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = null,
                        id_warehouseLocationEntry = null,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = productionLot.ProductionLotDispatchMaterial.ToList();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    if (i.arrivalDestinationQuantity == 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item).WarehouseLocation;
                    }
                    else
                    {
                        warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation);
                    }

                    List<InventoryMoveDetail> lastsMoveDetails =
                    db.InventoryMoveDetail.Where(d =>
                                                 d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                 d.id_lot == null &&
                                                 d.id_item == i.id_item &&
                                                 d.id_warehouse == warehouseLocationAux.Warehouse.id &&
                                                 d.id_warehouseLocation == warehouseLocationAux.id &&
                                                 !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.arrivalDestinationQuantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;
                    InventoryMoveDetail inventoryMoveDetailExitAux = null;
                    if (reverse)
                    {
                        inventoryMoveDetailExitAux = inventoryMoveToReverse?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == warehouseLocationAux.Warehouse.id &&
                                                                                                           fod.id_warehouseLocation == warehouseLocationAux.id);
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == productionLot.id_provider);
                        WarehouseLocation warehouseLocation2Aux = GetWarehouseLocationProvider(productionLot.id_provider, db, ActiveCompany, ActiveUser);
                        if (warehouseLocation2Aux == null)
                        {
                            throw new Exception("No puede Reversarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }

                        inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                           fod.id_warehouseLocation == warehouseLocation2Aux.id);
                    }
                    unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                    unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " el Lote debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailEntryDispatchMaterialsInProductionLot = i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot.FirstOrDefault(fod => fod.id_productionLotDispatchMaterial == i.id);
                        i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot.Remove(detailInventoryMoveDetailEntryDispatchMaterialsInProductionLot);
                        db.Entry(detailInventoryMoveDetailEntryDispatchMaterialsInProductionLot).State = EntityState.Deleted;
                    }
                    else
                    {
                        i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot = new List<InventoryMoveDetailEntryDispatchMaterialsInProductionLot>();
                        var newInventoryMoveDetailEntryDispatchMaterialsInProductionLot = new InventoryMoveDetailEntryDispatchMaterialsInProductionLot
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_productionLotDispatchMaterial = i.id,
                            ProductionLotDispatchMaterial = i,
                            id_remissionGuideDispatchMaterial = i.ProductionLotDispatchMaterialRemissionDetail.FirstOrDefault().id_remissionGuideDispatchMaterial,
                            RemissionGuideDispatchMaterial = i.ProductionLotDispatchMaterialRemissionDetail.FirstOrDefault().RemissionGuideDispatchMaterial,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailEntryDispatchMaterialsInProductionLot.Add(newInventoryMoveDetailEntryDispatchMaterialsInProductionLot);

                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = i.sourceExitQuantity
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveAutomaticRawMaterialEntry(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, ProductionLot productionLot, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            var modPrecio = db.Setting.FirstOrDefault(fod => fod.code.Equals("MODPREC"));

            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        var id_item = i.id_item;

                        if (modPrecio.value == "SI")
                        {
                            var itemEquivalence = db.ItemEquivalence.FirstOrDefault(e => e.id_item == i.id_item);
                            id_item = db.Item.FirstOrDefault(e => e.id == itemEquivalence.id_itemEquivalence).id;
                        }
                        UpdateStockInventoryItem(id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    string settCxC = db.Setting.FirstOrDefault(fod => fod.code == "HLCXC")?.value ?? "";
                    int? id_warehouseAux = null;
                    int? id_warehouseLocationAux = null;
                    int? id_costCenterAux = null;
                    int? id_subCostCenterAux = null;
                    bool isCopaking = productionLot.isCopackingLot ?? false;
                    Person personAux = null;
                    if (isCopaking)
                    {
                        personAux = db.Person.FirstOrDefault(fod => fod.id == productionLot.id_provider);
                        var providerAux = db.Provider.FirstOrDefault(fod => fod.id == productionLot.id_provider);
                        var providerRawMaterialAux = providerAux?.ProviderRawMaterial;
                        id_warehouseAux = providerRawMaterialAux?.id_Warehouse;
                        id_warehouseLocationAux = providerRawMaterialAux?.id_WarehouseLocation;
                        id_costCenterAux = providerRawMaterialAux?.id_CostCenter;
                        id_subCostCenterAux = providerRawMaterialAux?.id_SubCostCenter;
                    }
                    else
                    {
                        personAux = db.Person.FirstOrDefault(fod => fod.id == productionLot.id_personProcessPlant);
                        var providerAux = db.Provider.FirstOrDefault(fod => fod.id == productionLot.id_personProcessPlant);
                        var providerRawMaterialAux = providerAux?.ProviderRawMaterial;
                        id_warehouseAux = providerRawMaterialAux?.id_Warehouse;
                        id_warehouseLocationAux = providerRawMaterialAux?.id_WarehouseLocation;
                        id_costCenterAux = providerRawMaterialAux?.id_CostCenter;
                        id_subCostCenterAux = providerRawMaterialAux?.id_SubCostCenter;
                    }

                    var textPlace = isCopaking ? "Copaking, del proveedor: " + personAux.fullname_businessName + " perteneciente al lote" : "Planta, del Proceso: " + personAux.processPlant + " perteneciente al lote";
                    if (id_warehouseAux == null)
                    {
                        throw new ProdHandlerException("Debe definir la bodega de Entrada, en la Viñeta " + textPlace);
                    }
                    if (id_warehouseLocationAux == null)
                    {
                        throw new ProdHandlerException("Debe definir la ubicación de Entrada, en la Viñeta " + textPlace);
                    }
                    if (id_costCenterAux == null)
                    {
                        throw new ProdHandlerException("Debe definir el centro de Costo de Entrada, en la Viñeta " + textPlace);
                    }
                    if (id_subCostCenterAux == null)
                    {
                        throw new ProdHandlerException("Debe definir el Subcentro de Costo de Entrada, en la Viñeta " + textPlace);
                    }
                    var id_inventaryMoveAutomaticRawMaterialEntry = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == productionLot.id &&
                                                                                                            fod.Document.DocumentType.code.Equals("137"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveAutomaticRawMaterialEntry);

                    ValidateEmissionDateInventoryMove(db, productionLot.receptionDate, true, id_warehouseAux);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == "137");
                        document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = productionLot.receptionDate;
                        document.description = "Liquidación No: " + productionLot.sequentialLiquidation +
                                               ", Fecha Liq: " + productionLot.liquidationDate.Value.ToString("dd-MM-yyyy") +
                                               ", Lista Precios: " + (productionLot.PriceList.name + " Estado: " + productionLot.PriceList.Document.DocumentState.name + " (" + productionLot.PriceList.Document.DocumentType.name + ") "
                                                                   + productionLot.PriceList.CalendarPriceList.CalendarPriceListType.name
                                                                   + " [" + productionLot.PriceList.startDate.ToString("dd/MM/yyyy") + " - "
                                                                   + productionLot.PriceList.endDate.ToString("dd/MM/yyyy") + "]" + " PROCESO: "
                                                                   + productionLot.PriceList.ProcessType.name + (productionLot.PriceList.commercialDate.HasValue ? " JEFE COMERCIAL ["
                                                                   + productionLot.PriceList.commercialDate.Value.ToString("dd/MM/yyyy hh:mm:ss") + "]" : ""));

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        UpdateDocumentSource(document, productionLot.Lot.Document, db);

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        InventoryReason inventoryReason = null;
                        if (productionLot.isCopackingLot ?? false)
                        {
                            inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "ICKMPA");
                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Guardarse y Aprobarse el Ingreso Materia Prima Automático debido a que no existe el Motivo de Inventario del Sistema, Ingreso Copaking Materia Prima Automático con código(ICKMPA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                        }
                        else
                        {
                            inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "ICMPA");
                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Guardarse y Aprobarse el Ingreso Materia Prima Automático debido a que no existe el Motivo de Inventario del Sistema, Ingreso Compra Materia Prima Automático con código(ICMPA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = id_warehouseAux,
                            id_warehouseLocationEntry = id_warehouseLocationAux,
                            id_receiver = ActiveUser.id_employee ?? 0,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = id_warehouseAux;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)id_warehouseAux);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();
                        var itemDetail = productionLot.ProductionLotPayment.ToList();


                        #region -- Optimizacion Velocidad Detail 1 --
                        List<ParamModelInveMvDetailBulk> paramInvDetail = new List<ParamModelInveMvDetailBulk>();
                        #endregion -- Optimizacion Velocidad Detail 1 --


                        foreach (var _detMat in itemDetail)
                        {
                            var id_itemAux = settCxC == "0" ? _detMat.id_item
                                                            : productionLot.ProductionLotLiquidationTotal?.FirstOrDefault(fod => fod.id_ItemLiquidation == _detMat.id_item)?.id_ItemToWarehouse ?? _detMat.id_item;

                            if (modPrecio.value == "SI")
                            {
                                var itemEquivalence = db.ItemEquivalence.FirstOrDefault(e => e.id_item == id_itemAux);
                                id_itemAux = db.Item.FirstOrDefault(e => e.id == itemEquivalence.id_itemEquivalence).id;
                            }

                            // str_item = str_item + id_itemAux.ToString() + ","
                            //+ id_warehouseAux.ToString() + ","
                            //+ id_warehouseLocationAux.ToString() + ",;";

                            paramInvDetail.Add(new ParamModelInveMvDetailBulk
                            {
                                id_item = id_itemAux,
                                id_warehouse = (id_warehouseAux ?? 0),
                                id_warehouselocation = (id_warehouseLocationAux ?? 0)
                            });
                        }

                        #region -- Optimizacion Velocidad Detail 2 --
                        str_item = JsonConvert.SerializeObject(paramInvDetail.ToArray());
                        #endregion -- Optimizacion Velocidad Detail 2 --


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param); // OPTIMIZADO

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {

                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                id_warehouseAux,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = id_warehouseLocationAux,
                                                                                    id_lote = productionLot.id

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        #region Optmizacion Recepcion 3
                        var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == id_warehouseAux);
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var id_itemAux = settCxC == "0" ? i.id_item
                                                            : productionLot.ProductionLotLiquidationTotal?.FirstOrDefault(fod => fod.id_ItemLiquidation == i.id_item)?.id_ItemToWarehouse ?? i.id_item;
                            var itemAux = db.Item.FirstOrDefault(fod1 => fod1.id == id_itemAux);

                            if (modPrecio.value == "SI")
                            {
                                var itemEquivalence = db.ItemEquivalence.FirstOrDefault(e => e.id_item == id_itemAux);
                                id_itemAux = db.Item.FirstOrDefault(e => e.id == itemEquivalence.id_itemEquivalence).id;
                            }

                            var secondsOver = 0;
                            if (itemAux.ItemInventory?.id_metricUnitInventory == null) continue;

                            var umMov = db.MetricUnit.FirstOrDefault(fod => fod.id == itemAux.ItemInventory.id_metricUnitInventory);
                            if (umMov == null)
                            {
                                throw new ProdHandlerException("Debe definir la UM en la sección de Inventario del Producto: " + itemAux.name);
                            }
                            else
                            {
                                if (umMov.MetricType.code != "UNI01")
                                {
                                    throw new ProdHandlerException("La UM de movimiento debe ser del Tipo: Unidades, no puede ser de: " + umMov.MetricType.name + ", para el Producto: " + itemAux.name);
                                }
                            }

                            decimal amountMoveAux = settCxC == "0" ? (productionLot.ProductionLotLiquidation.Where(w => w.id_item == i.id_item)?.Sum(s => s.quantity)) ?? 0
                                                                   : productionLot.ProductionLotLiquidationTotal?.Where(w => w.id_ItemLiquidation == i.id_item)?.Sum(s => s.quatityBoxesIL) ?? 0;
                            amountMoveAux = amountMoveAux == 0 ? (productionLot.ProductionLotLiquidation.Where(w => w.id_item == i.id_item)?.Sum(s => s.quantity)) ?? 0 : amountMoveAux;

                            if (amountMoveAux == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = (i.totalToPay / amountMoveAux);
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == itemAux.ItemInventory.id_metricUnitInventory);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = itemAux.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            //else
                            //{
                            //    amountInvAux = amountMoveAux * factorConversion;
                            //    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            //}

                            var presentacionItem = db.Presentation.FirstOrDefault(fod => fod.id == itemAux.id_presentation);
                            if (presentacionItem == null)
                            {
                                throw new ProdHandlerException("El producto " + itemAux.masterCode + " no tiene configurada la presentación necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = (i.quantityEntered ?? 0) == 0 ? (amountMoveAux * factorConversion) : i.quantityEntered.Value;
                                unitPriceInvAux = (i.price) == 0 ? (unitPriceMoveAux * factorConversion) : i.price * (presentacionItem.minimum * presentacionItem.maximum);
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailPrepareOP(!reverse, amountInvAux, id_itemAux, productionLot.id, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, id_warehouseAux.Value,
                                                                                                    id_warehouseLocationAux.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, id_costCenterAux, id_subCostCenterAux,
                                                                                                    false, null, null, null, null, null, null, productionLot.id_personProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == id_warehouseAux
                                                                                && r.id_lote == productionLot.id
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);
                                #endregion

                                if (!warehouseEntryAux.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, id_warehouseAux, id_warehouseLocationAux, tempDetail.entryAmount, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = productionLot.receptionDate;

                        var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == productionLot.id);
                        if (documentSourceAux == null)
                        {
                            UpdateDocumentSource(inventoryMove.Document, productionLot.Lot.Document, db);
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = ActiveUser.id_employee ?? 0;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.idWarehouse = id_warehouseAux;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details
                        result.inventoryMoveDetailIdsForDelete = inventoryMove
                                                                    .InventoryMoveDetail
                                                                    .Select(r => r.id)
                                                                    .ToArray();

                        //for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        //{
                        //    var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                        //    #region Optimiza Codigo
                        //    //ValidateInventoryMoveDetailToRemove(db, detail);
                        //    #endregion
                        //    inventoryMove.InventoryMoveDetail.Remove(detail);
                        //    db.Entry(detail).State = EntityState.Deleted;
                        //}

                        var itemDetail = productionLot.ProductionLotPayment.ToList();

                        #region -- Optimizacion Velocidad Detail 4 --
                        List<ParamModelInveMvDetailBulk> paramInvDetail = new List<ParamModelInveMvDetailBulk>();
                        #endregion -- Optimizacion Velocidad Detail 4 --

                        foreach (var _detMat in itemDetail)
                        {
                            var id_itemAux = settCxC == "0" ? _detMat.id_item
                                                            : productionLot.ProductionLotLiquidationTotal?.FirstOrDefault(fod => fod.id_ItemLiquidation == _detMat.id_item)?.id_ItemToWarehouse ?? _detMat.id_item;

                            if (modPrecio.value == "SI")
                            {
                                var itemEquivalence = db.ItemEquivalence.FirstOrDefault(e => e.id_item == id_itemAux);
                                id_itemAux = db.Item.FirstOrDefault(e => e.id == itemEquivalence.id_itemEquivalence).id;
                            }

                            //str_item = str_item + id_itemAux.ToString() + ","
                            //+ id_warehouseAux.ToString() + ","
                            //+ id_warehouseLocationAux.ToString() + ",;";
                            paramInvDetail.Add(new ParamModelInveMvDetailBulk
                            {
                                id_item = id_itemAux,
                                id_warehouse = (id_warehouseAux ?? 0),
                                id_warehouselocation = (id_warehouseLocationAux ?? 0)
                            });
                        }

                        #region -- Optimizacion Velocidad Detail 5 --
                        str_item = JsonConvert.SerializeObject(paramInvDetail.ToArray());
                        #endregion -- Optimizacion Velocidad Detail 5 --

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {

                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                id_warehouseAux,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = id_warehouseLocationAux,
                                                                                    id_lote = productionLot.id

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        #region Optmizacion Recepcion 3
                        var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == id_warehouseAux);
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var id_itemAux = settCxC == "0" ? i.id_item
                                                            : productionLot.ProductionLotLiquidationTotal?.FirstOrDefault(fod => fod.id_ItemLiquidation == i.id_item)?.id_ItemToWarehouse ?? i.id_item;

                            if (modPrecio.value == "SI")
                            {
                                var itemEquivalence = db.ItemEquivalence.FirstOrDefault(e => e.id_item == id_itemAux);
                                id_itemAux = db.Item.FirstOrDefault(e => e.id == itemEquivalence.id_itemEquivalence).id;
                            }

                            var itemAux = db.Item.FirstOrDefault(fod1 => fod1.id == id_itemAux);

                            var secondsOver = 0;
                            if (itemAux.ItemInventory?.id_metricUnitInventory == null) continue;

                            var umMov = db.MetricUnit.FirstOrDefault(fod => fod.id == itemAux.ItemInventory.id_metricUnitInventory);
                            if (umMov == null)
                            {
                                throw new ProdHandlerException("Debe definir la UM en la sección de Inventario del Producto: " + itemAux.name);
                            }
                            else
                            {
                                if (umMov.MetricType.code != "UNI01")
                                {
                                    throw new ProdHandlerException("La UM de movimiento debe ser del Tipo: Unidades, no puede ser de: " + umMov.MetricType.name + ", para el Producto: " + itemAux.name);
                                }
                            }

                            decimal amountMoveAux = settCxC == "0" ? (productionLot.ProductionLotLiquidation.Where(w => w.id_item == i.id_item)?.Sum(s => s.quantity)) ?? 0
                                                                   : productionLot.ProductionLotLiquidationTotal?.Where(w => w.id_ItemLiquidation == i.id_item)?.Sum(s => s.quatityBoxesIL) ?? 0;
                            amountMoveAux = amountMoveAux == 0 ? (productionLot.ProductionLotLiquidation.Where(w => w.id_item == i.id_item)?.Sum(s => s.quantity)) ?? 0 : amountMoveAux;

                            if (amountMoveAux == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = (i.totalToPay / amountMoveAux);
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == itemAux.ItemInventory.id_metricUnitInventory);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = itemAux.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            //else
                            //{
                            //    amountInvAux = amountMoveAux * factorConversion;
                            //    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            //}
                            var presentacionItem = db.Presentation.FirstOrDefault(fod => fod.id == itemAux.id_presentation);
                            if (presentacionItem == null)
                            {
                                throw new ProdHandlerException("El producto " + itemAux.masterCode + " no tiene configurada la presentación necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = (i.quantityEntered ?? 0) == 0 ? (amountMoveAux * factorConversion) : i.quantityEntered.Value;
                                unitPriceInvAux = (i.price) == 0 ? (unitPriceMoveAux * factorConversion) : i.price * (presentacionItem.minimum * presentacionItem.maximum);
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailPrepareOP(!reverse, amountInvAux, id_itemAux, productionLot.id, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, id_warehouseAux.Value,
                                                                                                    id_warehouseLocationAux.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, id_costCenterAux, id_subCostCenterAux,
                                                                                                    false, null, null, null, null, null, null, productionLot.id_personProcessPlant);

                            if (approve)
                            {

                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == id_warehouseAux
                                                                                && r.id_lote == productionLot.id
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);
                                #endregion

                                if (!warehouseEntryAux.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                                    tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, id_warehouseAux, id_warehouseLocationAux, tempDetail.entryAmount, db);
                            }
                        }

                        #endregion Details
                    }

                    int batchSize = 10;
                    int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                    int index = 0;

                    using (var transaction = db.Database.BeginTransaction())
                    {
                        try
                        {

                            while (index <= totalDetalles)
                            {
                                var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList();

                                foreach (var detalle in batchDetalles)
                                {
                                    if (detalle.id == 0)
                                    {
                                        db.InventoryMoveDetail.Add(detalle);
                                    }
                                }
                                db.SaveChanges();
                                index += batchSize;
                            }
                            transaction.Commit();

                        }
                        catch (Exception ex)
                        {

                            MetodosEscrituraLogs.EscribeExcepcionLogNest(ex, getRutaLog(), "ServiceInventoryMove", "Produccion");
                            transaction.Rollback();
                            throw;
                        }
                    }


                }
                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralIngresoRawRecepcion;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        #region Control Transacciones OP
        private static int[] UpdateInventoryMoveDetailSP(
            List<InventoryMoveDetail> inventoryMoveDetails,
            DbContextTransaction trans,
            bool modeInsert = true)
        {
            int[] resultIMV = Array.Empty<int>();
            try
            {
                System.Data.Common.DbTransaction transaction = trans.UnderlyingTransaction;
                SqlConnection conexion = transaction.Connection as SqlConnection;

                InventoryMoveDetailDto[] inventoryMoveDetaildto = inventoryMoveDetails.Select(r => r.ToDto()).ToArray();
                string inventoryMoveDetailSerialize = JsonConvert.SerializeObject(inventoryMoveDetaildto);

                resultIMV = conexion.Query<int>("dbo.TransCtlUpdateInventoryMoveDetail", new
                {
                    inventoryMoveDetails = inventoryMoveDetailSerialize,
                    modeInsert = modeInsert
                }, transaction, commandTimeout: 600, commandType: CommandType.StoredProcedure).ToArray();

            }
            catch (Exception e)
            {
                resultIMV = null;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
                throw;
            }

            return resultIMV;
        }
        public static ServiceInventoryMoveAux UpdateInventaryMoveLyingDownExitOP(bool approve, User ActiveUser,
           Company ActiveCompany, EmissionPoint ActiveEmissionPoint, OpeningClosingPlateLyingDTO paramOpeningClosingPlateLyingDTO,
           DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0,
           DbContextTransaction trans = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };

            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            List<DocumentType> documentTypeList = new List<DocumentType>();

            try
            {
                documentTypeList = db.DocumentType.Where(it => it.isActive).ToList();

                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, paramOpeningClosingPlateLyingDTO.id_freezerWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var ids_inventaryMoveTransferAutomaticEntryToReverse = db.DocumentSource.Where(fod => fod.id_documentOrigin == inventoryMoveToReverse.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("143"));
                    foreach (var item in ids_inventaryMoveTransferAutomaticEntryToReverse)
                    {
                        var inventaryMoveTransferAutomaticEntryToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == item.id_document);
                        UpdateInventaryMoveLyingDownEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveToReverse, db, reverse, inventaryMoveTransferAutomaticEntryToReverse);

                        DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                        inventaryMoveTransferAutomaticEntryToReverse.Document.id_documentState = documentStatePendiente.id;
                        inventaryMoveTransferAutomaticEntryToReverse.Document.DocumentState = documentStatePendiente;

                        db.InventoryMove.Attach(inventaryMoveTransferAutomaticEntryToReverse);
                        db.Entry(inventaryMoveTransferAutomaticEntryToReverse).State = EntityState.Modified;
                    }

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var id_inventaryMoveTransferAutomaticExit = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramOpeningClosingPlateLyingDTO.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("142"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticExit);
                    ValidateEmissionDateInventoryMove(db, paramOpeningClosingPlateLyingDTO.dateTimeEmision, true, paramOpeningClosingPlateLyingDTO.id_freezerWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = documentTypeList.FirstOrDefault(t => t.code == (reverse ? "143" : "142")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        //document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        //document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = documentTypeList.FirstOrDefault(d => d.id == document.id_documentType && d.id_company == ActiveCompany.id)?.currentNumber ?? 0;//GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        var number = document.sequential.ToString().PadLeft(9, '0');
                        document.number = $"{ActiveEmissionPoint.BranchOffice.code.ToString().PadLeft(3, '0')}-{ActiveEmissionPoint.code.ToString().PadLeft(3, '0')}-{number}";  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramOpeningClosingPlateLyingDTO.dateTimeEmision;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            //db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        var documentAux = db.Document.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id);
                        UpdateDocumentSource(document, documentAux, db);

                        document.description = "Túnel/Placa: " + db.MachineForProd.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_freezerMachineForProd)?.name ?? "Sin Túnel/Placa";

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        //inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "EATTP");
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Guardarse el Egreso Por Transferencia Automática de Tumbada de Placa debido a que no existe el Motivo de Inventario del Sistema, Egreso Automatico de Transferencia Por Tumbada Placa con código(EATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        //inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramOpeningClosingPlateLyingDTO.id_freezerWarehouse,
                            id_warehouseLocationExit = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_warehouseLocation,
                            id_dispatcher = paramOpeningClosingPlateLyingDTO.id_responsable.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_boxedWarehouse,
                            id_warehouseLocationEntry = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_boxedWarehouseLocation,
                            id_receiver = paramOpeningClosingPlateLyingDTO.id_responsable.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramOpeningClosingPlateLyingDTO.id_freezerWarehouse;
                        inventoryMove.idWarehouseEntry = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_boxedWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramOpeningClosingPlateLyingDTO.id_freezerWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        db.SaveChanges();

                        #region FECHA EMISION CR OPTIMIZA

                        //string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        //string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.ToList();
                        #region CR OPTIMIZA

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        //_param.str_item = str_item;
                        //_param.emissiondate = dtEmissionDate;
                        //_param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #endregion 
                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();

                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lot).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_item);
                            var secondsOver = 0;
                            if (item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amount == 0) continue;

                            id_imd = 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amount;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnit);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }


                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                            i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_boxedWarehouse, null, secondsOver, 0, i.id_costCenterExit, i.id_subCostCenterExit, false,
                                                                                            i.id_boxedWarehouseLocation, i.id_costCenter, i.id_subCostCenter, i.id_productionCart, null, null, idProcessPlant);

                            tempDetails.Add(tempDetail);

                        }

                        var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);

                        //SaldoProductoLote[] SaldoValidaAprobacion = null;
                        //if (approve)
                        //{
                        //    SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                        //                            inventoryMove.idWarehouse,
                        //                            itemDetail.Select(r => new SaldoProductoLote
                        //                            {
                        //                                id_item = r.id_item,
                        //                                id_warehouseLocation = r.id_warehouseLocation,
                        //                                id_lote = r.id_lot
                        //
                        //                            }).ToArray(),
                        //                            db,
                        //                            null);
                        //}
                        // SP
                        int idx = 0;
                        foreach (var i in itemDetail)
                        {
                            var tempDetail = tempDetails[idx];
                            //i.id = tempDetailsSave[idx];
                            if (approve)
                            {

                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db,
                                                                            i.id_productionCart);

                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse);
                                if (!warehouse.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    Lot lot = db.Lot.FirstOrDefault(r => r.id == i.id_lot);
                                    ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == i.id_productionCart);
                                    var item = db.Item.FirstOrDefault(r => r.id == i.id_item);
                                    var warehouseerr = db.Warehouse.FirstOrDefault(r => r.id == i.id_warehouse);
                                    var warehouseLocationerr = db.WarehouseLocation.FirstOrDefault(r => r.id == i.id_warehouseLocation);

                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                    var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart.name;

                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        item?.name + ", en la Bodega: " + warehouseerr?.name + ", en la Ubicación: " + warehouseLocationerr?.name + lotNumber + cartName);
                                }

                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -tempDetail.exitAmount, db);
                            }
                            idx++;
                        }

                        inventoryMove.Document.number = inventoryMove.natureSequential;

                        #endregion Details
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramOpeningClosingPlateLyingDTO.dateTimeEmision;
                        inventoryMove.Document.description = "Túnel/Placa: " + db.MachineForProd.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_freezerMachineForProd)?.name ?? "Sin Túnel/Placa";

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryExitMove.id_dispatcher = paramOpeningClosingPlateLyingDTO.id_responsable.Value;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.InventoryEntryMove.id_receiver = paramOpeningClosingPlateLyingDTO.id_responsable.Value;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        db.SaveChanges();

                        #region FECHA EMISION CR OPTIMIZA

                        //string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        //string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.ToList();

                        result.inventoryMoveDetailIdsForDelete = inventoryMove.InventoryMoveDetail.Select(r => r.id).ToArray();

                        foreach (var detail in inventoryMove.InventoryMoveDetail.ToList())
                        {
                            foreach (var detailInventoryMoveDetailTransferEntry in detail.InventoryMoveDetailTransfer.ToList())
                            {
                                detail.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferEntry);
                                detailInventoryMoveDetailTransferEntry.id_inventoryMoveDetailExit = null;
                                db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                            }
                            #region Optimiza Codigo
                            //ValidateInventoryMoveDetailToRemove(db, detail);
                            #endregion
                            inventoryMove.InventoryMoveDetail.Remove(detail);

                            //db.Entry(detail).State = EntityState.Deleted;
                        }


                        #region CR OPTIMIZA
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        //_param.str_item = str_item;
                        //_param.emissiondate = dtEmissionDate;
                        //_param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL
                        #endregion

                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lot).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_item);
                            var secondsOver = 0;
                            if (item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amount == 0) continue;

                            id_imd = 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amount;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnit);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }


                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                           i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_boxedWarehouse, null, secondsOver, 0, i.id_costCenterExit, i.id_subCostCenterExit, false,
                                                           i.id_boxedWarehouseLocation, i.id_costCenter, i.id_subCostCenter, i.id_productionCart, null, null, idProcessPlant);

                            tempDetails.Add(tempDetail);

                        }

                        var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);

                        int idx = 0;
                        foreach (var i in itemDetail)
                        {
                            var tempDetail = tempDetails[idx];
                            //i.id = tempDetailsSave[idx];
                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db,
                                                                            i.id_productionCart, null, null, true);
                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse);
                                //if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                if (!warehouse.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    Lot lot = db.Lot.FirstOrDefault(r => r.id == i.id_lot);
                                    ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == i.id_productionCart);
                                    var item = db.Item.FirstOrDefault(r => r.id == i.id_item);
                                    var warehouseerr = db.Warehouse.FirstOrDefault(r => r.id == i.id_warehouse);
                                    var warehouseLocationerr = db.WarehouseLocation.FirstOrDefault(r => r.id == i.id_warehouseLocation);

                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                    var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart.name;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        item?.name + ", en la Bodega: " + warehouseerr?.name + ", en la Ubicación: " + warehouseLocationerr?.name + lotNumber + cartName);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -tempDetail.exitAmount, db);

                                // ... PENDING HASTA VER CMO EL TEMP OBTIENE LA REFERENCIA A TRANSFER
                                var inventoryMoveDetailTransfer = db.InventoryMoveDetailTransfer.Where(r => r.id_inventoryMoveDetailExit == tempDetail.id).ToList();
                                //for (int j = tempDetail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                for (int j = inventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = inventoryMoveDetailTransfer.ElementAt(j);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseExit = tempDetail.id_warehouse;
                                    detailInventoryMoveDetailTransferEntry.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouse);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseLocationExit = tempDetail.id_warehouseLocation.Value;
                                    //detailInventoryMoveDetailTransferEntry.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseLocation);

                                    if (detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse != tempDetail.id_warehouseEntry)
                                    {
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse = tempDetail.id_warehouseEntry.Value;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseEntry);
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouseLocation = null;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.WarehouseLocation = null;
                                        db.Entry(detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1).State = EntityState.Modified;
                                    }
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                }
                            }
                        }

                        #endregion Details
                    }

                    //int batchSize = 50; // Tamaño del lote
                    //int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                    //int index = 0;
                    //
                    //
                    //using (var transaction = db.Database.BeginTransaction())
                    //{
                    //    try
                    //    {
                    //        while (index <= totalDetalles)
                    //        {
                    //            var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList(); // Obtener un lote de detalles
                    //            foreach (var detalle in batchDetalles)
                    //            {
                    //                // Agregar el detalle al contexto
                    //                db.InventoryMoveDetail.Add(detalle);
                    //            }
                    //
                    //            //Guardar los cambios en el contexto
                    //            db.SaveChanges();
                    //
                    //            index += batchSize;
                    //        }
                    //        transaction.Commit();
                    //        
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        // Revertir la transacción en caso de error
                    //        result.message = ex.Message;
                    //        transaction.Rollback();
                    //        throw ex; // O manejar el error de otra manera
                    //    }
                    //}

                    //result = 
                    db.SaveChanges();

                    var resultMov = UpdateInventaryMoveLyingDownEntryOpeningClosingOP(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMove, db, reverse, null, trans: trans);
                    if (!string.IsNullOrEmpty(resultMov?.message)) throw new ProdHandlerException(resultMov.message);
                    result.inventoryMoveDetailIdsForDelete.AsList().AddRange(resultMov.inventoryMoveDetailIdsForDelete);
                }


                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveLyingDownEntryOpeningClosingOP(bool approve, User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove, DBContext db,
            bool reverse, InventoryMove inventoryMoveToReverse = null,
            decimal priceLbs = 0, DbContextTransaction trans = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            List<DocumentType> documentTypeList = new List<DocumentType>();

            try
            {
                documentTypeList = db.DocumentType.Where(it => it.isActive).ToList();
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var ids_warehouseEntry = paramInventoryMove.InventoryMoveDetail.GroupBy(g => new
                    {
                        g.id_warehouseEntry,
                    })
                    .Select(r => new
                    {
                        r.Key.id_warehouseEntry
                    }).ToList();

                    foreach (var warehouseEntry in ids_warehouseEntry)
                    {
                        inventoryMove = null;
                        var ids_inventaryMoveTransferAutomaticEntry = db.DocumentSource.Where(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("143"));
                        foreach (var detail in ids_inventaryMoveTransferAutomaticEntry)
                        {
                            var inventaryMoveTransferAutomaticEntry = db.InventoryMove.FirstOrDefault(fod => fod.id == detail.id_document);
                            if (inventaryMoveTransferAutomaticEntry.idWarehouse == warehouseEntry.id_warehouseEntry)
                            {
                                inventoryMove = inventaryMoveTransferAutomaticEntry;
                                break;
                            }
                        }

                        ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, warehouseEntry.id_warehouseEntry);

                        if (inventoryMove == null)
                        {
                            #region Document

                            Document document = new Document();

                            DocumentType documentType = documentTypeList.FirstOrDefault(t => t.code == (reverse ? "142" : "143")); document.DocumentType = documentType;
                            document.id_documentType = documentType.id;

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            //document.DocumentState = documentState;
                            document.id_documentState = documentState.id;

                            //document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                            document.id_emissionPoint = ActiveEmissionPoint.id;

                            document.id_userCreate = ActiveUser.id;
                            document.dateCreate = DateTime.Now;
                            document.id_userUpdate = ActiveUser.id;
                            document.dateUpdate = DateTime.Now;

                            document.sequential = documentTypeList.FirstOrDefault(d => d.id == document.id_documentType && d.id_company == ActiveCompany.id)?.currentNumber ?? 0;//GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                            var number = document.sequential.ToString().PadLeft(9, '0');
                            document.number = $"{ActiveEmissionPoint.BranchOffice.code.ToString().PadLeft(3, '0')}-{ActiveEmissionPoint.code.ToString().PadLeft(3, '0')}-{number}";  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);


                            document.emissionDate = paramInventoryMove.Document.emissionDate;

                            if (documentType != null)
                            {
                                documentType.currentNumber = documentType.currentNumber + 1;
                                db.DocumentType.Attach(documentType);
                                db.Entry(documentType).State = EntityState.Modified;
                            }

                            document.description = paramInventoryMove.Document.description;

                            UpdateDocumentSource(document, paramInventoryMove.Document, db);

                            #endregion Document

                            #region InventoryMove

                            inventoryMove = new InventoryMove();
                            inventoryMove.Document = document;
                            inventoryMove.id = document.id;

                            inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                            inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                            var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "IATTP");
                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Guardarse el Ingreso Por Transferencia Automática En Tumbada de Placa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automatico de Transferencia Por Tumbada Placa con código(IATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryEntryMove = new InventoryEntryMove
                            {
                                id_warehouseEntry = warehouseEntry.id_warehouseEntry,
                                id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id_warehouseEntry == warehouseEntry.id_warehouseEntry)?.id_warehouseLocationEntry,
                                id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                                dateEntry = DateTime.Now
                            };

                            inventoryMove.idWarehouse = warehouseEntry.id_warehouseEntry;
                            inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                            SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)warehouseEntry.id_warehouseEntry);
                            inventoryMove.natureSequential = _sp.sSequential;
                            inventoryMove.sequential = _sp.iSequential;
                            inventoryMove.isAuthomatic = true;

                            #endregion InventoryMove

                            db.SaveChanges();

                            #region FECHA EMISION

                            string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                            string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                            #endregion FECHA EMISION

                            #region Details

                            inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                            str_item = "";
                            id_imd = 0;

                            foreach (var _detMat in itemDetail)
                            {
                                if (_detMat.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;
                                str_item = str_item + _detMat.id_item.ToString() + ","
                               + _detMat.id_warehouseEntry.ToString() + ","
                               + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                            }

                            #region QUERY LAST INVENTORYMOVEDETAIL CR Optimiza

                            //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                            //_param.str_item = str_item;
                            //_param.emissiondate = dtEmissionDate;
                            //_param.houremissiondate = dtHourEmissionDate;

                            #endregion QUERY LAST INVENTORYMOVEDETAIL

                            List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;

                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                i.Item = db.Item.Include("ItemInventory").FirstOrDefault(r => r.id == i.id_item);
                                if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                id_imd = 0;
                                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                           i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntry, i.id_subCostCenterEntry,
                                                                                           false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);
                                tempDetails.Add(tempDetail);
                            }

                            var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);

                            int idx = 0;
                            foreach (var i in itemDetail)
                            {
                                var tempDetail = tempDetails[idx];
                                //i.id = tempDetailsSave[idx];

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        Lot lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                        ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == tempDetail.id_productionCart);
                                        Item item = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                        Warehouse warehouse = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                        WarehouseLocation warehouseLocation = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                        var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            item?.name + ", en la Bodega: " + warehouse?.name + ", en la Ubicación: " + warehouseLocation?.name + lotNumber + cartName);
                                    }
                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        var factorConversion = (id_metricUnitMovExitAux != tempDetail.id_metricUnitMove) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == tempDetail.id_metricUnitMove &&
                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                        if (factorConversion == 0)
                                        {
                                            MetricUnit metricUnit = db.MetricUnit.FirstOrDefault(r => r.id == tempDetail.id_metricUnitMove);
                                            throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnit?.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                        }
                                        else
                                        {
                                            amountPurAux = (tempDetail.amountMove ?? 0) * factorConversion;
                                        }

                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                            InventoryMoveDetail = inventoryMoveDetailAux,
                                            id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                            InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                            id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                            id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = amountPurAux
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }
                                else
                                {
                                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                    {
                                        id_inventoryMoveDetailExit = i.id,
                                        InventoryMoveDetail = i,
                                        id_inventoryMoveExit = paramInventoryMove.id,
                                        InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                        id_warehouseExit = i.id_warehouse,
                                        Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                        id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                        WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                        id_inventoryMoveDetailEntry = tempDetail.id,
                                        InventoryMoveDetail1 = tempDetail,
                                        quantity = (tempDetail.amountMove ?? 0)
                                    };
                                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                }

                                idx++;
                            }

                            #endregion Details

                            inventoryMove.Document.number = inventoryMove.natureSequential;
                        }
                        else
                        {
                            #region Document

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            //inventoryMove.Document.DocumentState = documentState;
                            inventoryMove.Document.id_documentState = documentState.id;

                            inventoryMove.Document.id_userUpdate = ActiveUser.id;
                            inventoryMove.Document.dateUpdate = DateTime.Now;

                            inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                            inventoryMove.Document.description = paramInventoryMove.Document.description;

                            var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == paramInventoryMove.id);
                            if (documentSourceAux == null)
                            {
                                UpdateDocumentSource(inventoryMove.Document, paramInventoryMove.Document, db);
                            }

                            #endregion Document

                            #region InventoryMove

                            inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                            inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                            inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                            inventoryMove.isAuthomatic = true;

                            #endregion InventoryMove

                            db.SaveChanges();

                            #region FECHA EMISION

                            //string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                            //string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                            #endregion FECHA EMISION

                            #region Details

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                            str_item = "";
                            id_imd = 0;

                            result.inventoryMoveDetailIdsForDelete = inventoryMove.InventoryMoveDetail.Select(r => r.id).ToArray();

                            for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                            {
                                var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                                for (int j = detail.InventoryMoveDetailTransfer1.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer1.ElementAt(j);
                                    detail.InventoryMoveDetailTransfer1.Remove(detailInventoryMoveDetailTransferEntry);
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Deleted;
                                }
                                #region Optimiza Codigo
                                //ValidateInventoryMoveDetailToRemove(db, detail);
                                #endregion
                                inventoryMove.InventoryMoveDetail.Remove(detail);
                                db.Entry(detail).State = EntityState.Deleted;
                            }

                            foreach (var _detMat in itemDetail)
                            {
                                if (_detMat.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;
                                str_item = str_item + _detMat.id_item.ToString() + ","
                               + _detMat.id_warehouseEntry.ToString() + ","
                               + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                            }

                            #region QUERY LAST INVENTORYMOVEDETAIL CR Optimiza

                            //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                            //_param.str_item = str_item;
                            //_param.emissiondate = dtEmissionDate;
                            //_param.houremissiondate = dtHourEmissionDate;

                            #endregion QUERY LAST INVENTORYMOVEDETAIL

                            List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;

                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                id_imd = 0;
                                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                                i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry ?? 0,
                                                                                                i.id_costCenterEntry, i.id_subCostCenterEntry, false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);
                                tempDetails.Add(tempDetail);

                            }

                            var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);
                            int idx = 0;

                            foreach (var i in itemDetail)
                            {
                                var tempDetail = tempDetails[idx];
                                i.id = tempDetailsSave[idx];
                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        Lot lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                        ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == tempDetail.id_productionCart);
                                        Item item = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                        Warehouse warehouse = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                        WarehouseLocation warehouseLocation = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);

                                        var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot?.number;
                                        var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart?.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            item?.name + ", en la Bodega: " + warehouse?.name + ", en la Ubicación: " + warehouseLocation?.name + lotNumber + cartName);
                                    }

                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                if (i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry != null)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        var factorConversion = (id_metricUnitMovExitAux != tempDetail.id_metricUnitMove) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == tempDetail.id_metricUnitMove &&
                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                        if (factorConversion == 0)
                                        {
                                            MetricUnit metricUnit = db.MetricUnit.FirstOrDefault(r => r.id == tempDetail.id_metricUnitMove);
                                            throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnit?.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                        }
                                        else
                                        {
                                            amountPurAux = (tempDetail.amountMove ?? 0) * factorConversion;
                                        }
                                        detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                        db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                                    }
                                }
                                else
                                {
                                    tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                    if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                    {
                                        foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                        {
                                            var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                            var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                            decimal amountPurAux = 0;
                                            var factorConversion = (id_metricUnitMovExitAux != tempDetail.id_metricUnitMove) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == tempDetail.id_metricUnitMove &&
                                                                                                                                                        fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                            if (factorConversion == 0)
                                            {
                                                MetricUnit metricUnit = db.MetricUnit.FirstOrDefault(r => r.id == tempDetail.id_metricUnitMove);
                                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnit?.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                            }
                                            else
                                            {
                                                amountPurAux = (tempDetail.amountMove ?? 0) * factorConversion;
                                            }

                                            var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                            {
                                                id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                                InventoryMoveDetail = inventoryMoveDetailAux,
                                                id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                                InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                                id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                                Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                                id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                                WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                                id_inventoryMoveDetailEntry = tempDetail.id,
                                                InventoryMoveDetail1 = tempDetail,
                                                quantity = amountPurAux
                                            };
                                            tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                            newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                        }
                                    }
                                    else
                                    {
                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = i.id,
                                            InventoryMoveDetail = i,
                                            id_inventoryMoveExit = paramInventoryMove.id,
                                            InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                            id_warehouseExit = i.id_warehouse,
                                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                            id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = (tempDetail.amountMove ?? 0)
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }

                                idx++;

                            }

                            #endregion Details
                        }

                        //int batchSize = 75; // Tamaño del lote
                        //int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                        //int index = 0;
                        //
                        //
                        //using (var transaction = db.Database.BeginTransaction())
                        //{
                        //    try
                        //    {
                        //        while (index <= totalDetalles)
                        //        {
                        //            var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList(); // Obtener un lote de detalles
                        //            foreach (var detalle in batchDetalles)
                        //            {
                        //                // Agregar el detalle al contexto
                        //                db.InventoryMoveDetail.Add(detalle);
                        //            }
                        //
                        //            //Guardar los cambios en el contexto
                        //
                        //
                        //            index += batchSize;
                        //        }
                        //        db.SaveChanges();
                        //        transaction.Commit();
                        //    }
                        //    catch (Exception ex)
                        //    {
                        //        // Revertir la transacción en caso de error
                        //        result.message = ex.Message;
                        //        transaction.Rollback();
                        //        throw ex; // O manejar el error de otra manera
                        //    }
                        //}

                    }

                    db.SaveChanges();
                }
                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }

            return result;
        }
        #endregion

        public static ServiceInventoryMoveAux UpdateInventaryMoveLyingDownExit(bool approve, User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint, OpeningClosingPlateLyingDTO paramOpeningClosingPlateLyingDTO,
            DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0,
            DbContextTransaction trans = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };

            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            List<DocumentType> documentTypeList = new List<DocumentType>();
            List<int> idInventoryMoveDetails = new List<int>();
            try
            {
                documentTypeList = db.DocumentType.Where(it => it.isActive).ToList();

                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, paramOpeningClosingPlateLyingDTO.id_freezerWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var ids_inventaryMoveTransferAutomaticEntryToReverse = db.DocumentSource.Where(fod => fod.id_documentOrigin == inventoryMoveToReverse.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("143"));
                    foreach (var item in ids_inventaryMoveTransferAutomaticEntryToReverse)
                    {
                        var inventaryMoveTransferAutomaticEntryToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == item.id_document);
                        UpdateInventaryMoveLyingDownEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveToReverse, db, reverse, inventaryMoveTransferAutomaticEntryToReverse);

                        DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                        inventaryMoveTransferAutomaticEntryToReverse.Document.id_documentState = documentStatePendiente.id;
                        inventaryMoveTransferAutomaticEntryToReverse.Document.DocumentState = documentStatePendiente;

                        db.InventoryMove.Attach(inventaryMoveTransferAutomaticEntryToReverse);
                        db.Entry(inventaryMoveTransferAutomaticEntryToReverse).State = EntityState.Modified;
                    }

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var id_inventaryMoveTransferAutomaticExit = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramOpeningClosingPlateLyingDTO.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("142"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticExit);
                    ValidateEmissionDateInventoryMove(db, paramOpeningClosingPlateLyingDTO.dateTimeEmision, true, paramOpeningClosingPlateLyingDTO.id_freezerWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = documentTypeList.FirstOrDefault(t => t.code == (reverse ? "143" : "142")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        //document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        //document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = documentTypeList.FirstOrDefault(d => d.id == document.id_documentType && d.id_company == ActiveCompany.id)?.currentNumber ?? 0;//GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        var number = document.sequential.ToString().PadLeft(9, '0');
                        document.number = $"{ActiveEmissionPoint.BranchOffice.code.ToString().PadLeft(3, '0')}-{ActiveEmissionPoint.code.ToString().PadLeft(3, '0')}-{number}";  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramOpeningClosingPlateLyingDTO.dateTimeEmision;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            //db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        var documentAux = db.Document.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id);
                        UpdateDocumentSource(document, documentAux, db);

                        document.description = "Túnel/Placa: " + db.MachineForProd.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_freezerMachineForProd)?.name ?? "Sin Túnel/Placa";
                        db.Document.Add(document);
                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        //inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "EATTP");
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Guardarse el Egreso Por Transferencia Automática de Tumbada de Placa debido a que no existe el Motivo de Inventario del Sistema, Egreso Automatico de Transferencia Por Tumbada Placa con código(EATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        //inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramOpeningClosingPlateLyingDTO.id_freezerWarehouse,
                            id_warehouseLocationExit = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_warehouseLocation,
                            id_dispatcher = paramOpeningClosingPlateLyingDTO.id_responsable.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_boxedWarehouse,
                            id_warehouseLocationEntry = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_boxedWarehouseLocation,
                            id_receiver = paramOpeningClosingPlateLyingDTO.id_responsable.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramOpeningClosingPlateLyingDTO.id_freezerWarehouse;
                        inventoryMove.idWarehouseEntry = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.FirstOrDefault()?.id_boxedWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramOpeningClosingPlateLyingDTO.id_freezerWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;
                        db.InventoryMove.Add(inventoryMove);
                        #endregion InventoryMove

                        db.SaveChanges();
                        
                        #region FECHA EMISION CR OPTIMIZA

                        //string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        //string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.ToList();
                        #region CR OPTIMIZA

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        //_param.str_item = str_item;
                        //_param.emissiondate = dtEmissionDate;
                        //_param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #endregion 

                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lot).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_item);
                            var secondsOver = 0;
                            if (item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amount == 0) continue;

                            id_imd = 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amount;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnit);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }


                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                                            i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_boxedWarehouse, null, secondsOver, 0, i.id_costCenterExit, i.id_subCostCenterExit, false,
                                                                                                            i.id_boxedWarehouseLocation, i.id_costCenter, i.id_subCostCenter, i.id_productionCart, null, null, idProcessPlant);

                            tempDetails.Add(tempDetail);
                        }
                        db.SaveChanges();
                        //var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);

                        int idx = 0;
                        foreach (var i in itemDetail) 
                        {
                            var tempDetail = tempDetails[idx];
                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db,
                                                                            i.id_productionCart);

                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse);                                
                                
                                if (!warehouse.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";

                                    Lot lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                    ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == tempDetail.id_productionCart);
                                    Item itemErr = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                    Warehouse warehouseErr = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                    WarehouseLocation warehouseLocationErr = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);


                                    var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                    var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart.name;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        itemErr?.name + ", en la Bodega: " + warehouseErr?.name + ", en la Ubicación: " + warehouseLocationErr?.name + lotNumber + cartName);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -tempDetail.exitAmount, db);
                            }
                            idx++;
                        }

                        inventoryMove.Document.number = inventoryMove.natureSequential;

                        #endregion Details
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramOpeningClosingPlateLyingDTO.dateTimeEmision;
                        inventoryMove.Document.description = "Túnel/Placa: " + db.MachineForProd.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_freezerMachineForProd)?.name ?? "Sin Túnel/Placa";

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryExitMove.id_dispatcher = paramOpeningClosingPlateLyingDTO.id_responsable.Value;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.InventoryEntryMove.id_receiver = paramOpeningClosingPlateLyingDTO.id_responsable.Value;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramOpeningClosingPlateLyingDTO.id_responsable.Value);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        db.SaveChanges();

                        #region FECHA EMISION CR OPTIMIZA

                        //string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        //string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramOpeningClosingPlateLyingDTO.OpeningClosingPlateLyingDetails.ToList();                        

                        idInventoryMoveDetails.AddRange(inventoryMove.InventoryMoveDetail.Select(r => r.id).ToList());


                        foreach (var detail in inventoryMove.InventoryMoveDetail.ToList())
                        {
                            foreach (var detailInventoryMoveDetailTransferEntry in detail.InventoryMoveDetailTransfer.ToList())
                            {
                               detail.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferEntry);
                               detailInventoryMoveDetailTransferEntry.id_inventoryMoveDetailExit = null;
                               detailInventoryMoveDetailTransferEntry.InventoryMoveDetail = null;
                               db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                //InventoryMoveDetailTransfer forEdit = inventoryMoveDetailTransferForEdit.FirstOrDefault(r => r.id == detailInventoryMoveDetailTransferEntry.id);                                
                                //forEdit.id_inventoryMoveDetailExit = null;                                
                                //db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Deleted;
                            }
                            #region Optimiza Codigo
                            //ValidateInventoryMoveDetailToRemove(db, detail);
                            #endregion
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Detached;
                        }
                        db.SaveChanges();


                        #region CR OPTIMIZA
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        //_param.str_item = str_item;
                        //_param.emissiondate = dtEmissionDate;
                        //_param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL
                        #endregion

                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lot).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_item);
                            var secondsOver = 0;
                            if (item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amount == 0) continue;

                            id_imd = 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amount;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnit);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }


                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                                               i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_boxedWarehouse, null, secondsOver, 0, i.id_costCenterExit, i.id_subCostCenterExit, false,
                                                                                                               i.id_boxedWarehouseLocation, i.id_costCenter, i.id_subCostCenter, i.id_productionCart, null, null, idProcessPlant);

                            tempDetails.Add(tempDetail);

                        }
                        db.SaveChanges();
                        //var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);

                        int idx = 0;
                        foreach (var i in itemDetail)
                        {

                            var tempDetail = tempDetails[idx];
                            if (approve)
                            {
                                // 2 cambios:
                                // A Enviar los ids de inventoroymove detail para excluir
                                // B Preparar El metdo para recibir en el arreglo las bodega
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db,
                                                                            i.id_productionCart, null, null, true);
                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse);
                                if (!warehouse.allowsNegativeBalances && remainingBalance  < 0)                                
                                {
                                    Lot lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                    ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == tempDetail.id_productionCart);
                                    Item itemErr = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                    Warehouse warehouseErr = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                    WarehouseLocation warehouseLocationErr = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);

                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                    var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart.name;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        itemErr?.name + ", en la Bodega: " + warehouseErr?.name + ", en la Ubicación: " + warehouseLocationErr?.name + lotNumber + cartName);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -tempDetail.exitAmount, db);

                                for (int j = tempDetail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = tempDetail.InventoryMoveDetailTransfer.ElementAt(j);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseExit = tempDetail.id_warehouse;
                                    detailInventoryMoveDetailTransferEntry.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouse);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseLocationExit = tempDetail.id_warehouseLocation.Value;
                                    //detailInventoryMoveDetailTransferEntry.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseLocation);

                                    if (detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse != tempDetail.id_warehouseEntry)
                                    {
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse = tempDetail.id_warehouseEntry.Value;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseEntry);
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouseLocation = null;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.WarehouseLocation = null;
                                        db.Entry(detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1).State = EntityState.Modified;
                                    }
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                }
                            }
                            idx++;
                        }

                        #endregion Details
                    }

                    //int batchSize = 50; // Tamaño del lote
                    //int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                    //int index = 0;
                    //
                    //using (var transaction = db.Database.BeginTransaction())
                    //{
                    //    try
                    //    {
                    //        while (index <= totalDetalles)
                    //        {
                    //            var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList(); // Obtener un lote de detalles
                    //            foreach (var detalle in batchDetalles)
                    //            {
                    //                // Agregar el detalle al contexto
                    //                db.InventoryMoveDetail.Add(detalle);
                    //            }
                    //
                    //            //Guardar los cambios en el contexto
                    //            db.SaveChanges();
                    //
                    //            index += batchSize;
                    //        }
                    //        transaction.Commit();
                    //        
                    //        if (!string.IsNullOrEmpty(result?.message)) throw new ProdHandlerException(result.message);
                    //    }
                    //    catch (Exception ex)
                    //    {
                    //        // Revertir la transacción en caso de error
                    //        result.message = ex.Message;
                    //        transaction.Rollback();
                    //        throw;
                    //    }
                    //}
                    
                    db.SaveChanges();

                    result = UpdateInventaryMoveLyingDownEntryOpeningClosing(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMove, db, reverse, null,  trans:trans);
                    if (!string.IsNullOrEmpty(result?.message)) throw new ProdHandlerException(result.message);
                    idInventoryMoveDetails.AddRange(result.inventoryMoveDetailIdsForDelete);
                }

                result.inventoryMoveDetailIdsForDelete = idInventoryMoveDetails.ToArray();
                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw;
            }

            return result;
        }

        #region CR Optimiza
        public static ServiceInventoryMoveAux UpdateInventaryMoveLyingDownEntryOpeningClosing(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0,
            DbContextTransaction trans = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            List<DocumentType> documentTypeList = new List<DocumentType>();
            List<int> idInventoryMoveDetails = new List<int>();

            try
            {
                documentTypeList = db.DocumentType.Where(it => it.isActive).ToList();
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var ids_warehouseEntry = paramInventoryMove.InventoryMoveDetail.GroupBy(g => new
                    {
                        g.id_warehouseEntry,
                    })
                    .Select(r => new
                    {
                        r.Key.id_warehouseEntry
                    }).ToList();

                    foreach (var warehouseEntry in ids_warehouseEntry)
                    {
                        inventoryMove = null;
                        var ids_inventaryMoveTransferAutomaticEntry = db.DocumentSource.Where(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("143"));
                        foreach (var detail in ids_inventaryMoveTransferAutomaticEntry)
                        {
                            var inventaryMoveTransferAutomaticEntry = db.InventoryMove.FirstOrDefault(fod => fod.id == detail.id_document);
                            if (inventaryMoveTransferAutomaticEntry.idWarehouse == warehouseEntry.id_warehouseEntry)
                            {
                                inventoryMove = inventaryMoveTransferAutomaticEntry;
                                break;
                            }
                        }

                        ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, warehouseEntry.id_warehouseEntry);

                        if (inventoryMove == null)
                        {
                            #region Document

                            Document document = new Document();

                            DocumentType documentType = documentTypeList.FirstOrDefault(t => t.code == (reverse ? "142" : "143")); document.DocumentType = documentType;
                            document.id_documentType = documentType.id;

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            //document.DocumentState = documentState;
                            document.id_documentState = documentState.id;

                            //document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                            document.id_emissionPoint = ActiveEmissionPoint.id;

                            document.id_userCreate = ActiveUser.id;
                            document.dateCreate = DateTime.Now;
                            document.id_userUpdate = ActiveUser.id;
                            document.dateUpdate = DateTime.Now;

                            document.sequential = documentTypeList.FirstOrDefault(d => d.id == document.id_documentType && d.id_company == ActiveCompany.id)?.currentNumber ?? 0;//GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                            var number = document.sequential.ToString().PadLeft(9, '0');
                            document.number = $"{ActiveEmissionPoint.BranchOffice.code.ToString().PadLeft(3, '0')}-{ActiveEmissionPoint.code.ToString().PadLeft(3, '0')}-{number}";  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);


                            document.emissionDate = paramInventoryMove.Document.emissionDate;

                            if (documentType != null)
                            {
                                documentType.currentNumber = documentType.currentNumber + 1;
                                db.DocumentType.Attach(documentType);
                                db.Entry(documentType).State = EntityState.Modified;
                            }

                            document.description = paramInventoryMove.Document.description;

                            UpdateDocumentSource(document, paramInventoryMove.Document, db);
                            db.Document.Add(document);
                            #endregion Document

                            #region InventoryMove

                            inventoryMove = new InventoryMove();
                            inventoryMove.Document = document;
                            inventoryMove.id = document.id;

                            inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                            inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                            var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "IATTP");
                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Guardarse el Ingreso Por Transferencia Automática En Tumbada de Placa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automatico de Transferencia Por Tumbada Placa con código(IATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryEntryMove = new InventoryEntryMove
                            {
                                id_warehouseEntry = warehouseEntry.id_warehouseEntry,
                                id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id_warehouseEntry == warehouseEntry.id_warehouseEntry)?.id_warehouseLocationEntry,
                                id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                                dateEntry = DateTime.Now
                            };

                            inventoryMove.idWarehouse = warehouseEntry.id_warehouseEntry;
                            inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                            SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)warehouseEntry.id_warehouseEntry);
                            inventoryMove.natureSequential = _sp.sSequential;
                            inventoryMove.sequential = _sp.iSequential;
                            inventoryMove.isAuthomatic = true;
                            db.InventoryMove.Add(inventoryMove);
                            #endregion InventoryMove

                            db.SaveChanges();
                            
                            #region FECHA EMISION

                            string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                            string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                            #endregion FECHA EMISION

                            #region Details

                            inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                            str_item = "";
                            id_imd = 0;

                            foreach (var _detMat in itemDetail)
                            {
                                if (_detMat.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;
                                str_item = str_item + _detMat.id_item.ToString() + ","
                               + _detMat.id_warehouseEntry.ToString() + ","
                               + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                            }

                            #region QUERY LAST INVENTORYMOVEDETAIL CR Optimiza

                            //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                            //_param.str_item = str_item;
                            //_param.emissiondate = dtEmissionDate;
                            //_param.houremissiondate = dtHourEmissionDate;

                            #endregion QUERY LAST INVENTORYMOVEDETAIL
                            List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;

                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                i.Item = db.Item.Include("ItemInventory").FirstOrDefault(r => r.id == i.id_item);
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                id_imd = 0;
                                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                                           i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntry, i.id_subCostCenterEntry,
                                                                                                           false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);
                                tempDetails.Add(tempDetail);
                            }
                            db.SaveChanges();

                            //var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);

                            int idx = 0;
                            foreach (var i in itemDetail)
                            {
                                var tempDetail = tempDetails[idx];
                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        Lot lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                        ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == tempDetail.id_productionCart);
                                        Item itemErr = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                        Warehouse warehouseErr = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                        WarehouseLocation warehouseLocationErr = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);


                                        var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                        var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            itemErr?.name + ", en la Bodega: " + warehouseErr?.name + ", en la Ubicación: " + warehouseLocationErr?.name + lotNumber + cartName);
                                    }
                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        //factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                        var factorConversion = (id_metricUnitMovExitAux != tempDetail.id_metricUnitMove) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == tempDetail.id_metricUnitMove &&
                                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                        if (factorConversion == 0)
                                        {
                                            MetricUnit metricUnit = db.MetricUnit.FirstOrDefault(r => r.id == tempDetail.id_metricUnitMove);
                                            throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnit?.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                            //throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");

                                        }
                                        else
                                        {
                                            //amountPurAux = amountMoveAux * factorConversion;
                                            amountPurAux = (tempDetail.amountMove ?? 0) * factorConversion;
                                        }

                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                            InventoryMoveDetail = inventoryMoveDetailAux,
                                            id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                            InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                            id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                            id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = amountPurAux
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }
                                else
                                {
                                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                    {
                                        id_inventoryMoveDetailExit = i.id,
                                        InventoryMoveDetail = i,
                                        id_inventoryMoveExit = paramInventoryMove.id,
                                        InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                        id_warehouseExit = i.id_warehouse,
                                        Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                        id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                        WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                        id_inventoryMoveDetailEntry = tempDetail.id,
                                        InventoryMoveDetail1 = tempDetail,
                                        quantity = (tempDetail.amountMove ?? 0)
                                        //quantity = amountMoveAux
                                    };
                                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                }
                                idx++;
                            }

                            #endregion Details

                            inventoryMove.Document.number = inventoryMove.natureSequential;
                        }
                        else
                        {
                            #region Document

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            //inventoryMove.Document.DocumentState = documentState;
                            inventoryMove.Document.id_documentState = documentState.id;

                            inventoryMove.Document.id_userUpdate = ActiveUser.id;
                            inventoryMove.Document.dateUpdate = DateTime.Now;

                            inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                            inventoryMove.Document.description = paramInventoryMove.Document.description;

                            var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == paramInventoryMove.id);
                            if (documentSourceAux == null)
                            {
                                UpdateDocumentSource(inventoryMove.Document, paramInventoryMove.Document, db);
                            }

                            #endregion Document

                            #region InventoryMove

                            inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                            inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                            inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                            inventoryMove.isAuthomatic = true;

                            #endregion InventoryMove

                            db.SaveChanges();

                            #region FECHA EMISION

                            //string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                            //string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                            #endregion FECHA EMISION

                            #region Details

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                            str_item = "";
                            id_imd = 0;

                            idInventoryMoveDetails.AddRange(inventoryMove.InventoryMoveDetail.Select(r => r.id).ToList());
                           
                            for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                            {
                                var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                                for (int j = detail.InventoryMoveDetailTransfer1.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer1.ElementAt(j);
                                    detail.InventoryMoveDetailTransfer1.Remove(detailInventoryMoveDetailTransferEntry);
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Deleted;
                                }
                                #region Optimiza Codigo
                                //ValidateInventoryMoveDetailToRemove(db, detail);
                                #endregion
                                inventoryMove.InventoryMoveDetail.Remove(detail);
                                db.Entry(detail).State = EntityState.Detached;
                            }

                            db.SaveChanges();

                            foreach (var _detMat in itemDetail)
                            {
                                if (_detMat.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;
                                str_item = str_item + _detMat.id_item.ToString() + ","
                               + _detMat.id_warehouseEntry.ToString() + ","
                               + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                            }

                            #region QUERY LAST INVENTORYMOVEDETAIL CR Optimiza

                            //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                            //_param.str_item = str_item;
                            //_param.emissiondate = dtEmissionDate;
                            //_param.houremissiondate = dtHourEmissionDate;

                            #endregion QUERY LAST INVENTORYMOVEDETAIL

                            List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;

                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                id_imd = 0;
                                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;
                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;
                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailOpeningClosingForSP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                                              i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry ?? 0,
                                                                                                              i.id_costCenterEntry, i.id_subCostCenterEntry, false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);
                                tempDetails.Add(tempDetail);
                            }
                            db.SaveChanges();

                            //var tempDetailsSave = UpdateInventoryMoveDetailSP(tempDetails, trans, modeInsert: true);

                            int idx = 0;
                            foreach (var i in itemDetail)
                            {

                                var tempDetail = tempDetails[idx];
                                //i.id = tempDetailsSave[idx];
                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance( ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);

                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        Lot lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                        ProductionCart productionCart = db.ProductionCart.FirstOrDefault(r => r.id == tempDetail.id_productionCart);
                                        Item itemErr = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                        Warehouse warehouseErr = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                        WarehouseLocation warehouseLocationErr = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);

                                        var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                        var cartName = productionCart == null ? "" : ", perteneciente al Carro: " + productionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            itemErr?.name + ", en la Bodega: " + warehouseErr?.name + ", en la Ubicación: " + warehouseLocationErr?.name + lotNumber + cartName);
                                    }

                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                if (i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry != null)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        //factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                        //                                                                                                            fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;

                                        var factorConversion = (id_metricUnitMovExitAux != tempDetail.id_metricUnitMove) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == tempDetail.id_metricUnitMove &&
                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;

                                        if (factorConversion == 0)
                                        {
                                            MetricUnit metricUnit = db.MetricUnit.FirstOrDefault(r => r.id == tempDetail.id_metricUnitMove);
                                            throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnit?.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                            //throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                        }
                                        else
                                        {
                                            amountPurAux = (tempDetail.amountMove ?? 0) * factorConversion;
                                            //amountPurAux = amountMoveAux * factorConversion;
                                        }
                                        detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                        db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                                    }
                                }
                                else
                                {
                                    tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                    if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                    {
                                        foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                        {
                                            var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                            var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                            decimal amountPurAux = 0;
                                            //factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                            //                                                                                                            fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                            var factorConversion = (id_metricUnitMovExitAux != tempDetail.id_metricUnitMove) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == tempDetail.id_metricUnitMove &&
                                                                                                                                                        fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;

                                            if (factorConversion == 0)
                                            {
                                                MetricUnit metricUnit = db.MetricUnit.FirstOrDefault(r => r.id == tempDetail.id_metricUnitMove);
                                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnit?.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                                //throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                            }
                                            else
                                            {
                                                amountPurAux = (tempDetail.amountMove ?? 0) * factorConversion;
                                                //amountPurAux = amountMoveAux * factorConversion;
                                            }

                                            var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                            {
                                                id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                                InventoryMoveDetail = inventoryMoveDetailAux,
                                                id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                                InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                                id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                                Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                                id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                                WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                                id_inventoryMoveDetailEntry = tempDetail.id,
                                                InventoryMoveDetail1 = tempDetail,
                                                quantity = amountPurAux
                                            };
                                            tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                            newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                        }
                                    }
                                    else
                                    {
                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = i.id,
                                            InventoryMoveDetail = i,
                                            id_inventoryMoveExit = paramInventoryMove.id,
                                            InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                            id_warehouseExit = i.id_warehouse,
                                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                            id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = (tempDetail.amountMove ?? 0)
                                            //quantity = amountMoveAux
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }

                                idx++;
                            }

                            #endregion Details
                        }

                    }
                }
                db.SaveChanges();
                result.inventoryMoveDetailIdsForDelete = idInventoryMoveDetails.ToArray();
                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        #endregion
        public static ServiceInventoryMoveAux UpdateInventaryMoveLyingDownEntry(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            List<DocumentType> documentTypeList = new List<DocumentType>();
            try
            {
                documentTypeList = db.DocumentType.Where(it => it.isActive).ToList();
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var ids_warehouseEntry = paramInventoryMove.InventoryMoveDetail.GroupBy(g => new
                    {
                        g.id_warehouseEntry,
                    })
                    .Select(r => new
                    {
                        r.Key.id_warehouseEntry
                    }).ToList();

                    foreach (var warehouseEntry in ids_warehouseEntry)
                    {
                        inventoryMove = null;
                        var ids_inventaryMoveTransferAutomaticEntry = db.DocumentSource.Where(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("143"));
                        foreach (var detail in ids_inventaryMoveTransferAutomaticEntry)
                        {
                            var inventaryMoveTransferAutomaticEntry = db.InventoryMove.FirstOrDefault(fod => fod.id == detail.id_document);
                            if (inventaryMoveTransferAutomaticEntry.idWarehouse == warehouseEntry.id_warehouseEntry)
                            {
                                inventoryMove = inventaryMoveTransferAutomaticEntry;
                                break;
                            }
                        }

                        ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, warehouseEntry.id_warehouseEntry);

                        if (inventoryMove == null)
                        {
                            #region Document

                            Document document = new Document();

                            DocumentType documentType = documentTypeList.FirstOrDefault(t => t.code == (reverse ? "142" : "143")); document.DocumentType = documentType;
                            document.id_documentType = documentType.id;

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            //document.DocumentState = documentState;
                            document.id_documentState = documentState.id;

                            //document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                            document.id_emissionPoint = ActiveEmissionPoint.id;

                            document.id_userCreate = ActiveUser.id;
                            document.dateCreate = DateTime.Now;
                            document.id_userUpdate = ActiveUser.id;
                            document.dateUpdate = DateTime.Now;

                            document.sequential = documentTypeList.FirstOrDefault(d => d.id == document.id_documentType && d.id_company == ActiveCompany.id)?.currentNumber ?? 0;//GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                            var number = document.sequential.ToString().PadLeft(9, '0');
                            document.number = $"{ActiveEmissionPoint.BranchOffice.code.ToString().PadLeft(3, '0')}-{ActiveEmissionPoint.code.ToString().PadLeft(3, '0')}-{number}";  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);


                            document.emissionDate = paramInventoryMove.Document.emissionDate;

                            if (documentType != null)
                            {
                                documentType.currentNumber = documentType.currentNumber + 1;
                                db.DocumentType.Attach(documentType);
                                db.Entry(documentType).State = EntityState.Modified;
                            }

                            document.description = paramInventoryMove.Document.description;

                            UpdateDocumentSource(document, paramInventoryMove.Document, db);

                            #endregion Document

                            #region InventoryMove

                            inventoryMove = new InventoryMove();
                            inventoryMove.Document = document;
                            inventoryMove.id = document.id;

                            inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                            inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                            var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "IATTP");
                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Guardarse el Ingreso Por Transferencia Automática En Tumbada de Placa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automatico de Transferencia Por Tumbada Placa con código(IATTP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryEntryMove = new InventoryEntryMove
                            {
                                id_warehouseEntry = warehouseEntry.id_warehouseEntry,
                                id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id_warehouseEntry == warehouseEntry.id_warehouseEntry)?.id_warehouseLocationEntry,
                                id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                                dateEntry = DateTime.Now
                            };

                            inventoryMove.idWarehouse = warehouseEntry.id_warehouseEntry;
                            inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                            SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)warehouseEntry.id_warehouseEntry);
                            inventoryMove.natureSequential = _sp.sSequential;
                            inventoryMove.sequential = _sp.iSequential;
                            inventoryMove.isAuthomatic = true;

                            #endregion InventoryMove

                            #region FECHA EMISION

                            string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                            string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                            #endregion FECHA EMISION

                            #region Details

                            inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                            str_item = "";
                            id_imd = 0;

                            foreach (var _detMat in itemDetail)
                            {
                                if (_detMat.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;
                                str_item = str_item + _detMat.id_item.ToString() + ","
                               + _detMat.id_warehouseEntry.ToString() + ","
                               + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                            }

                            #region QUERY LAST INVENTORYMOVEDETAIL CR Optimiza

                            //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                            //_param.str_item = str_item;
                            //_param.emissiondate = dtEmissionDate;
                            //_param.houremissiondate = dtHourEmissionDate;

                            #endregion QUERY LAST INVENTORYMOVEDETAIL

                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;

                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                id_imd = 0;
                                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                           i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntry, i.id_subCostCenterEntry,
                                                                                           false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        var cartName = tempDetail.ProductionCart == null ? "" : ", perteneciente al Carro: " + tempDetail.ProductionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber + cartName);
                                    }
                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                        if (factorConversion == 0)
                                        {
                                            throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                        }
                                        else
                                        {
                                            amountPurAux = amountMoveAux * factorConversion;
                                        }

                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                            InventoryMoveDetail = inventoryMoveDetailAux,
                                            id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                            //InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                            id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                            //Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                            id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                            //WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = amountPurAux
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }
                                else
                                {
                                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                    {
                                        id_inventoryMoveDetailExit = i.id,
                                        InventoryMoveDetail = i,
                                        id_inventoryMoveExit = paramInventoryMove.id,
                                        //InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                        id_warehouseExit = i.id_warehouse,
                                        //Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                        id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                        //WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                        id_inventoryMoveDetailEntry = tempDetail.id,
                                        InventoryMoveDetail1 = tempDetail,
                                        quantity = amountMoveAux
                                    };
                                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                }
                            }

                            #endregion Details

                            inventoryMove.Document.number = inventoryMove.natureSequential;
                        }
                        else
                        {
                            #region Document

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            //inventoryMove.Document.DocumentState = documentState;
                            inventoryMove.Document.id_documentState = documentState.id;

                            inventoryMove.Document.id_userUpdate = ActiveUser.id;
                            inventoryMove.Document.dateUpdate = DateTime.Now;

                            inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                            inventoryMove.Document.description = paramInventoryMove.Document.description;

                            var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == paramInventoryMove.id);
                            if (documentSourceAux == null)
                            {
                                UpdateDocumentSource(inventoryMove.Document, paramInventoryMove.Document, db);
                            }

                            #endregion Document

                            #region InventoryMove

                            inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                            inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                            inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                            inventoryMove.isAuthomatic = true;

                            #endregion InventoryMove

                            #region FECHA EMISION

                            //string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                            //string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                            #endregion FECHA EMISION

                            #region Details

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                            str_item = "";
                            id_imd = 0;

                            for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                            {
                                var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                                for (int j = detail.InventoryMoveDetailTransfer1.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer1.ElementAt(j);
                                    detail.InventoryMoveDetailTransfer1.Remove(detailInventoryMoveDetailTransferEntry);
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Deleted;
                                }
                                #region Optimiza Codigo
                                //ValidateInventoryMoveDetailToRemove(db, detail);
                                #endregion
                                inventoryMove.InventoryMoveDetail.Remove(detail);
                                db.Entry(detail).State = EntityState.Deleted;
                            }

                            //foreach (var _detMat in itemDetail)
                            //{
                            //    if (_detMat.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;
                            //    str_item = str_item + _detMat.id_item.ToString() + ","
                            //   + _detMat.id_warehouseEntry.ToString() + ","
                            //   + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                            //}

                            #region QUERY LAST INVENTORYMOVEDETAIL CR Optimiza

                            //ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                            //_param.str_item = str_item;
                            //_param.emissiondate = dtEmissionDate;
                            //_param.houremissiondate = dtHourEmissionDate;

                            #endregion QUERY LAST INVENTORYMOVEDETAIL

                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseEntry != warehouseEntry.id_warehouseEntry) continue;

                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                id_imd = 0;
                                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                                                       i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry ?? 0,
                                                                                                                       i.id_costCenterEntry, i.id_subCostCenterEntry, false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);
                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        var cartName = tempDetail.ProductionCart == null ? "" : ", perteneciente al Carro: " + tempDetail.ProductionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber + cartName);
                                    }

                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                if (i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry != null)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                        if (factorConversion == 0)
                                        {
                                            throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                        }
                                        else
                                        {
                                            amountPurAux = amountMoveAux * factorConversion;
                                        }
                                        detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                        db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                                    }
                                }
                                else
                                {
                                    tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                    if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                    {
                                        foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                        {
                                            var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                            var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                            decimal amountPurAux = 0;
                                            factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                        fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                            if (factorConversion == 0)
                                            {
                                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                            }
                                            else
                                            {
                                                amountPurAux = amountMoveAux * factorConversion;
                                            }

                                            var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                            {
                                                id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                                InventoryMoveDetail = inventoryMoveDetailAux,
                                                id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                                //InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                                id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                                //Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                                id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                                //WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                                id_inventoryMoveDetailEntry = tempDetail.id,
                                                InventoryMoveDetail1 = tempDetail,
                                                quantity = amountPurAux
                                            };
                                            tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                            newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                        }
                                    }
                                    else
                                    {
                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = i.id,
                                            InventoryMoveDetail = i,
                                            id_inventoryMoveExit = paramInventoryMove.id,
                                            //InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                            id_warehouseExit = i.id_warehouse,
                                            //Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                            id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                            //WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = amountMoveAux
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }
                            }

                            #endregion Details
                        }
                    }
                }
                result.message = "OK";
                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveMasteredExitBoxed(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, MasteredDTO paramMasteredDTO, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };

            InventoryMove inventoryMove = null;
            string str_item = "";
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, paramMasteredDTO.id_boxedWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var id_inventaryMoveProcessAutomaticEntryMastered = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramMasteredDTO.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("147"))?.id_document;
                    var inventaryMoveProcessAutomaticEntryMastered = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveProcessAutomaticEntryMastered);

                    if (inventaryMoveProcessAutomaticEntryMastered != null)
                    {
                        UpdateInventaryMoveMasteredEntryMaster(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramMasteredDTO, inventoryMoveToReverse, db, reverse, inventaryMoveProcessAutomaticEntryMastered);

                        DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                        inventaryMoveProcessAutomaticEntryMastered.Document.id_documentState = documentStatePendiente.id;
                        inventaryMoveProcessAutomaticEntryMastered.Document.DocumentState = documentStatePendiente;

                        db.InventoryMove.Attach(inventaryMoveProcessAutomaticEntryMastered);
                        db.Entry(inventaryMoveProcessAutomaticEntryMastered).State = EntityState.Modified;
                    }

                    var id_inventaryMoveProcessAutomaticEntryBoxes = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramMasteredDTO.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("148"))?.id_document;
                    var inventaryMoveProcessAutomaticEntryBoxes = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveProcessAutomaticEntryBoxes);

                    if (inventaryMoveProcessAutomaticEntryBoxes != null)
                    {
                        UpdateInventaryMoveMasteredEntryBoxes(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramMasteredDTO, inventoryMoveToReverse, db, reverse, inventaryMoveProcessAutomaticEntryBoxes);

                        DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                        inventaryMoveProcessAutomaticEntryBoxes.Document.id_documentState = documentStatePendiente.id;
                        inventaryMoveProcessAutomaticEntryBoxes.Document.DocumentState = documentStatePendiente;

                        db.InventoryMove.Attach(inventaryMoveProcessAutomaticEntryBoxes);
                        db.Entry(inventaryMoveProcessAutomaticEntryBoxes).State = EntityState.Modified;
                    }

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var id_inventaryMoveProcessAutomaticExit = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramMasteredDTO.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("146"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveProcessAutomaticExit);
                    ValidateEmissionDateInventoryMove(db, paramMasteredDTO.dateTimeEmision, true, paramMasteredDTO.id_boxedWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "147" : "146")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramMasteredDTO.dateTimeEmision;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        var documentAux = db.Document.FirstOrDefault(fod => fod.id == paramMasteredDTO.id);
                        UpdateDocumentSource(document, documentAux, db);

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "EPAM");
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Guardarse el Egreso Por Proceso Automático En Masterizado desde la Bodega de Encartonado debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Proceso Automático En Masterizado con código(EPAM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramMasteredDTO.id_boxedWarehouse,
                            id_warehouseLocationExit = paramMasteredDTO.id_boxedWarehouseLocation,
                            id_dispatcher = paramMasteredDTO.id_responsable.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramMasteredDTO.id_responsable.Value),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramMasteredDTO.id_boxedWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramMasteredDTO.id_boxedWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramMasteredDTO.MasteredDetails.ToList();
                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_productMP.ToString()},{r.id_boxedWarehouse.ToString()},{r.id_boxedWarehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_productMP.ToString() + ","
                        //    + _detMat.id_boxedWarehouse.ToString() + ","
                        //    + _detMat.id_boxedWarehouseLocation.ToString() + ",;";
                        //}
                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = dtEmissionDate;
                        _param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            int? id_BoxedWarehouse = itemDetail?.FirstOrDefault()?.id_boxedWarehouse;

                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                id_BoxedWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_productMP,
                                                                                    id_warehouseLocation = r.id_boxedWarehouseLocation,
                                                                                    id_lote = r.id_lotMP

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lotMP).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_productMP);
                            var secondsOver = 0;
                            if (item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.quantityMP == 0) continue;
                            InventoryMoveDetail lastInventoryMove = null;

                            decimal amountMoveAux = i.quantityMP;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitBoxed);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_productMP, i.id_lotMP, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_boxedWarehouse.Value,
                                                                                       i.id_boxedWarehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_boxedWarehouse, null, secondsOver, 0, i.id_costCenterExitBoxed, i.id_subCostCenterExitBoxed,
                                                                                       false, null, null, null, null, null, i.lotMarked, idProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_boxedWarehouseLocation
                                                                                && r.id_lote == i.id_lotMP
                                                                                && r.id_item == i.id_productMP)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_productMP,
                                //                                            i.id_boxedWarehouse,
                                //                                            i.id_boxedWarehouseLocation,
                                //                                            i.id_lotMP,
                                //                                            db);
                                #endregion

                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_boxedWarehouse);
                                if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_productMP, i.id_boxedWarehouse, i.id_boxedWarehouseLocation, -tempDetail.exitAmount, db);
                            }
                        }

                        inventoryMove.Document.number = inventoryMove.natureSequential;

                        #endregion Details
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramMasteredDTO.dateTimeEmision;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryExitMove.id_dispatcher = paramMasteredDTO.id_responsable.Value;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramMasteredDTO.id_responsable.Value);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var idInventoryMoveDetails = new List<int>();

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Deleted;
                        }
                        var itemDetail = paramMasteredDTO.MasteredDetails.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_productMP.ToString()},{r.id_boxedWarehouse.ToString()},{r.id_boxedWarehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_productMP.ToString() + ","
                        //    + _detMat.id_boxedWarehouse.ToString() + ","
                        //    + _detMat.id_boxedWarehouseLocation.ToString() + ",;";
                        //}
                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = dtEmissionDate;
                        _param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            int? id_WarehouseBoxes = itemDetail?.FirstOrDefault()?.id_boxedWarehouse;
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_productMP,
                                                                                    id_warehouseLocation = r.id_boxedWarehouseLocation,
                                                                                    id_lote = r.id_lotMP

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lotMP).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_productMP);
                            var secondsOver = 0;
                            if (item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.quantityMP == 0) continue;
                            InventoryMoveDetail lastInventoryMove = null;

                            decimal amountMoveAux = i.quantityMP;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitBoxed);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_productMP, i.id_lotMP, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_boxedWarehouse.Value,
                                                           i.id_boxedWarehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_boxedWarehouse, null, secondsOver, inventoryMove.id, i.id_costCenterExitBoxed, i.id_subCostCenterExitBoxed,
                                                           false, null, null, null, null, null, i.lotMarked, idProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_boxedWarehouseLocation
                                                                                && r.id_lote == i.id_lotMP
                                                                                && r.id_item == i.id_productMP)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_productMP,
                                //                                            i.id_boxedWarehouse,
                                //                                            i.id_boxedWarehouseLocation,
                                //                                            i.id_lotMP,
                                //                                            db,
                                //                                            null,
                                //                                            i.lotMarked);
                                #endregion

                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_boxedWarehouse);
                                if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_productMP, i.id_boxedWarehouse, i.id_boxedWarehouseLocation, -tempDetail.exitAmount, db);
                            }
                        }

                        #endregion Details
                    }
                    result = UpdateInventaryMoveMasteredEntryMaster(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramMasteredDTO, inventoryMove, db, reverse, null);
                }

                result.message = "OK";
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveMasteredEntryMaster(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, MasteredDTO paramMasteredDTO, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };
            InventoryMove inventoryMove = null;
            string str_item = "";
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    inventoryMove = null;
                    var id_inventaryMoveProcessAutomaticEntryMastered = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramMasteredDTO.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("147"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveProcessAutomaticEntryMastered);

                    ValidateEmissionDateInventoryMove(db, paramMasteredDTO.dateTimeEmision, true, paramMasteredDTO.id_masteredWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "146" : "147")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramMasteredDTO.dateTimeEmision;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        document.description = paramMasteredDTO.description;
                        var documentAux = db.Document.FirstOrDefault(fod => fod.id == paramMasteredDTO.id);
                        UpdateDocumentSource(document, documentAux, db);

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "IPAMM");
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Guardarse el Ingreso Por Proceso Automático En Masterizado - Master en Bodega de Cámara de Congelación debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Proceso Automático En Masterizado - Master con código(IPAMM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramMasteredDTO.id_masteredWarehouse,
                            id_warehouseLocationEntry = paramMasteredDTO.id_masteredWarehouseLocation,
                            id_receiver = paramMasteredDTO.id_responsable.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramMasteredDTO.id_responsable),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramMasteredDTO.id_masteredWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramMasteredDTO.id_masteredWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramMasteredDTO.MasteredDetails.ToList();
                        str_item = "";

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_productPT.ToString()},{r.id_masteredWarehouse.ToString()},{r.id_masteredWarehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_productPT.ToString() + ","
                        //   + _detMat.id_masteredWarehouse.ToString() + ","
                        //   + _detMat.id_masteredWarehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = dtEmissionDate;
                        _param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            int? id_WarehouseMastered = itemDetail?.FirstOrDefault()?.id_masteredWarehouse;
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                id_WarehouseMastered,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_productPT,
                                                                                    id_warehouseLocation = r.id_masteredWarehouseLocation,
                                                                                    id_lote = r.id_lotMP

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);

                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lotMP).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_productPT);
                            var secondsOver = 0;
                            if (item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.quantityPT == 0) continue;
                            InventoryMoveDetail lastInventoryMove = null;

                            decimal amountMoveAux = i.quantityPT;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMastered);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(true, amountInvAux, i.id_productPT, i.id_lotMP, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_masteredWarehouse.Value,
                                                                                       i.id_masteredWarehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntryMastered, i.id_subCostCenterEntryMastered,
                                                                                       false, null, null, null, null, null, i.lotMarked, idProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_masteredWarehouseLocation
                                                                                && r.id_lote == i.id_lotMP
                                                                                && r.id_item == i.id_productPT)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_productPT,
                                //                                            i.id_masteredWarehouse,
                                //                                            i.id_masteredWarehouseLocation,
                                //                                            i.id_lotMP,
                                //                                            db,
                                //                                            null,
                                //                                            i.lotMarked);
                                #endregion

                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_masteredWarehouse);
                                //if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                if (!warehouse.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_productPT, i.id_masteredWarehouse, i.id_masteredWarehouseLocation, tempDetail.entryAmount, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramMasteredDTO.dateTimeEmision;

                        inventoryMove.Document.description = paramMasteredDTO.description;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = paramMasteredDTO.id_responsable.Value;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramMasteredDTO.id_responsable);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        str_item = "";

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Deleted;
                        }
                        var itemDetail = paramMasteredDTO.MasteredDetails.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_productPT.ToString()},{r.id_masteredWarehouse.ToString()},{r.id_masteredWarehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_productPT.ToString() + ","
                        //   + _detMat.id_masteredWarehouse.ToString() + ","
                        //   + _detMat.id_masteredWarehouseLocation.ToString() + ",;";
                        //}
                        #endregion



                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = dtEmissionDate;
                        _param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL


                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            int? id_WarehouseMastered = itemDetail?.FirstOrDefault()?.id_masteredWarehouse;
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                id_WarehouseMastered,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_productPT,
                                                                                    id_warehouseLocation = r.id_masteredWarehouseLocation,
                                                                                    id_lote = r.id_lotMP

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);

                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lotMP).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_productPT);
                            var secondsOver = 0;
                            if (item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.quantityPT == 0) continue;
                            InventoryMoveDetail lastInventoryMove = null;

                            decimal amountMoveAux = i.quantityPT;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMastered);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(true, amountInvAux, i.id_productPT, i.id_lotMP, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_masteredWarehouse.Value,
                                                           i.id_masteredWarehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntryMastered, i.id_subCostCenterEntryMastered,
                                                           false, null, null, null, null, null, i.lotMarked, idProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_masteredWarehouseLocation
                                                                                && r.id_lote == i.id_lotMP
                                                                                && r.id_item == i.id_productPT)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                             i.id_productPT,
                                //                                             i.id_masteredWarehouse,
                                //                                             i.id_masteredWarehouseLocation,
                                //                                             i.id_lotMP,
                                //                                             db,
                                //                                             null,
                                //                                             i.lotMarked);
                                #endregion


                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_masteredWarehouse);
                                //if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_productPT, i.id_masteredWarehouse, i.id_masteredWarehouseLocation, tempDetail.entryAmount, db);
                            }
                        }

                        #endregion Details
                    }
                    if (paramMasteredDTO.MasteredDetails.FirstOrDefault(fod => fod.quantityBoxes > 0) != null)
                    {
                        result = UpdateInventaryMoveMasteredEntryBoxes(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramMasteredDTO, inventoryMove, db, reverse, null);
                    }
                }
                result.message = "OK";
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveMasteredEntryBoxes(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, MasteredDTO paramMasteredDTO, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };
            InventoryMove inventoryMove = null;
            string str_item = "";
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    inventoryMove = null;
                    var id_inventaryMoveProcessAutomaticEntryBoxes = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramMasteredDTO.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("148"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveProcessAutomaticEntryBoxes);

                    ValidateEmissionDateInventoryMove(db, paramMasteredDTO.dateTimeEmision, true, paramMasteredDTO.id_warehouseBoxes);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "146" : "148")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramMasteredDTO.dateTimeEmision;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        document.description = paramMasteredDTO.description;
                        var documentAux = db.Document.FirstOrDefault(fod => fod.id == paramMasteredDTO.id);
                        UpdateDocumentSource(document, documentAux, db);

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "IPACS");
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Guardarse el Ingreso Por Proceso Automático En Masterizado - Cajas Sueltas en Bodega de Cámara de Congelación debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Proceso Automático En Masterizado - Cajas Sueltas con código(IPACS), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramMasteredDTO.id_warehouseBoxes,
                            id_warehouseLocationEntry = paramMasteredDTO.id_warehouseLocationBoxes,
                            id_receiver = paramMasteredDTO.id_responsable.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramMasteredDTO.id_responsable),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramMasteredDTO.id_warehouseBoxes;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramMasteredDTO.id_warehouseBoxes);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramMasteredDTO.MasteredDetails.ToList();
                        str_item = "";

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_productMP.ToString()},{r.id_warehouseBoxes.ToString()},{r.id_warehouseLocationBoxes.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_productMP.ToString() + ","
                        //   + _detMat.id_warehouseBoxes.ToString() + ","
                        //   + _detMat.id_warehouseLocationBoxes.ToString() + ",;";
                        //}
                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = dtEmissionDate;
                        _param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            int? id_WarehouseBoxes = itemDetail?.FirstOrDefault()?.id_warehouseBoxes;
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                id_WarehouseBoxes,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_productMP,
                                                                                    id_warehouseLocation = r.id_warehouseLocationBoxes,
                                                                                    id_lote = r.id_lotBoxes

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);

                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lotMP).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_productMP);
                            var secondsOver = 0;
                            if (item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.quantityBoxes == 0) continue;
                            InventoryMoveDetail lastInventoryMove = null;

                            decimal amountMoveAux = i.quantityBoxes;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitBoxed);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(true, amountInvAux, i.id_productMP, i.id_lotBoxes, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseBoxes.Value,
                                                                                       i.id_warehouseLocationBoxes.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntryBoxes, i.id_subCostCenterEntryBoxes,
                                                                                       false, null, null, null, null, null, i.lotMarked, idProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocationBoxes
                                                                                && r.id_lote == i.id_lotBoxes
                                                                                && r.id_item == i.id_productMP)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance( ActiveCompany.id, 
                                //                                            i.id_productMP, 
                                //                                            i.id_warehouseBoxes, 
                                //                                            i.id_warehouseLocationBoxes, 
                                //                                            i.id_lotBoxes, 
                                //                                            db, 
                                //                                            null, 
                                //                                            i.lotMarked);

                                #endregion

                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseBoxes);
                                //if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                if (!warehouse.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_productMP, i.id_warehouseBoxes, i.id_warehouseLocationBoxes, tempDetail.entryAmount, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramMasteredDTO.dateTimeEmision;

                        inventoryMove.Document.description = paramMasteredDTO.description;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = paramMasteredDTO.id_responsable.Value;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramMasteredDTO.id_responsable);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        str_item = "";

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Deleted;
                        }
                        var itemDetail = paramMasteredDTO.MasteredDetails.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_productPT.ToString()},{r.id_masteredWarehouse.ToString()},{r.id_masteredWarehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_productPT.ToString() + ","
                        //   + _detMat.id_masteredWarehouse.ToString() + ","
                        //   + _detMat.id_masteredWarehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = dtEmissionDate;
                        _param.houremissiondate = dtHourEmissionDate;

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            int? id_WarehouseBoxes = itemDetail?.FirstOrDefault()?.id_warehouseBoxes;
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                id_WarehouseBoxes,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_productMP,
                                                                                    id_warehouseLocation = r.id_warehouseLocationBoxes,
                                                                                    id_lote = r.id_lotBoxes

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lotMP).id_personProcessPlant ?? null;
                            var item = db.Item.FirstOrDefault(fod => fod.id == i.id_productMP);
                            var secondsOver = 0;
                            if (item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.quantityBoxes == 0) continue;
                            InventoryMoveDetail lastInventoryMove = null;

                            decimal amountMoveAux = i.quantityBoxes;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = 0;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitBoxed);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(true, amountInvAux, i.id_productMP, i.id_lotBoxes, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseBoxes.Value,
                                                           i.id_warehouseLocationBoxes.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntryBoxes, i.id_subCostCenterEntryBoxes,
                                                           false, null, null, null, null, null, i.lotMarked, idProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocationBoxes
                                                                                && r.id_lote == i.id_lotBoxes
                                                                                && r.id_item == i.id_productMP)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_productMP,
                                //                                            i.id_warehouseBoxes,
                                //                                            i.id_warehouseLocationBoxes,
                                //                                            i.id_lotBoxes,
                                //                                            db,
                                //                                            null,
                                //                                            i.lotMarked);

                                #endregion


                                var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseBoxes);
                                if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_productMP, i.id_warehouseBoxes, i.id_warehouseLocationBoxes, tempDetail.entryAmount, db);
                            }
                        }

                        #endregion Details
                    }
                }
                result.message = "OK";
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        #endregion UpdateInventaryMoveProductionLot

        #region UpdateInventaryMoveLogistic

        public static string UpdateInventaryMoveExitDispatchMaterials(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, RemissionGuide remissionGuide, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            string result = "";
            try
            {
                #region Check a Param of Exit automatic

                var aprobarReversarSE = reverse ? "Reversarse" : "Aprobarse";
                Setting settingAEMD = db.Setting.FirstOrDefault(t => t.code == "AEMD");
                if (settingAEMD == null)
                {
                    throw new Exception("No puede " + aprobarReversarSE + " la Guía debido a no estar configurado el Parámetro de: Automático Egreso de Materiales de Despacho con código(AEMD) " +
                                        "necesario para egresar los materiales de despacho de manera automática o no");
                }
                if (reverse)
                {
                    var inventoryMoveDetailExitDispatchMaterialsEMD = remissionGuide.RemissionGuideDispatchMaterial.FirstOrDefault()?.InventoryMoveDetailExitDispatchMaterials?.FirstOrDefault(fod => fod.InventoryMoveDetail.InventoryMove.InventoryReason.code.Equals("EMD"))?.InventoryMoveDetail.InventoryMove;
                    if (inventoryMoveDetailExitDispatchMaterialsEMD != null)
                    {
                        throw new Exception("No puede Reversarse la Guía debido a tener hecho Egreso de Materiales de Despacho de forma manual. Revéreselo de forma manual e inténtelo de nuevo.");
                    }
                }

                if (settingAEMD.value == "0")
                {
                    return result;
                }

                #endregion Check a Param of Exit automatic

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "45" : "44")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                document.emissionDate = remissionGuide.despachureDate;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, remissionGuide.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = null;
                inventoryMove.ProductionLot = null;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREMDA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Guía debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Materiales de Despacho Automatica con código(IREMDA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = null,
                        id_warehouseLocationEntry = null,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EMDA"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Guía debido a que no existe el Motivo de Inventario del Sistema, Egreso Materiales de Despacho Automatica con código(EMDA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = null,
                        id_warehouseLocationExit = null,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item).WarehouseLocation;
                    }
                    else
                    {
                        Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                        var id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                        warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);
                    }

                    List<InventoryMoveDetail> lastsMoveDetails =
                    db.InventoryMoveDetail.Where(d =>
                                                 d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                 d.id_lot == null &&
                                                 d.id_item == i.id_item &&
                                                 d.id_warehouse == warehouseLocationAux.Warehouse.id &&
                                                 d.id_warehouseLocation == warehouseLocationAux.id &&
                                                 !d.inMaximumUnit).ToList();

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(remissionGuide.despachureDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.sourceExitQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Guía debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailExitDispatchMaterials = i.InventoryMoveDetailExitDispatchMaterials.FirstOrDefault(fod => fod.id_remissionGuideDispatchMaterial == i.id);
                        i.InventoryMoveDetailExitDispatchMaterials.Remove(detailInventoryMoveDetailExitDispatchMaterials);
                        db.Entry(detailInventoryMoveDetailExitDispatchMaterials).State = EntityState.Deleted;
                    }
                    else
                    {
                        i.InventoryMoveDetailExitDispatchMaterials = new List<InventoryMoveDetailExitDispatchMaterials>();
                        var newInventoryMoveDetailExitDispatchMaterials = new InventoryMoveDetailExitDispatchMaterials
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_remissionGuideDispatchMaterial = i.id,
                            RemissionGuideDispatchMaterial = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailExitDispatchMaterials.Add(newInventoryMoveDetailExitDispatchMaterials);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveTransferDispatchMaterialsLogistic(User ActiveUser,
                                                                Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
                                                                RemissionGuide remissionGuide, DBContext db,
                                                                bool reverse, InventoryMove inventoryMoveToReverseExit = null,
                                                                InventoryMove inventoryMoveToReverseEntry = null,
                                                                bool isInSameTransaction = false)
        {
            string result = "";
            try
            {
                #region Check a Param of Exit automatic

                var aprobarReversarSE = reverse ? "Reversarse" : "Aprobarse";
                Setting settingAEMD = db.Setting.FirstOrDefault(t => t.code == "AEMD");
                if (settingAEMD == null)
                {
                    throw new Exception("No puede " + aprobarReversarSE + " la Guía debido a no estar configurado el Parámetro de: Automático Egreso de Materiales de Despacho con código(AEMD) " +
                                        "necesario para egresar los materiales de despacho de manera automática o no");
                }
                if (reverse)
                {
                    var inventoryMoveDetailExitDispatchMaterialsEMD = remissionGuide.RemissionGuideDispatchMaterial.FirstOrDefault()?.InventoryMoveDetailExitDispatchMaterials?.FirstOrDefault(fod => fod.InventoryMoveDetail.InventoryMove.InventoryReason.code.Equals("EMD"))?.InventoryMoveDetail.InventoryMove;
                    if (inventoryMoveDetailExitDispatchMaterialsEMD != null)
                    {
                        throw new Exception("No puede Reversarse la Guía debido a tener hecho Egreso de Materiales de Despacho de forma manual. Revéreselo de forma manual e inténtelo de nuevo.");
                    }
                }

                if (settingAEMD.value == "0")
                {
                    return result;
                }

                #endregion Check a Param of Exit automatic

                if (reverse)
                {
                    var inventoryMoveExit = UpdateInventaryMoveEntryDispatchMaterialsLogistic(ActiveUser, ActiveCompany, ActiveEmissionPoint, remissionGuide, db, reverse, inventoryMoveToReverseEntry);
                    UpdateInventaryMoveExitDispatchMaterialsLogistic(ActiveUser, ActiveCompany, ActiveEmissionPoint, remissionGuide, db, reverse, inventoryMoveToReverseExit, inventoryMoveExit, true);
                }
                else
                {
                    var inventoryMoveExit = UpdateInventaryMoveExitDispatchMaterialsLogistic(ActiveUser, ActiveCompany, ActiveEmissionPoint, remissionGuide, db, reverse, inventoryMoveToReverseExit);
                    UpdateInventaryMoveEntryDispatchMaterialsLogistic(ActiveUser, ActiveCompany, ActiveEmissionPoint, remissionGuide, db, reverse, inventoryMoveToReverseEntry, inventoryMoveExit, true);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitDispatchMaterialsLogistic(User ActiveUser, Company ActiveCompany,
                                                                    EmissionPoint ActiveEmissionPoint, RemissionGuide remissionGuide,
                                                                    DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
                                                                    InventoryMove inventoryMoveExit = null,
                                                                    bool isInSameTransaction = false)
        {
            InventoryMove result = null;
            int id_imd;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);
                document.emissionDate = db.RemissionGuide.FirstOrDefault(fod => fod.id == remissionGuide.id)?.Document.emissionDate ?? DateTime.Now;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, remissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREPTAMDL"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Guia debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Por Transferencia Automática Materiales de Despacho en Logistica con código(IREPTAMDL) necesario para reversar la transferencia de Materiales de Despacho en Logística, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = null,
                        id_warehouseLocationEntry = null,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else
                {
                    result = inventoryMove;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EPTAMDL"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Guia debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Materiales de Despacho en Logistica con código(EPTAMDL) necesario para realizar la transferencia de Materiales de Despacho en Logística, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = null,
                        id_warehouseLocationExit = null,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Setting settingUUDEMD = db.Setting.FirstOrDefault(t => t.code == "UUDEMD");
                        var id_warehouseLocationAuxInt = i.id_warehouselocation;
                        if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                        {
                            Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                            if (settingUDLI == null)
                            {
                                throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                    "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }

                            var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                            var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                            if (id_warehouseLocationAux == null)
                            {
                                throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }
                            id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                        }
                        id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? i.Item.ItemInventory.id_warehouseLocation;
                        warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);
                    }
                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);
                    decimal amountMoveAux = i.sourceExitQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Guía debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailExitDispatchMaterials = i.InventoryMoveDetailExitDispatchMaterials.FirstOrDefault(fod => fod.id_remissionGuideDispatchMaterial == i.id);
                        i.InventoryMoveDetailExitDispatchMaterials.Remove(detailInventoryMoveDetailExitDispatchMaterials);
                        db.Entry(detailInventoryMoveDetailExitDispatchMaterials).State = EntityState.Deleted;

                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        WarehouseLocation warehouseLocationProviderAux = GetWarehouseLocationProvider(remissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationProviderAux == null)
                        {
                            throw new Exception("No puede Reversarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                        var inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == warehouseLocationProviderAux.Warehouse.id &&
                                                                                                           fod.id_warehouseLocation == warehouseLocationProviderAux.id);

                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = i.sourceExitQuantity
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                    else
                    {
                        i.InventoryMoveDetailExitDispatchMaterials = new List<InventoryMoveDetailExitDispatchMaterials>();
                        var newInventoryMoveDetailExitDispatchMaterials = new InventoryMoveDetailExitDispatchMaterials
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_remissionGuideDispatchMaterial = i.id,
                            RemissionGuideDispatchMaterial = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailExitDispatchMaterials.Add(newInventoryMoveDetailExitDispatchMaterials);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryDispatchMaterialsLogistic(User ActiveUser,
                                                                Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
                                                                RemissionGuide remissionGuide, DBContext db, bool reverse,
                                                                InventoryMove inventoryMoveToReverse = null,
                                                                InventoryMove inventoryMoveExit = null,
                                                                bool isInSameTransaction = false)
        {
            InventoryMove result = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);
                document.emissionDate = db.RemissionGuide.FirstOrDefault(fod => fod.id == remissionGuide.id)?.Document.emissionDate ?? DateTime.Now;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, remissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    result = inventoryMove;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERIPTAMDL"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la Guía debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Ingreso Por Transferencia Automática Materiales de Despacho en Logistica con código(ERIPTAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = null,
                        id_warehouseLocationExit = null,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IPTAMDL"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la Guía debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Materiales de Despacho en Logistica con código(IPTAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = null,
                        id_warehouseLocationEntry = null,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();

                if (!isInSameTransaction)
                {
                    #region SOLUTION FOR LAST INVENTORY MOVE DETAIL

                    foreach (var _detMat in itemDetail)
                    {
                        WarehouseLocation warehouseLocationAux = null;

                        if (reverse)
                        {
                            warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == _detMat.id_item)?.WarehouseLocation;
                        }
                        else
                        {
                            Setting settingUUDEMD = db.Setting.FirstOrDefault(t => t.code == "UUDEMD");
                            var id_warehouseLocationAuxInt = _detMat.id_warehouselocation;
                            if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                            {
                                Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                                if (settingUDLI == null)
                                {
                                    throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                        "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                                }

                                var id_inventoryLineAux = _detMat.Item.id_inventoryLine.ToString();
                                var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                                if (id_warehouseLocationAux == null)
                                {
                                    throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                    " para la linea de inventario " + _detMat.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                                }
                                id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                            }
                            id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? _detMat.Item.ItemInventory.id_warehouseLocation;
                            warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);
                        }
                        if (warehouseLocationAux != null)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                            + warehouseLocationAux.Warehouse.id.ToString() + ","
                            + warehouseLocationAux.id.ToString() + ",;";
                        }
                    }

                    #region QUERY LAST INVENTORYMOVEDETAIL

                    ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                    _param.str_item = str_item;
                    _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                    _param.houremissiondate = dtHourEmissionDate;

                    _IinvMd = GetLastMoveDetail(_param);

                    #endregion QUERY LAST INVENTORYMOVEDETAIL

                    #endregion SOLUTION FOR LAST INVENTORY MOVE DETAIL
                }
                else
                {
                    var _lstInvMoveDetail = inventoryMoveExit.InventoryMoveDetail.ToList();
                    foreach (var i in _lstInvMoveDetail)
                    {
                        ItemInvMoveDetail _inv = new ItemInvMoveDetail();
                        _inv.id_item = i.id_item;
                        _inv.id_inventorymovedetail = i.id;
                        _IinvMd.Add(_inv);
                    }
                }

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProvider(remissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }
                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = i.sourceExitQuantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;
                    InventoryMoveDetail inventoryMoveDetailExitAux = null;

                    #region REVERSAR

                    if (reverse)
                    {
                        inventoryMoveDetailExitAux = inventoryMoveToReverse?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == warehouseLocationAux.Warehouse.id &&
                                                                                                           fod.id_warehouseLocation == warehouseLocationAux.id);
                    }

                    #endregion REVERSAR

                    #region APROBAR

                    else
                    {
                        Setting settingUUDEMD = db.Setting.FirstOrDefault(t => t.code == "UUDEMD");
                        var id_warehouseLocationAuxInt = i.id_warehouselocation;
                        if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                        {
                            Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                            if (settingUDLI == null)
                            {
                                throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                    "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }

                            var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                            var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                            if (id_warehouseLocationAux == null)
                            {
                                throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }
                            id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                        }

                        id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? i.Item.ItemInventory.id_warehouseLocation;
                        var warehouseLocation2Aux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);

                        inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                           fod.id_warehouseLocation == warehouseLocation2Aux.id);
                    }

                    #endregion APROBAR

                    unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                    unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux
                                                                                , id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false
                                                                                , unitPriceInvAux, warehouseLocationAux.Warehouse.id
                                                                                , warehouseLocationAux.id, lastInventoryMove, inventoryMove
                                                                                , ActiveUser, ActiveCompany, db);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Guía debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (!reverse)
                    {
                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = i.sourceExitQuantity
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveTransferReceptionDispatchMaterials(User ActiveUser, Company ActiveCompany,
                                                                        EmissionPoint ActiveEmissionPoint,
                                                                        ReceptionDispatchMaterials receptionDispatchMaterials,
                                                                        DBContext db, bool reverse,
                                                                        InventoryMove inventoryMoveToReverseExit = null,
                                                                        InventoryMove inventoryMoveToReverseEntry = null,
                                                                        InventoryMove inventoryMoveToReverseEntryRemissionGuide = null,
                                                                        InventoryMove inventoryMoveToReverseExitConsumed = null,
                                                                        InventoryMove inventoryMoveToReverseEntryConsumed = null,
                                                                        InventoryMove inventoryMoveToReverseExitConsumedRemissionGuide = null,
                                                                        List<ItemInvMoveDetail> lstLastInvProvider = null,
                                                                        List<ItemInvMoveDetail> lstLastInv = null,
                                                                        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
                                                                        int idWarehouse = 0,
                                                                        int idWarehouseProvider = 0,
                                                                        InventoryMove lastInventoryMoveEAAMDL = null,
                                                                        InventoryMove lastInventoryMoveIAAMDL = null,
                                                                        InventoryMove lastInventoryMoveERMDA = null,
                                                                        InventoryMove lastInventoryMoveETAPR = null,
                                                                        InventoryMove lastInventoryMoveITAPR = null)
        {
            string result = "";
            try
            {
                UpdateInventaryMoveConsumedReceptionDispatchMaterialsRemissionGuide(ActiveUser, ActiveCompany,
                    ActiveEmissionPoint, receptionDispatchMaterials, db, reverse,
                    inventoryMoveToReverseExitConsumed, inventoryMoveToReverseEntryConsumed,
                    inventoryMoveToReverseExitConsumedRemissionGuide,
                    lstLastInvProvider, lstLastInv, lstDispatchMaterial,
                    idWarehouse,
                    idWarehouseProvider, lastInventoryMoveERMDA);

                UpdateInventaryMoveTransferReceptionDispatchMaterialsRemissionGuide(ActiveUser, ActiveCompany,
                    ActiveEmissionPoint, receptionDispatchMaterials, db, reverse,
                    inventoryMoveToReverseExit, inventoryMoveToReverseEntry,
                    lstLastInvProvider, lstLastInv, lstDispatchMaterial, idWarehouse,
                    idWarehouseProvider, lastInventoryMoveEAAMDL, lastInventoryMoveIAAMDL, lastInventoryMoveETAPR, lastInventoryMoveITAPR);
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveTransferReceptionDispatchMaterialsNoRemissionGuide(User ActiveUser, Company ActiveCompany,
                                                                EmissionPoint ActiveEmissionPoint,
                                                                ReceptionDispatchMaterials receptionDispatchMaterials,
                                                                DBContext db, bool reverse, InventoryMove inventoryMoveToReverseExit = null,
                                                                InventoryMove inventoryMoveToReverseEntry = null,
                                                                InventoryMove inventoryMoveToReverseEntryRemissionGuide = null,
                                                                InventoryMove inventoryMoveToReverseExitConsumed = null,
                                                                InventoryMove inventoryMoveToReverseEntryConsumed = null,
                                                                InventoryMove inventoryMoveToReverseExitConsumedRemissionGuide = null,
                                                                List<ItemInvMoveDetail> lstLastInv = null,
                                                                List<ReceptionDispatchMaterialsDetail> lstDispatchMaterial = null,
                                                                int idWarehouse = 0)
        {
            string result = "";
            try
            {
                if (receptionDispatchMaterials.ReceptionDispatchMaterialsDetail.Count() > 0)
                {
                    UpdateInventaryMoveEntryReceptionDispatchMaterialsDetail(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials, db, reverse,
                        inventoryMoveToReverseEntryRemissionGuide, false, lstLastInv,
                        lstDispatchMaterial, idWarehouse);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }
            return result;
        }

        public static string UpdateInventaryMoveConsumedReceptionDispatchMaterialsRemissionGuide(User ActiveUser, Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials, DBContext db, bool reverse,
            InventoryMove inventoryMoveToReverseExitConsumed = null, InventoryMove inventoryMoveToReverseEntryConsumed = null,
            InventoryMove inventoryMoveToReverseExitConsumedRemissionGuide = null,
            List<ItemInvMoveDetail> lstLastInvProvider = null,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
            int idWarehouse = 0,
            int idWarehouseProvider = 0, InventoryMove lastInventoryMoveERMDA = null)
        {
            string result = "";
            try
            {
                var valueSettingTTGCM = db.Setting.FirstOrDefault(fod => fod.code == "TTGCM")?.value;
                if (valueSettingTTGCM != null)
                {
                    if (valueSettingTTGCM == "Transferencia")
                    {
                        UpdateInventaryMoveTransferConsumedReceptionDispatchMaterialsRemissionGuide(ActiveUser, ActiveCompany,
                            ActiveEmissionPoint, receptionDispatchMaterials, db,
                            reverse, inventoryMoveToReverseExitConsumed, inventoryMoveToReverseEntryConsumed,
                            lstLastInvProvider, lstLastInv, lstDispatchMaterial, idWarehouse, idWarehouseProvider);
                    }
                    else
                    {
                        if (valueSettingTTGCM == "Egreso")
                        {
                            UpdateInventaryMoveExitConsumedReceptionDispatchMaterialsRemissionGuide(ActiveUser, ActiveCompany,
                                ActiveEmissionPoint, receptionDispatchMaterials, db, reverse,
                                inventoryMoveToReverseExitConsumedRemissionGuide, false,
                                lstLastInvProvider, lstDispatchMaterial, idWarehouseProvider);
                            UpdateInventaryMoveExitStealReceptionDispatchMaterialsRemissionGuide(ActiveUser, ActiveCompany,
                                ActiveEmissionPoint, receptionDispatchMaterials, db, reverse, false,
                                lstLastInvProvider, lstDispatchMaterial, idWarehouseProvider, lastInventoryMoveERMDA);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveExitConsumedReceptionDispatchMaterialsRemissionGuide(User ActiveUser
                                                , Company ActiveCompany, EmissionPoint ActiveEmissionPoint
                                                , ReceptionDispatchMaterials receptionDispatchMaterials
                                                , DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null
                                                , bool isInSameTransaction = false
                                                , List<ItemInvMoveDetail> lstLastInv = null,
                                                List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
                                                int? idWarehouse = 0)
        {
            string result = "";
            int id_imd;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "76" : "75")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.number = "";
                document.sequential = 0;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = null;
                inventoryMove.ProductionLot = null;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ECMDA"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la Recepción de Materiales debido a que no existe el Motivo de Inventario del Sistema, Egreso Consumo Materiales de Despacho Automático con código(ECMDA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = receptionDispatchMaterials.RemissionGuide.RemissionGuideDispatchMaterial.ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                _IinvMd = lstLastInv;

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;
                    if (i.amountConsumed <= 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + ". El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = (decimal)i.amountConsumed;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                              warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }
                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, -amountInvAux, db);
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveExitStealReceptionDispatchMaterialsRemissionGuide(User ActiveUser
                                        , Company ActiveCompany, EmissionPoint ActiveEmissionPoint
                                        , ReceptionDispatchMaterials receptionDispatchMaterials
                                        , DBContext db, bool reverse, bool isInSameTransaction = false
                                        , List<ItemInvMoveDetail> lstLastInv = null,
                                        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
                                        int? idWarehouse = 0, InventoryMove InventoryMoveERMDA = null)
        {
            string result = "";
            int id_imd;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (InventoryMoveERMDA != null)
                {
                    ValidateEmissionDateInventoryMove(db, InventoryMoveERMDA.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "83" : "87")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (InventoryMoveERMDA != null)
                {
                    document.id_userCreate = InventoryMoveERMDA.Document.id_userCreate;
                    document.dateCreate = InventoryMoveERMDA.Document.dateCreate;
                    document.id_userUpdate = InventoryMoveERMDA.Document.id_userUpdate;
                    document.dateUpdate = InventoryMoveERMDA.Document.dateUpdate;
                    document.emissionDate = InventoryMoveERMDA.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.number = "";
                document.sequential = 0;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_productionLot = null;
                inventoryMove.ProductionLot = null;

                inventoryMove.id_inventoryMoveToReverse = InventoryMoveERMDA?.id;
                inventoryMove.InventoryMove2 = InventoryMoveERMDA;

                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERMDA"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la Recepción de Materiales debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Robo Materiales de Despacho Automático(ERMDA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                if (InventoryMoveERMDA == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = InventoryMoveERMDA.natureSequential;
                    inventoryMove.sequential = InventoryMoveERMDA.sequential;
                }

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = receptionDispatchMaterials.RemissionGuide.RemissionGuideDispatchMaterial.ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                _IinvMd = lstLastInv;

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;
                    if (i.stealQuantity <= 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = InventoryMoveERMDA.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + ". El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = (decimal)i.stealQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                              warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }
                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, -amountInvAux, db);
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveTransferConsumedReceptionDispatchMaterialsRemissionGuide(User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
            ReceptionDispatchMaterials receptionDispatchMaterials, DBContext db,
            bool reverse, InventoryMove inventoryMoveToReverseExit = null,
            InventoryMove inventoryMoveToReverseEntry = null,
            List<ItemInvMoveDetail> lstLastInvProvider = null,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
            int idWarehouse = 0,
            int idWarehouseProvider = 0)
        {
            string result = "";
            try
            {
                var inventoryMoveExit = UpdateInventaryMoveExitTransferConsumedReceptionDispatchMaterialsRemissionGuide(ActiveUser,
                    ActiveCompany, ActiveEmissionPoint, receptionDispatchMaterials,
                    db, reverse, inventoryMoveToReverseExit, null, false,
                    lstLastInvProvider, lstDispatchMaterial, idWarehouseProvider);
                UpdateInventaryMoveEntryTransferConsumedReceptionDispatchMaterialsRemissionGuide(ActiveUser,
                    ActiveCompany, ActiveEmissionPoint, receptionDispatchMaterials,
                    db, reverse, inventoryMoveToReverseEntry, inventoryMoveExit, true,
                    lstLastInv, lstDispatchMaterial, idWarehouse);
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitTransferConsumedReceptionDispatchMaterialsRemissionGuide(User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
            ReceptionDispatchMaterials receptionDispatchMaterials, DBContext db,
            bool reverse, InventoryMove inventoryMoveToReverse = null,
            InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
            int? idWarehouse = 0)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;

            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.number = "";
                document.sequential = 0;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREPTAMDPCR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Por Transferencia Automática Materiales de Despacho Por Consumo en Recepción con código(IREPTAMDPCR) necesario para reversar la transferencia de consumo de Materiales de Despacho, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = null,
                        id_warehouseLocationEntry = null,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else
                {
                    result = inventoryMove;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EPTAMDPCR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Materiales de Despacho Por Consumo en Recepción con código(EPTAMDPCR) necesario para realizar la transferencia de consumo de Materiales de Despacho, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = null,
                        id_warehouseLocationExit = null,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = receptionDispatchMaterials.RemissionGuide.RemissionGuideDispatchMaterial.Where(w => w.isActive).ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                _IinvMd = lstLastInv;

                foreach (var i in itemDetail)
                {
                    if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;
                    if (i.amountConsumed <= 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + ". El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = i.amountConsumed;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var id_warehouselocationAux = i.id_warehouselocation ?? i.Item.ItemInventory.id_warehouseLocation;
                        var id_warehouseAux = i.id_warehouse ?? i.Item.ItemInventory.id_warehouse;
                        var inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == id_warehouseAux &&
                                                                                                           fod.id_warehouseLocation == id_warehouselocationAux);

                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = (decimal)i.amountConsumed
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, -amountInvAux, db);
                }

                #endregion Details

                #region Update Sequential

                if (itemDetail != null && itemDetail.Where(w => w.amountConsumed != 0).Count() > 0)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryTransferConsumedReceptionDispatchMaterialsRemissionGuide(User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
            ReceptionDispatchMaterials receptionDispatchMaterials, DBContext db,
            bool reverse, InventoryMove inventoryMoveToReverse = null,
            InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
            int? idWarehouse = 0)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();

            int idCCsett = 0, idSCCsett = 0;

            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.number = "";
                document.sequential = 0;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IPTAMDPCR"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Materiales de Despacho Por Consumo en Recepción con código(IPTAMDPCR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryEntryMove = new InventoryEntryMove
                {
                    id_warehouseEntry = null,
                    id_warehouseLocationEntry = null,
                    id_receiver = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateEntry = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = receptionDispatchMaterials.RemissionGuide.RemissionGuideDispatchMaterial.Where(w => w.isActive).ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                _IinvMd = lstLastInv;

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;
                    if (i.amountConsumed <= 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    var id_warehouselocationAux = i.id_warehouselocation ?? i.Item.ItemInventory.id_warehouseLocation;
                    warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == (id_warehouselocationAux));

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = (decimal)i.amountConsumed;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;
                    InventoryMoveDetail inventoryMoveDetailExitAux = null;

                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                    WarehouseLocation warehouseLocation2Aux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                    if (warehouseLocation2Aux == null)
                    {
                        throw new Exception("No puede Reversarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + ". El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }

                    inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                        fod.id_item == i.id_item &&
                                                                                                        fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                        fod.id_warehouseLocation == warehouseLocation2Aux.id);

                    unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                    unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                    {
                        id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                        InventoryMoveDetail = inventoryMoveDetailExitAux,
                        id_inventoryMoveExit = inventoryMoveExit.id,
                        InventoryMove = inventoryMoveExit,
                        id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                        Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                        id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                        WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                        id_inventoryMoveDetailEntry = tempDetail.id,
                        InventoryMoveDetail1 = tempDetail,
                        quantity = (decimal)i.amountConsumed
                    };

                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);

                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, amountInvAux, db);
                }

                #endregion Details

                #region Update Sequential

                if (itemDetail != null && itemDetail.Where(w => w.amountConsumed != 0).Count() > 0)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveTransferReceptionDispatchMaterialsRemissionGuide(User ActiveUser, Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials, DBContext db, bool reverse,
            InventoryMove inventoryMoveToReverseExit = null,
            InventoryMove inventoryMoveToReverseEntry = null,
            List<ItemInvMoveDetail> lstLastInvProvider = null,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
            int idWarehouse = 0,
            int idWarehouseProvider = 0, InventoryMove lastInventoryMoveEAAMDL = null, InventoryMove lastInventoryMoveIAAMDL = null,
            InventoryMove lastInventoryMoveETAPR = null, InventoryMove lastInventoryMoveITAPR = null)
        {
            string result = "";
            try
            {
                var inventoryMoveExit = UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuide(ActiveUser, ActiveCompany,
                    ActiveEmissionPoint, receptionDispatchMaterials,
                    db, reverse, inventoryMoveToReverseExit, null, false, lstLastInvProvider,
                    lstDispatchMaterial, idWarehouseProvider);

                UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuide(ActiveUser, ActiveCompany,
                    ActiveEmissionPoint, receptionDispatchMaterials,
                    db, reverse, inventoryMoveToReverseEntry, inventoryMoveExit, true, lstLastInv,
                    lstDispatchMaterial, idWarehouse);

                #region Detail

                var itemDetail = receptionDispatchMaterials.RemissionGuide.RemissionGuideDispatchMaterial.Where(w => w.isActive).ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (i.sendedAdjustmentQuantity < 0)
                    {
                        var inventoryMoveExitAA = UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideEAAMDL_VirtualWareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveEAAMDL, null, false, lstLastInvProvider,
                        lstDispatchMaterial, idWarehouseProvider, i);

                        UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideIAAMDL_WareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveIAAMDL, inventoryMoveExitAA, true, lstLastInv,
                        lstDispatchMaterial, idWarehouse, i);
                    }
                    else if (i.sendedAdjustmentQuantity > 0)
                    {
                        var inventoryMoveExitAA = UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideEAAMDL_WareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveEAAMDL, null, false, lstLastInv,
                        lstDispatchMaterial, idWarehouse, i);

                        UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideIAAMDL_VirtualWareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveIAAMDL, null, true, lstLastInvProvider,
                        lstDispatchMaterial, idWarehouseProvider, i);
                    }
                    if (i.transferQuantity < 0)
                    {
                        var inventoryMoveExitTA = UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideETAPR_WareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveETAPR, null, false, lstLastInv,
                        lstDispatchMaterial, idWarehouse, i);

                        UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideITAPR_VirtualWareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveITAPR, inventoryMoveExitTA, true, lstLastInvProvider,
                        lstDispatchMaterial, idWarehouseProvider, i);
                    }
                    else if (i.transferQuantity > 0)
                    {
                        var inventoryMoveExitTA = UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideETAPR_VirtualWareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveETAPR, null, false, lstLastInvProvider,
                        lstDispatchMaterial, idWarehouseProvider, i);

                        UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideITAPR_WareHouse(ActiveUser, ActiveCompany,
                        ActiveEmissionPoint, receptionDispatchMaterials,
                        db, reverse, lastInventoryMoveITAPR, null, true, lstLastInv,
                        lstDispatchMaterial, idWarehouse, i);
                    }
                }

                #endregion Detail
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideEAAMDL_WareHouse(User ActiveUser, Company ActiveCompany,
       EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
       DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
       InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
       List<ItemInvMoveDetail> lstLastInv = null,
       List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
       int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "83" : "87")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EAAMDL"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Ajuste Automático Materiales de Despacho en Logistica con código(EAAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();
                _IinvMd = lstLastInv;
                WarehouseLocation warehouseLocationAux = null;

                var id_warehouselocationAux = row.id_warehouselocation ?? row.Item.ItemInventory.id_warehouseLocation;
                warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == (id_warehouselocationAux));

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.sendedAdjustmentQuantity;
                decimal amountInvAux = 0;

                decimal unitPriceMoveAux = 0;
                decimal unitPriceInvAux = 0;
                InventoryMoveDetail inventoryMoveDetailExitAux = null;

                Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                WarehouseLocation warehouseLocation2Aux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                if (warehouseLocation2Aux == null)
                {
                    throw new Exception("No puede Reversarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                        providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                }

                inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                    fod.id_item == row.id_item &&
                                                                                                    fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                    fod.id_warehouseLocation == warehouseLocation2Aux.id);

                unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }

                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, -amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideEAAMDL_VirtualWareHouse(User ActiveUser, Company ActiveCompany,
        EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
        DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
        InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
        List<ItemInvMoveDetail> lstLastInv = null,
        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
        int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "83" : "87")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EAAMDL"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Ajuste Automático Materiales de Despacho en Logistica con código(EAAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                _IinvMd = lstLastInv;

                WarehouseLocation warehouseLocationAux = null;

                if (reverse)
                {
                    warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == row.id_item)?.WarehouseLocation;
                }
                else
                {
                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                    warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                    if (warehouseLocationAux == null)
                    {
                        throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }
                }

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.sendedAdjustmentQuantity * -1;
                decimal amountInvAux = 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }
                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideIAAMDL_VirtualWareHouse(User ActiveUser, Company ActiveCompany,
        EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
        DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
        InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
        List<ItemInvMoveDetail> lstLastInv = null,
        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
        int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "87" : "83")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IAAMDL"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Ajuste Automático Materiales de Despacho en Logistica(IAAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                _IinvMd = lstLastInv;

                WarehouseLocation warehouseLocationAux = null;

                if (reverse)
                {
                    warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == row.id_item)?.WarehouseLocation;
                }
                else
                {
                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                    warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                    if (warehouseLocationAux == null)
                    {
                        throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }
                }

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.sendedAdjustmentQuantity;
                decimal amountInvAux = 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }
                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideIAAMDL_WareHouse(User ActiveUser, Company ActiveCompany,
        EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
        DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
        InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
        List<ItemInvMoveDetail> lstLastInv = null,
        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
        int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "87" : "83")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IAAMDL"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Ajuste Automático Materiales de Despacho en Logistica(IAAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                _IinvMd = lstLastInv;
                WarehouseLocation warehouseLocationAux = null;

                var id_warehouselocationAux = row.id_warehouselocation ?? row.Item.ItemInventory.id_warehouseLocation;
                warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == (id_warehouselocationAux));

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.sendedAdjustmentQuantity * -1;
                decimal amountInvAux = 0;

                decimal unitPriceMoveAux = 0;
                decimal unitPriceInvAux = 0;
                InventoryMoveDetail inventoryMoveDetailExitAux = null;

                Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                WarehouseLocation warehouseLocation2Aux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                if (warehouseLocation2Aux == null)
                {
                    throw new Exception("No puede Reversarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                        providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                }

                inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                    fod.id_item == row.id_item &&
                                                                                                    fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                    fod.id_warehouseLocation == warehouseLocation2Aux.id);

                unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }

                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, -amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideETAPR_VirtualWareHouse(User ActiveUser, Company ActiveCompany,
        EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
        DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
        InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
        List<ItemInvMoveDetail> lstLastInv = null,
        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
        int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ETAPR"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática entre Proveedores en Recepción(ETAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                _IinvMd = lstLastInv;

                WarehouseLocation warehouseLocationAux = null;

                if (reverse)
                {
                    warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == row.id_item)?.WarehouseLocation;
                }
                else
                {
                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                    warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                    if (warehouseLocationAux == null)
                    {
                        throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }
                }

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.transferQuantity;
                decimal amountInvAux = 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }
                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, -amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuideETAPR_WareHouse(User ActiveUser, Company ActiveCompany,
        EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
        DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
        InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
        List<ItemInvMoveDetail> lstLastInv = null,
        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
        int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ETAPR"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática entre Proveedores en Recepción(ETAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                _IinvMd = lstLastInv;

                WarehouseLocation warehouseLocationAux = null;

                var id_warehouselocationAux = row.id_warehouselocation ?? row.Item.ItemInventory.id_warehouseLocation;
                warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == (id_warehouselocationAux));

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.transferQuantity * -1;
                decimal amountInvAux = 0;

                decimal unitPriceMoveAux = 0;
                decimal unitPriceInvAux = 0;
                InventoryMoveDetail inventoryMoveDetailExitAux = null;

                Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                WarehouseLocation warehouseLocation2Aux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                if (warehouseLocation2Aux == null)
                {
                    throw new Exception("No puede Reversarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                        providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                }

                inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                    fod.id_item == row.id_item &&
                                                                                                    fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                    fod.id_warehouseLocation == warehouseLocation2Aux.id);

                unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }

                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideITAPR_VirtualWareHouse(User ActiveUser, Company ActiveCompany,
        EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
        DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
         InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
        List<ItemInvMoveDetail> lstLastInv = null,
        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
         int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ITAPR"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática entre Proveedores en Recepción(ITAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                _IinvMd = lstLastInv;

                WarehouseLocation warehouseLocationAux = null;

                if (reverse)
                {
                    warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == row.id_item)?.WarehouseLocation;
                }
                else
                {
                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                    warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                    if (warehouseLocationAux == null)
                    {
                        throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }
                }

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.transferQuantity * -1;
                decimal amountInvAux = 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }

                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, -amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuideITAPR_WareHouse(User ActiveUser, Company ActiveCompany,
        EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
        DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
         InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
        List<ItemInvMoveDetail> lstLastInv = null,
        List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
         int? idWarehouse = 0, RemissionGuideDispatchMaterial row = null)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ITAPR"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática entre Proveedores en Recepción(ITAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                _IinvMd = lstLastInv;
                WarehouseLocation warehouseLocationAux = null;

                var id_warehouselocationAux = row.id_warehouselocation ?? row.Item.ItemInventory.id_warehouseLocation;
                warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == (id_warehouselocationAux));

                id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == row.id_item)?.id_inventorymovedetail ?? 0;
                InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                decimal amountMoveAux = row.transferQuantity;
                decimal amountInvAux = 0;

                decimal unitPriceMoveAux = 0;
                decimal unitPriceInvAux = 0;
                InventoryMoveDetail inventoryMoveDetailExitAux = null;

                Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                WarehouseLocation warehouseLocation2Aux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                if (warehouseLocation2Aux == null)
                {
                    throw new Exception("No puede Reversarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                        providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                }

                inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                    fod.id_item == row.id_item &&
                                                                                                    fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                    fod.id_warehouseLocation == warehouseLocation2Aux.id);

                unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                int id_metricUnitMovAux = row.Item.ItemInventory.id_metricUnitInventory;
                int id_metricUnitInvAux = row.Item.ItemInventory.id_metricUnitInventory;

                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                if (factorConversion == 0)
                {
                    throw new Exception("Falta el Factor de Conversión entre : " + row.Item.ItemInventory.MetricUnit.code + " y " + row.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                }
                else
                {
                    amountInvAux = amountMoveAux * factorConversion;
                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                }

                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, row.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseLocationAux.Warehouse.id,
                                                                           warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, row.id_item, db, null);

                if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                {
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                }
                UpdateStockInventoryItem(row.id_item, idWarehouse, row.id_warehouselocation, amountInvAux, db);

                #endregion Details

                #region Update Sequential

                if (row != null)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitReceptionDispatchMaterialsRemissionGuide(User ActiveUser, Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
            DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null,
            InventoryMove inventoryMoveExit = null, bool isInSameTransaction = false,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
            int? idWarehouse = 0)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EPTAMDR"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Materiales de Despacho en Recepción con código(EPTAMDR) necesario para realizar la transferencia de Materiales de Despacho, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = receptionDispatchMaterials.RemissionGuide.RemissionGuideDispatchMaterial.Where(w => w.isActive).ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                _IinvMd = lstLastInv;

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    if (i.arrivalDestinationQuantity == 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = i.arrivalDestinationQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }
                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, -amountInvAux, db);
                }

                #endregion Details

                #region Update Sequential

                if (itemDetail != null && itemDetail.Where(w => w.arrivalDestinationQuantity != 0).Count() > 0)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryReceptionDispatchMaterialsRemissionGuide(User ActiveUser, Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
            DBContext db, bool reverse,
            InventoryMove inventoryMoveToReverse = null,
            InventoryMove inventoryMoveExit = null,
            bool isInSameTransaction = false,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<RemissionGuideDispatchMaterial> lstDispatchMaterial = null,
            int? idWarehouse = 0)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;

            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse == null)
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);
                UpdateDocumentSource(document, receptionDispatchMaterials.RemissionGuide.Document, db);
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IPTAMDR"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Materiales de Despacho en Recepción con código(IPTAMDR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryEntryMove = new InventoryEntryMove
                {
                    id_warehouseEntry = null,
                    id_warehouseLocationEntry = null,
                    id_receiver = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateEntry = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;
                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = receptionDispatchMaterials.RemissionGuide.RemissionGuideDispatchMaterial.Where(w => w.isActive).ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                _IinvMd = lstLastInv;

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    if (i.arrivalDestinationQuantity == 0) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    var id_warehouselocationAux = i.id_warehouselocation ?? i.Item.ItemInventory.id_warehouseLocation;
                    warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == (id_warehouselocationAux));

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = i.arrivalDestinationQuantity;
                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;
                    InventoryMoveDetail inventoryMoveDetailExitAux = null;

                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide);
                    WarehouseLocation warehouseLocation2Aux = GetWarehouseLocationProvider(receptionDispatchMaterials.RemissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                    if (warehouseLocation2Aux == null)
                    {
                        throw new Exception("No puede Reversarse la recepción debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }

                    inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                        fod.id_item == i.id_item &&
                                                                                                        fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                        fod.id_warehouseLocation == warehouseLocation2Aux.id);

                    unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                    unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                    {
                        id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                        InventoryMoveDetail = inventoryMoveDetailExitAux,
                        id_inventoryMoveExit = inventoryMoveExit.id,
                        InventoryMove = inventoryMoveExit,
                        id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                        Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                        id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                        WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                        id_inventoryMoveDetailEntry = tempDetail.id,
                        InventoryMoveDetail1 = tempDetail,
                        quantity = i.sourceExitQuantity
                    };
                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);

                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, amountInvAux, db);
                }

                #endregion Details

                #region Update Sequential

                if (itemDetail != null && itemDetail.Where(w => w.arrivalDestinationQuantity != 0).Count() > 0)
                {
                    if (inventoryMoveToReverse == null)
                    {
                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                    }
                    else
                    {
                        inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                        inventoryMove.sequential = inventoryMoveToReverse.sequential;
                    }
                }

                #endregion Update Sequential
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static string UpdateInventaryMoveEntryReceptionDispatchMaterialsDetail(User ActiveUser, Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint, ReceptionDispatchMaterials receptionDispatchMaterials,
            DBContext db, bool reverse,
            InventoryMove inventoryMoveToReverse = null,
            bool isInSameTransaction = false,
            List<ItemInvMoveDetail> lstLastInv = null,
            List<ReceptionDispatchMaterialsDetail> lstDispatchMaterial = null,
            int? idWarehouse = 0)
        {
            string result = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "47" : "46")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse != null)
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateUpdate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }
                else
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = DateTime.Now;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = DateTime.Now;
                    document.emissionDate = receptionDispatchMaterials.Document.emissionDate;
                }

                document.sequential = 0;
                document.number = "";

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);

                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, receptionDispatchMaterials.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IMDA"));
                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la recepción debido a que no existe el Motivo de Inventario del Sistema, Ingreso Materiales de Despacho Automático con código(IMDA), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }
                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryEntryMove = new InventoryEntryMove
                {
                    id_warehouseEntry = null,
                    id_warehouseLocationEntry = null,
                    id_receiver = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateEntry = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }
                inventoryMove.isAuthomatic = true;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = receptionDispatchMaterials.ReceptionDispatchMaterialsDetail.ToList();
                var lstDisMatid = lstDispatchMaterial.Select(s => s.id_item).ToList();
                itemDetail = itemDetail.Where(w => lstDisMatid.Contains(w.id_item)).ToList();
                _IinvMd = lstLastInv;

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                    if (i.arrivalDestinationQuantity == 0) continue;

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal priceAux = lastInventoryMove?.averagePrice ?? 0;

                    decimal amountMoveAux = i.arrivalDestinationQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux, id_metricUnitMovAux, priceAux, amountMoveAux, false, priceAux, i.id_warehouse,
                                                                               i.id_warehouseLocation, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, 0, 0, idSCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);
                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                i.id_item,
                                                                i.id_warehouse,
                                                                i.id_warehouseLocation,
                                                                null,
                                                                db);

                    if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la recepción debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + " del detalle de materiales de despacho");
                    }
                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouseLocation, amountInvAux, db);
                }

                #endregion Details
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        #endregion UpdateInventaryMoveLogistic

        #region UpdateInventaryMove

        public class ServiceInventoryMoveAux
        {
            public InventoryMove inventoryMove { get; set; }
            public string message { get; set; }

            public InventoryMove inventoryMoveAux { get; set; }
            public bool isNew { get; set; }
            public bool isNewMoveAux { get; set; }
            public int[] inventoryMoveDetailIdsForDelete { get; set; }
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveEntryPurchaseOrder(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    for (int i = inventoryMoveToReverse.InventoryMoveDetail.Count - 1; i >= 0; i--)
                    {
                        var detail = inventoryMoveToReverse.InventoryMoveDetail.ElementAt(i);

                        for (int j = detail.InventoryMoveDetailPurchaseOrder.Count - 1; j >= 0; j--)
                        {
                            var detailInventoryMoveDetailPurchaseOrder = detail.InventoryMoveDetailPurchaseOrder.ElementAt(j);
                            ServicePurchaseRemission.UpdateQuantityRecived(db, detailInventoryMoveDetailPurchaseOrder.id_purchaseOrderDetail.Value, null, -detailInventoryMoveDetailPurchaseOrder.quantity);
                        }
                    }

                    foreach (var i in itemDetail)
                    {
                        RemoveInventoryMoveDetail(i, db, ActiveUser);
                        UpdateStockItem(i.Item, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "30" : "04")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;

                        ValidateEmissionDateInventoryMove(db, document.emissionDate, false);

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;
                        inventoryMove.isAuthomatic = false;
                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IOC"));
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Aprobarse el Ingreso x Orden de Compra debido a que no existe el Motivo de Inventario del Sistema, Ingreso x Orden de Compra con código(IOC), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouse,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            List<InventoryMoveDetail> lastsMoveDetails =
                                db.InventoryMoveDetail.Where(d =>
                                                             d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                             d.id_lot == i.id_lot &&
                                                             d.id_item == i.id_item &&
                                                             d.id_warehouse == i.Warehouse.id &&
                                                             d.id_warehouseLocation == i.WarehouseLocation.id &&
                                                             !d.inMaximumUnit).ToList();

                            foreach (var inventoryMoveDetail in inventoryMove.InventoryMoveDetail)
                            {
                                if (inventoryMoveDetail.id_lot == i.id_lot &&
                                                             inventoryMoveDetail.id_item == i.id_item &&
                                                             inventoryMoveDetail.id_warehouse == i.id_warehouse &&
                                                             inventoryMoveDetail.id_warehouseLocation == i.id_warehouseLocation &&
                                                             !inventoryMoveDetail.inMaximumUnit)
                                {
                                    secondsOver++;
                                }
                            }

                            lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(paramInventoryMove.Document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                            InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                                    ? lastsMoveDetails.First()
                                                                    : null;

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;
                            decimal amountPurAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            int id_metricUnitPurAux = i.Item.ItemPurchaseInformation.id_metricUnitPurchase.Value;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                       i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, null, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                            }
                            factorConversion = (id_metricUnitPurAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitPurAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemPurchaseInformation.MetricUnit.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountPurAux = amountMoveAux * factorConversion;
                            }

                            tempDetail.InventoryMoveDetailPurchaseOrder = new List<InventoryMoveDetailPurchaseOrder>();
                            foreach (var detailInventoryMoveDetailPurchaseOrder in i.InventoryMoveDetailPurchaseOrder)
                            {
                                var newInventoryMoveDetailPurchaseOrder = new InventoryMoveDetailPurchaseOrder
                                {
                                    id_purchaseOrderDetail = detailInventoryMoveDetailPurchaseOrder.id_purchaseOrderDetail,
                                    PurchaseOrderDetail = db.PurchaseOrderDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailPurchaseOrder.id_purchaseOrderDetail),
                                    id_purchaseOrder = detailInventoryMoveDetailPurchaseOrder.id_purchaseOrder,
                                    PurchaseOrder = db.PurchaseOrder.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailPurchaseOrder.id_purchaseOrder),
                                    id_inventoryMoveDetail = tempDetail.id,
                                    InventoryMoveDetail = tempDetail,
                                    quantity = amountPurAux
                                };
                                tempDetail.InventoryMoveDetailPurchaseOrder.Add(newInventoryMoveDetailPurchaseOrder);
                                UpdateDocumentSource(inventoryMove.Document, newInventoryMoveDetailPurchaseOrder.PurchaseOrder.Document, db);
                                if (approve)
                                {
                                    ServicePurchaseRemission.UpdateQuantityRecived(db, newInventoryMoveDetailPurchaseOrder.id_purchaseOrderDetail.Value, null, newInventoryMoveDetailPurchaseOrder.quantity);
                                }
                            }
                        }

                        #endregion Details
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                        ValidateEmissionDateInventoryMove(db, inventoryMove.Document.emissionDate, false);

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region Details

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                            for (int j = detail.InventoryMoveDetailPurchaseOrder.Count - 1; j >= 0; j--)
                            {
                                var detailInventoryMoveDetailPurchaseOrder = detail.InventoryMoveDetailPurchaseOrder.ElementAt(j);
                                detail.InventoryMoveDetailPurchaseOrder.Remove(detailInventoryMoveDetailPurchaseOrder);
                                db.Entry(detailInventoryMoveDetailPurchaseOrder).State = EntityState.Deleted;
                            }
                            #region Optimiza Codigo
                            //ValidateInventoryMoveDetailToRemove(db, detail);
                            #endregion
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Deleted;
                        }

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            List<InventoryMoveDetail> lastsMoveDetails =
                                db.InventoryMoveDetail.Where(d =>
                                                             d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                             d.id_lot == i.id_lot &&
                                                             d.id_item == i.id_item &&
                                                             d.id_warehouse == i.Warehouse.id &&
                                                             d.id_warehouseLocation == i.WarehouseLocation.id &&
                                                             !d.inMaximumUnit).ToList();

                            foreach (var inventoryMoveDetail in inventoryMove.InventoryMoveDetail)
                            {
                                if (inventoryMoveDetail.id_lot == i.id_lot &&
                                                             inventoryMoveDetail.id_item == i.id_item &&
                                                             inventoryMoveDetail.id_warehouse == i.id_warehouse &&
                                                             inventoryMoveDetail.id_warehouseLocation == i.id_warehouseLocation &&
                                                             !inventoryMoveDetail.inMaximumUnit)
                                {
                                    secondsOver++;
                                }
                            }

                            lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(paramInventoryMove.Document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                            InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                                    ? lastsMoveDetails.First()
                                                                    : null;

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;
                            decimal amountPurAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            int id_metricUnitPurAux = i.Item.ItemPurchaseInformation.id_metricUnitPurchase.Value;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                           i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, null, i.id_personProcessPlant);
                            factorConversion = (id_metricUnitPurAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitPurAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemPurchaseInformation.MetricUnit.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountPurAux = amountMoveAux * factorConversion;
                            }

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                            }

                            tempDetail.InventoryMoveDetailPurchaseOrder = new List<InventoryMoveDetailPurchaseOrder>();
                            foreach (var detailInventoryMoveDetailPurchaseOrder in i.InventoryMoveDetailPurchaseOrder)
                            {
                                var newInventoryMoveDetailPurchaseOrder = new InventoryMoveDetailPurchaseOrder
                                {
                                    id_purchaseOrderDetail = detailInventoryMoveDetailPurchaseOrder.id_purchaseOrderDetail,
                                    PurchaseOrderDetail = db.PurchaseOrderDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailPurchaseOrder.id_purchaseOrderDetail),
                                    id_purchaseOrder = detailInventoryMoveDetailPurchaseOrder.id_purchaseOrder,
                                    PurchaseOrder = db.PurchaseOrder.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailPurchaseOrder.id_purchaseOrder),
                                    id_inventoryMoveDetail = tempDetail.id,
                                    InventoryMoveDetail = tempDetail,
                                    quantity = amountPurAux
                                };
                                tempDetail.InventoryMoveDetailPurchaseOrder.Add(newInventoryMoveDetailPurchaseOrder);
                                UpdateDocumentSource(inventoryMove.Document, newInventoryMoveDetailPurchaseOrder.PurchaseOrder.Document, db);
                                if (approve)
                                {
                                    ServicePurchaseRemission.UpdateQuantityRecived(db, newInventoryMoveDetailPurchaseOrder.id_purchaseOrderDetail.Value, null, newInventoryMoveDetailPurchaseOrder.quantity);
                                }
                            }
                        }

                        #endregion Details
                    }
                }

                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralIngresoOrdenCompra;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveEntry(bool approve, User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove, DBContext db,
            bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();
                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "29" : "03")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.idWarehouse,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };
                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;

                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramInventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_provider = paramInventoryMove.id_provider;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;
                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouse.ToString() + ","
                           + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;
                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, (int)inventoryMove.idWarehouse,
                                                                                       i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans, null, null, null, null, i.ordenProduccion, null, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            inventoryMove.idWarehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db,
                                                                            null,
                                                                            i.lotMarked);
                                var warehouseAux = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMove.idWarehouse);
                                if (!warehouseAux.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, inventoryMove.idWarehouse, i.id_warehouseLocation, amountInvAux, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        #endregion Document

                        #region InventoryMove

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_provider = paramInventoryMove.id_provider;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        result.inventoryMoveDetailIdsForDelete = inventoryMove
                                                                    .InventoryMoveDetail
                                                                    .Select(r => r.id)
                                                                    .ToArray();

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Detached;
                        }

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouse.ToString() + ","
                           + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;
                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = (i.id_metricUnitMove != null) ? db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove)
                                                    : db.MetricUnit.FirstOrDefault(fod => fod.id == i.Item.ItemInventory.id_metricUnitInventory);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, (int)inventoryMove.idWarehouse,
                                                                                       i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans, null, null, null, null, i.ordenProduccion, null, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                     .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                 && r.id_lote == i.id_lot
                                                                                 && r.id_item == i.id_item)?
                                                                     .Sum(r => r.saldo) ?? 0);

                                var warehouseAux = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMove.idWarehouse);
                                if (!warehouseAux.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, inventoryMove.idWarehouse, i.id_warehouseLocation, amountInvAux, db);
                            }
                        }

                        #endregion Details
                    }
                }


                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgreso;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveExit(bool approve, User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove, DBContext db,
            bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;

            #region Optimiza Codigo
            inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);
            var documentTypeList = db.DocumentType.ToList();
            var documentStateList = db.DocumentState.ToList();
            var inventoryReasonList = db.InventoryReason.Where(ir => ir.isActive).ToList();
            var warehouseList = db.Warehouse.Where(w => w.isActive).ToList();
            var emissionPoint = db.EmissionPoint.Where(x => x.isActive).ToList();
            var metricUnit = db.MetricUnit.Where(m => m.isActive).ToList();
            #endregion

            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }
                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();
                        DocumentType documentType = documentTypeList.FirstOrDefault(t => t.code == (reverse ? "31" : "05")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = documentStateList.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = emissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            #region Optimiza Codigo
                            // db.DocumentType.Attach(documentType);
                            #endregion
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = inventoryReasonList.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramInventoryMove.idWarehouse,
                            id_warehouseLocationExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher),
                            dateExit = DateTime.Now
                        };
                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramInventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        //var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        StringBuilder str_itemBuilder = new StringBuilder();

                        foreach (var _detMat in itemDetail)
                        {
                            str_itemBuilder.Append(_detMat.id_item.ToString());
                            str_itemBuilder.Append(",");
                            str_itemBuilder.Append(_detMat.id_warehouse.ToString());
                            str_itemBuilder.Append(",");
                            str_itemBuilder.Append(_detMat.id_warehouseLocation.ToString());
                            str_itemBuilder.Append(",;");
                        }

                        str_item = str_itemBuilder.ToString();
                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL
                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, (int)inventoryMove.idWarehouse,
                                                                                                                   i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_item,
                                //                                            inventoryMove.idWarehouse,
                                //                                            i.id_warehouseLocation,
                                //                                            i.id_lot,
                                //                                            db,
                                //                                            null,
                                //                                            i.lotMarked,
                                //                                            paramInventoryMove.Document.emissionDate);

                                var warehouseAux = warehouseList.FirstOrDefault(fod => fod.id == inventoryMove.idWarehouse);
                                if (!warehouseAux.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, inventoryMove.idWarehouse, i.id_warehouseLocation, -amountInvAux, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = documentStateList.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        #endregion Document

                        #region InventoryMove

                        var inventoryReason = inventoryReasonList.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryExitMove.id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        //for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        //{
                        //    var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                        //    #region Optimiza Codigo
                        //    //ValidateInventoryMoveDetailToRemove(db, detail);
                        //    #endregion 
                        //    inventoryMove.InventoryMoveDetail.Remove(detail);
                        //    db.Entry(detail).State = EntityState.Deleted;
                        //}

                        foreach (var detail in inventoryMove.InventoryMoveDetail.ToList())
                        {

                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Deleted;
                        }

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        StringBuilder str_itemBuilder = new StringBuilder();

                        foreach (var _detMat in itemDetail)
                        {
                            str_itemBuilder.Append(_detMat.id_item);
                            str_itemBuilder.Append(",");
                            str_itemBuilder.Append(_detMat.id_warehouse);
                            str_itemBuilder.Append(",");
                            str_itemBuilder.Append(_detMat.id_warehouseLocation);
                            str_itemBuilder.Append(",;");
                        }

                        str_item = str_itemBuilder.ToString();

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;

                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, (int)inventoryMove.idWarehouse,
                                                                                       i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance( ActiveCompany.id, 
                                //                                            i.id_item, 
                                //                                            inventoryMove.idWarehouse, 
                                //                                            i.id_warehouseLocation, 
                                //                                            i.id_lot, 
                                //                                            db, 
                                //                                            null, 
                                //                                            i.lotMarked);
                                var warehouseAux = warehouseList.FirstOrDefault(fod => fod.id == inventoryMove.idWarehouse);
                                if (!warehouseAux.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, inventoryMove.idWarehouse, i.id_warehouseLocation, -amountInvAux, db);
                            }
                        }

                        #endregion Details
                    }
                }

                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgreso;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Producion");
            }

            return result;
        }

        #region CR Optimizacion Fx Inventario 
        public static ServiceInventoryMoveAux UpdateInventaryMoveExitOP(bool approve, User ActiveUser,
            Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove, DBContext db,
            bool reverse,
            Warehouse[] warehouseList,
            DocumentState[] documentStateList,
            EmissionPoint[] emissionPoint,
            InventoryReason[] inventoryReasonList,
            MetricUnit[] metricUnit,
            DocumentType[] documentTypeList,
            MetricUnitConversion[] metricUnitConversions,
            Employee[] employees,
            InventoryMove inventoryMoveToReverse = null,
            decimal priceLbs = 0,
            DbContextTransaction trans = null,
            string identificador = null
            )
        {

            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;

            #region Optimiza Codigo            
            inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);

            #endregion

            IDbTransaction transaction = null;
            SqlConnection connection = null;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }
                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    if (trans != null)
                    {
                        transaction = trans.UnderlyingTransaction;
                        connection = transaction.Connection as SqlConnection;
                    }

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document
                        LogInfo($"serv-imnull-doc-{identificador}", DateTime.Now);
                        Document document = new Document();

                        DocumentType documentType = documentTypeList.FirstOrDefault(t => t.code == (reverse ? "31" : "05")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;
                        DocumentState documentState = documentStateList.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;
                        document.EmissionPoint = emissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            #region Optimiza Codigo
                            // db.DocumentType.Attach(documentType);
                            #endregion                            
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove
                        LogInfo($"serv-imnull-im-{identificador}", DateTime.Now);
                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;
                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;
                        var inventoryReason = inventoryReasonList.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;
                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramInventoryMove.idWarehouse,
                            id_warehouseLocationExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher,
                            Employee = employees.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramInventoryMove.idWarehouse);

                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;
                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        #endregion InventoryMove

                        #region FECHA EMISION
                        LogInfo($"serv-imnull-fe-{identificador}", DateTime.Now);
                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details
                        LogInfo($"serv-imnull-imd-{identificador}", DateTime.Now);
                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        //var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        //StringBuilder str_itemBuilder = new StringBuilder();
                        //
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_itemBuilder.Append(_detMat.id_item.ToString());
                        //    str_itemBuilder.Append(",");
                        //    str_itemBuilder.Append(_detMat.id_warehouse.ToString());
                        //    str_itemBuilder.Append(",");
                        //    str_itemBuilder.Append(_detMat.id_warehouseLocation.ToString());
                        //    str_itemBuilder.Append(",;");
                        //}
                        //
                        //str_item = str_itemBuilder.ToString();

                        #region Optimizacion Aprobacion | Tabla de saldo 

                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();

                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        #endregion
                        #region QUERY LAST INVENTORYMOVEDETAIL


                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;
                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;

                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;
                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;
                            var metricUnitMovAux = metricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            //InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, (int)inventoryMove.idWarehouse,
                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailForSP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, (int)inventoryMove.idWarehouse,
                                                                                                i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant,
                                                                                                process: "InventoryMoveExit");

                            tempDetails.Add(tempDetail);
                        }

                        LogInfo($"serv-imnull-imd-save-{identificador}", DateTime.Now);
                        db.SaveChanges();

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null,
                                                                                inventotyMoveDetailIds: result.inventoryMoveDetailIdsForDelete,
                                                                                connection: connection,
                                                                                transaction: transaction,
                                                                                withNegatives: true);
                        }
                        #endregion

                        int idx = 0;
                        List<ItemInventoryDto> itemInventories = new List<ItemInventoryDto>();
                        foreach (var i in itemDetail)
                        {
                            var tempDetail = tempDetails[idx];
                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_item,
                                //                                            inventoryMove.idWarehouse,
                                //                                            i.id_warehouseLocation,
                                //                                            i.id_lot,
                                //                                            db,
                                //                                            null,
                                //                                            i.lotMarked,
                                //                                            paramInventoryMove.Document.emissionDate);                                
                                var warehouseAux = warehouseList.FirstOrDefault(fod => fod.id == inventoryMove.idWarehouse);
                                //if (!warehouseAux.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                if (!warehouseAux.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";

                                    var lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                    var item = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                    var warh = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                    var loct = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);

                                    var lotNumber = (lot == null ? "" : ", perteneciente al Lote: " + lot.number);
                                    throw new ProdHandlerException($"No puede {action} el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: {item?.name} en la Bodega: {warh?.name}, en la Ubicación: {loct?.name} {lotNumber}");
                                }

                                var itemInventory = UpdateStockInventoryItemOP(i.id_item,
                                    inventoryMove.idWarehouse,
                                    i.id_warehouseLocation, 
                                    tempDetail.exitAmount, db);
                                if (itemInventory != null) itemInventories.Add(itemInventory.ToDto());

                            }
                            idx++;
                        }

                        LogInfo($"serv-imnull-imd-itinv-{identificador}", DateTime.Now);
                        if (approve && (itemInventories?.Count ?? 0) > 0)
                        {
                            if (trans == null)
                            {
                                transaction = getDbTransaction();
                                connection = transaction.Connection as SqlConnection;
                            }

                            ServiceTransCtl.UpdateItemInventory(itemInventories.ToArray(), transaction, connection);
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document
                        LogInfo($"serv-im-doc-{identificador}", DateTime.Now);
                        DocumentState documentState = documentStateList.FirstOrDefault(s => s.code == (approve ? "03" : "01"));

                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;
                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;
                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        #endregion Document

                        #region InventoryMove
                        LogInfo($"serv-im-im-{identificador}", DateTime.Now);
                        var inventoryReason = inventoryReasonList.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;
                        inventoryMove.InventoryExitMove.id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher;
                        inventoryMove.InventoryExitMove.Employee = employees.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;
                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION
                        LogInfo($"serv-im-fe-{identificador}", DateTime.Now);
                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details
                        LogInfo($"serv-im-imd-{identificador}", DateTime.Now);
                        List<InventoryMoveDetail> detailToDeletes = new List<InventoryMoveDetail>();

                        result.inventoryMoveDetailIdsForDelete = inventoryMove.InventoryMoveDetail.Select(r => r.id).ToArray();
                        foreach (var detail in inventoryMove.InventoryMoveDetail.ToList())
                        {
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Detached;
                        }
                        //ServiceTransCtl.DeleteForSp(result.inventoryMoveDetailIdsForDelete, nameof(ServiceInventoryMove), (inventoryMove?.id ?? 0), transaction, connection);

                        LogInfo($"serv-im-imd-save-head-{identificador}", DateTime.Now);
                        db.SaveChanges();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}

                        //StringBuilder str_itemBuilder = new StringBuilder();
                        //
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_itemBuilder.Append(_detMat.id_item);
                        //    str_itemBuilder.Append(",");
                        //    str_itemBuilder.Append(_detMat.id_warehouse);
                        //    str_itemBuilder.Append(",");
                        //    str_itemBuilder.Append(_detMat.id_warehouseLocation);
                        //    str_itemBuilder.Append(",;");
                        //}
                        //
                        //str_item = str_itemBuilder.ToString();

                        #region Optimizacion Aprobacion | Tabla de saldo                         
                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;
                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL


                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;
                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailForSP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, (int)inventoryMove.idWarehouse,
                                                                                                i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant,
                                                                                                process: "InventoryMoveExit");
                            tempDetails.Add(tempDetail);

                        }
                        LogInfo($"serv-imn-imd-save{identificador}", DateTime.Now);
                        db.SaveChanges();

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;

                        if (approve)
                        {

                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null,
                                                                                inventotyMoveDetailIds: result.inventoryMoveDetailIdsForDelete,
                                                                                connection: connection,
                                                                                transaction: transaction,
                                                                                withNegatives: true
                                                                                );
                        }
                        #endregion

                        int idx = 0;
                        List<ItemInventoryDto> itemInventories = new List<ItemInventoryDto>();
                        foreach (var i in itemDetail)
                        {
                            var tempDetail = tempDetails[idx];

                            if (approve)
                            {

                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                var warehouseAux = warehouseList.FirstOrDefault(fod => fod.id == inventoryMove.idWarehouse);

                                if (!warehouseAux.allowsNegativeBalances && (remainingBalance < 0))
                                //if (!warehouseAux.allowsNegativeBalances && ( (remainingBalance - tempDetail.amountMove ) < 0))
                                {

                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                    var item = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                    var warh = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                    var loct = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);

                                    var lotNumber = (lot == null ? "" : ", perteneciente al Lote: " + lot.number);
                                    throw new ProdHandlerException($"No puede {action} el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: {item?.name} en la Bodega: {warh?.name}, en la Ubicación: {loct?.name} {lotNumber}");

                                }

                                var itemInventory = UpdateStockInventoryItemOP(i.id_item, inventoryMove.idWarehouse, i.id_warehouseLocation, -tempDetail.exitAmount, db);
                                if (itemInventory != null) itemInventories.Add(itemInventory.ToDto());

                            }

                            idx++;
                        }

                        LogInfo($"serv-im-imd-itinv-{identificador}", DateTime.Now);
                        if (approve && (itemInventories?.Count ?? 0) > 0)
                        {

                            if (trans == null)
                            {
                                transaction = getDbTransaction();
                                connection = transaction.Connection as SqlConnection;
                            }

                            ServiceTransCtl.UpdateItemInventory(itemInventories.ToArray(), transaction, connection);
                        }


                        #endregion Details
                    }

                    LogInfo($"serv-save-gen-{identificador}", DateTime.Now);
                    db.SaveChanges();

                }

                result.inventoryMove = inventoryMove;

            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgreso;
                result.inventoryMove = inventoryMove;
                FullLog(e, seccion: identificador);
            }

            LogInfo($"serv-end-{identificador}", DateTime.Now);
            return result;
        }

        #endregion

        #region RA  | Optimizacion Fx Inventario - 002
        public static ServiceInventoryMoveAux ExecUpdateInventoryMoveTransferExit(
            bool approve,
            User ActiveUser,
            Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove,
            DBContext db,
            bool reverse,
            bool isNew,
            Setting[] settings,
            Warehouse[] warehouses,
            WarehouseLocation[] warehouseLocations,
            DocumentState[] documentStates,
            EmissionPoint[] emissionPoints,
            InventoryReason[] inventoryReasons,
            Employee[] employees,
            MetricUnit[] metricUnits,
            MetricUnitConversion[] metricUnitConversions,
            InventoryMove inventoryMoveToReverse = null,
            decimal priceLbs = 0,
            DbContextTransaction trans = null,
            string identificador = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            string str_item = "";
            int id_imd = 0;

            IDbTransaction transaction = null;
            SqlConnection connection = null;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();

            try
            {

                if (trans != null)
                {
                    transaction = trans.UnderlyingTransaction;
                    connection = transaction.Connection as SqlConnection;
                }

                if (isNew)
                {
                    #region Document
                    var resultSequential = GetDocumentTypeSequentialAndNumber((reverse ? "33" : "32"), db, ActiveCompany, ActiveEmissionPoint);
                    DocumentType documentType = resultSequential.Item1;
                    int sequential = resultSequential.Item2;
                    string numberDocument = resultSequential.Item3;
                    int nextSequential = resultSequential.Item4;

                    paramInventoryMove.Document.sequential = sequential;
                    paramInventoryMove.Document.number = numberDocument;
                    paramInventoryMove.Document.id_documentType = documentType.id;
                    paramInventoryMove.Document.DocumentType = documentType;
                    paramInventoryMove.Document.DocumentType.currentNumber = nextSequential;


                    //db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                    #endregion

                    #region InventoryMove
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramInventoryMove.idWarehouse);
                    paramInventoryMove.natureSequential = _sp.sSequential;
                    paramInventoryMove.sequential = _sp.iSequential;
                    #endregion InventoryMove

                    #region Details
                    var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                    List<ItemInventoryDto> itemInventories = new List<ItemInventoryDto>();
                    foreach (var i in itemDetail)
                    {
                        ExecUpdateInventoryMoveDetail(db, i, isNew: i.isNew);
                        if (approve)
                        {
                            var itemInventory = UpdateStockInventoryItemOP(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.exitAmount, db);
                            if (itemInventory != null) itemInventories.Add(itemInventory.ToDto());
                        }
                    }

                    db.SaveChanges();

                    if (approve && (itemInventories?.Count ?? 0) > 0)
                    {
                        transaction = null;
                        connection = null;
                        if (trans == null)
                        {
                            transaction = getDbTransaction();
                            connection = transaction.Connection as SqlConnection;
                        }
                        else
                        {
                            transaction = trans.UnderlyingTransaction;
                            connection = transaction.Connection as SqlConnection;
                        }

                        ServiceTransCtl.UpdateItemInventory(itemInventories.ToArray(), transaction, connection);
                    }
                    paramInventoryMove.Document.number = paramInventoryMove.natureSequential;
                    #endregion
                }
                else
                {
                    #region Details
                    var inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);
                    var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                    var idInventoryMoveDetails = new List<int>();

                    result.inventoryMoveDetailIdsForDelete = inventoryMove
                                                                    .InventoryMoveDetail
                                                                    .Where(r => r.toRemove)
                                                                    .Select(r => r.id)
                                                                    .ToArray();

                    for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                    {

                        var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                        if (detail.toRemove)
                        {
                            for (int j = detail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                            {
                                var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer.ElementAt(j);
                                detail.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferEntry);
                                detailInventoryMoveDetailTransferEntry.id_inventoryMoveDetailExit = null;
                                db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                            }

                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Detached;
                        }

                    }

                    List<ItemInventoryDto> itemInventories = new List<ItemInventoryDto>();
                    foreach (var i in itemDetail)
                    {
                        ExecUpdateInventoryMoveDetail(db, i, isNew: i.isNew);

                        if (approve)
                        {

                            var itemInventory = UpdateStockInventoryItemOP(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.exitAmount, db);
                            if (itemInventory != null) itemInventories.Add(itemInventory.ToDto());


                            /// ANALIZAR CONSISTENCIA
                            for (int j = i.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                            {
                                var detailInventoryMoveDetailTransferEntry = i.InventoryMoveDetailTransfer.ElementAt(j);
                                detailInventoryMoveDetailTransferEntry.id_warehouseExit = i.id_warehouse;
                                detailInventoryMoveDetailTransferEntry.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse);
                                detailInventoryMoveDetailTransferEntry.id_warehouseLocationExit = i.id_warehouseLocation.Value;
                                detailInventoryMoveDetailTransferEntry.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation);

                                if (detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse != i.id_warehouseEntry)
                                {
                                    detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse = i.id_warehouseEntry.Value;
                                    detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouseLocation = null;
                                    detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.WarehouseLocation = null;
                                    db.Entry(detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1).State = EntityState.Modified;
                                }
                                db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                            }
                        }
                    }

                    db.SaveChanges();

                    if (approve && (itemInventories?.Count ?? 0) > 0)
                    {
                        transaction = null;
                        connection = null;
                        if (trans == null)
                        {
                            transaction = getDbTransaction();
                            connection = transaction.Connection as SqlConnection;
                        }
                        else
                        {
                            transaction = trans.UnderlyingTransaction;
                            connection = transaction.Connection as SqlConnection;
                        }

                        ServiceTransCtl.UpdateItemInventory(itemInventories.ToArray(), transaction, connection);
                    }

                    #endregion Details

                }

                result.inventoryMove = paramInventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = paramInventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgresoTransferencia;
                result.inventoryMove = paramInventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }
            return result;
        }

        public static ServiceInventoryMoveAux ValidateUpdateInventaryMoveTransferExit(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();

            try
            {
                if (reverse)
                {
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);
                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (inventoryMove == null)
                    {
                        result.isNew = true;

                        #region Document

                        Document document = new Document();

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;
                        document.description = paramInventoryMove.Document.description;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.emissionDate = paramInventoryMove.Document.emissionDate;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouse,
                            id_warehouseLocationExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;
                        inventoryMove.idWarehouseEntry = paramInventoryMove.idWarehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;


                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        List<InventoryMoveDetail> inventoryMoveDetailPrep = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd
                                        .FirstOrDefault(fod => fod.id_item == i.id_item
                                                        && fod.Id_warehouse == i.id_warehouse
                                                        && fod.Id_warehouselocation == i.id_warehouseLocation)?.id_inventorymovedetail ?? 0;

                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = PrepareUpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux,
                                                                                                unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                                i.id_warehouseLocation.Value, lastInventoryMove, ref inventoryMove, ActiveUser,
                                                                                                ActiveCompany, db, i.id_warehouseEntry, null, secondsOver, 0, i.id_costCenter,
                                                                                                i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked,
                                                                                                i.id_personProcessPlant);


                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);
                                #endregion                                

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }

                            }
                            if (tempDetail.isNew)
                            {
                                inventoryMoveDetailPrep.Add(tempDetail);
                            }

                        }


                        foreach (var e in inventoryMoveDetailPrep)
                        {
                            inventoryMove.InventoryMoveDetail.Add(e);
                        }
                        #endregion Details
                    }
                    else
                    {
                        result.isNew = false;

                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                        #endregion Document

                        #region InventoryMove

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;

                        inventoryMove.idWarehouseEntry = paramInventoryMove.idWarehouseEntry;

                        inventoryMove.InventoryExitMove.id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        var idInventoryMoveDetails = new List<int>();

                        #region Optimizacion Aprobacion | Tabla de saldo 

                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);
                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                            var existsDetail = (itemDetail.FirstOrDefault(fod => fod.id == detail.id) != null);
                            if (!existsDetail)
                            {
                                detail.toRemove = true;
                            }
                        }


                        List<InventoryMoveDetail> inventoryMoveDetailPrep = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = PrepareUpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot,
                                                                                                id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux,
                                                                                                amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                                i.id_warehouseLocation.Value, lastInventoryMove,
                                                                                                ref inventoryMove, ActiveUser, ActiveCompany,
                                                                                                db, i.id_warehouseEntry, null, secondsOver,
                                                                                                i.id, i.id_costCenter, i.id_subCostCenter,
                                                                                                false, null, null, null, null, i.ordenProduccion,
                                                                                                i.lotMarked, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }

                            }

                            if (tempDetail.isNew)
                            {
                                inventoryMoveDetailPrep.Add(tempDetail);
                            }
                        }

                        foreach (var e in inventoryMoveDetailPrep)
                        {
                            inventoryMove.InventoryMoveDetail.Add(e);
                        }

                        #endregion Details
                    }

                }

                result.inventoryMove = inventoryMove;

            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgresoTransferencia;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }
            return result;
        }
        #endregion

        public static ServiceInventoryMoveAux UpdateInventaryMoveTransferExit(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };

            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    for (int i = inventoryMoveToReverse.InventoryMoveDetail.Count - 1; i >= 0; i--)
                    {
                        var detail = inventoryMoveToReverse.InventoryMoveDetail.ElementAt(i);

                        var inventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer?.FirstOrDefault(fod => fod.InventoryMoveDetail1.InventoryMove.Document.DocumentState.code.Equals("03"));

                        if (inventoryMoveDetailTransferEntry != null)
                        {
                            throw new Exception("No puede Reversarse Egreso por transferencia debido a tener hecho Ingreso por transferencia Aprobadas. Revéreselo e inténtelo de nuevo.");
                        }
                    }

                    var id_inventaryMoveVirtualCompanyEntryToReverse = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == inventoryMoveToReverse.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("127"))?.id_document;
                    var inventaryMoveVirtualCompanyEntryToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveVirtualCompanyEntryToReverse);
                    UpdateInventaryMoveVirtualCompanyEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramInventoryMove, db, reverse, inventaryMoveVirtualCompanyEntryToReverse);

                    DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                    inventaryMoveVirtualCompanyEntryToReverse.Document.id_documentState = documentStatePendiente.id;
                    inventaryMoveVirtualCompanyEntryToReverse.Document.DocumentState = documentStatePendiente;

                    db.InventoryMove.Attach(inventaryMoveVirtualCompanyEntryToReverse);
                    db.Entry(inventaryMoveVirtualCompanyEntryToReverse).State = EntityState.Modified;

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);
                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "33" : "32")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.description = paramInventoryMove.Document.description;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);


                        document.emissionDate = paramInventoryMove.Document.emissionDate;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouse,
                            id_warehouseLocationExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;
                        inventoryMove.idWarehouseEntry = paramInventoryMove.idWarehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramInventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_item.ToString()},{r.id_warehouse.ToString()},{r.id_warehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                       i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_warehouseEntry, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant);

                            if (approve)
                            {
                                #region  -- Optimizacion consulta Saldo --
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                //decimal remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                                i.id_item,
                                //                                                i.id_warehouse,
                                //                                                i.id_warehouseLocation,
                                //                                                i.id_lot,
                                //                                                db,
                                //                                                null,
                                //                                                i.lotMarked);
                                #endregion                                

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.exitAmount, db);
                            }
                        }

                        inventoryMove.Document.number = inventoryMove.natureSequential;

                        #endregion Details
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                        #endregion Document

                        #region InventoryMove

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;

                        inventoryMove.idWarehouseEntry = paramInventoryMove.idWarehouseEntry;

                        inventoryMove.InventoryExitMove.id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;
                        inventoryMove.numberRemGuide = paramInventoryMove.numberRemGuide;

                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        var idInventoryMoveDetails = new List<int>();

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                            var existsDetail = (itemDetail.FirstOrDefault(fod => fod.id == detail.id) != null);
                            if (!existsDetail)
                            {
                                for (int j = detail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer.ElementAt(j);
                                    detail.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferEntry);
                                    detailInventoryMoveDetailTransferEntry.id_inventoryMoveDetailExit = null;
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                }
                                #region Optimiza Codigo
                                //ValidateInventoryMoveDetailToRemove(db, detail);
                                #endregion
                                inventoryMove.InventoryMoveDetail.Remove(detail);
                                db.Entry(detail).State = EntityState.Deleted;
                            }
                        }

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_item.ToString()},{r.id_warehouse.ToString()},{r.id_warehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");

                        // -- VERSION PREVIA | 20240227
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //    + _detMat.id_warehouse.ToString() + ","
                        //    + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion



                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion
                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                           i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_warehouseEntry, null, secondsOver, i.id, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.exitAmount, db);

                                for (int j = tempDetail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = tempDetail.InventoryMoveDetailTransfer.ElementAt(j);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseExit = tempDetail.id_warehouse;
                                    detailInventoryMoveDetailTransferEntry.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouse);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseLocationExit = tempDetail.id_warehouseLocation.Value;
                                    detailInventoryMoveDetailTransferEntry.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseLocation);

                                    if (detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse != tempDetail.id_warehouseEntry)
                                    {
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse = tempDetail.id_warehouseEntry.Value;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseEntry);
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouseLocation = null;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.WarehouseLocation = null;
                                        db.Entry(detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1).State = EntityState.Modified;
                                    }
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                }
                            }
                        }

                        #endregion Details
                    }

                    if (approve)
                    {
                        result = UpdateInventaryMoveVirtualCompanyEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMove, db, reverse, null);
                    }
                }

                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveVirtualCompanyEntry(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse?.InventoryMoveDetail.ToList();
                    if (itemDetail != null)
                    {
                        foreach (var i in itemDetail)
                        {
                            UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                        }
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var codigoCBVE = db.Setting.FirstOrDefault(fod2 => fod2.code == "CBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCBVE))
                    {
                        throw new Exception("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseVIREMP = db.Warehouse.FirstOrDefault(fod => fod.code == codigoCBVE);
                    if (warehouseVIREMP == null)
                    {
                        throw new Exception("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido la bodega (con código: " + codigoCBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var codigoCUBVE = db.Setting.FirstOrDefault(fod2 => fod2.code == "CUBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCUBVE))
                    {
                        throw new Exception("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CUBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseLocationEMPGEN = db.WarehouseLocation.FirstOrDefault(fod => fod.code == codigoCUBVE);
                    if (warehouseLocationEMPGEN == null)
                    {
                        throw new Exception("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido la ubicacion (con código: " + codigoCUBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var id_inventaryMoveVirtualCompanyEntry = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("127"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveVirtualCompanyEntry);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, false, warehouseVIREMP.id);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "128" : "127")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        UpdateDocumentSource(document, paramInventoryMove.Document, db);

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        if (reverse)
                        {
                            var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EABVETM"));
                            if (inventoryReason == null)
                            {
                                throw new Exception("No puede Reversarse el ingreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Egreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(EABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryExitMove = new InventoryExitMove
                            {
                                id_warehouseExit = warehouseVIREMP.id,
                                id_warehouseLocationExit = warehouseLocationEMPGEN.id,
                                id_dispatcher = ActiveUser.id_employee ?? 0,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateExit = DateTime.Now
                            };
                        }
                        else
                        {
                            var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IABVETM"));
                            if (inventoryReason == null)
                            {
                                throw new Exception("No puede Aprobarse el ingreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(IABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryEntryMove = new InventoryEntryMove
                            {
                                id_warehouseEntry = warehouseVIREMP.id,
                                id_warehouseLocationEntry = warehouseLocationEMPGEN.id,
                                id_receiver = ActiveUser.id_employee ?? 0,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateEntry = DateTime.Now
                            };
                        }
                        inventoryMove.idWarehouse = warehouseVIREMP.id;

                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)warehouseVIREMP.id);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_item.ToString()},{r.id_warehouse.ToString()},{r.id_warehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");
                        // -- VERSION PREVIA | 20240227
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;
                        if (!approve)
                        {
                            _IinvMd = GetLastMoveDetail(_param);
                        }

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion 


                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                       warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans);

                            if (approve)
                            {
                                #region Optimizacion Aprobacion | Tabla de saldo 
                                decimal remainingBalance = (SaldoValidaAprobacion?
                                                                     .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                 && r.id_lote == i.id_lot
                                                                                 && r.id_item == i.id_item)?
                                                                     .Sum(r => r.saldo) ?? 0);

                                //decimal remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                                    i.id_item,
                                //                                                    warehouseVIREMP.id,
                                //                                                    warehouseLocationEMPGEN.id,
                                //                                                    i.id_lot,
                                //                                                    db,
                                //                                                    null,
                                //                                                    i.lotMarked);
                                #endregion


                                if (!warehouseVIREMP.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, amountInvAux, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = ActiveUser.id_employee ?? 0;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                            #region Optimiza Codigo
                            //ValidateInventoryMoveDetailToRemove(db, detail);
                            #endregion
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Deleted;
                        }

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        str_item = itemDetail
                                        .Select(r => $"{r.id_item.ToString()},{r.id_warehouse.ToString()},{r.id_warehouseLocation.ToString()}")
                                        .Aggregate((i, j) => $"{i};{j}");
                        // -- VERSION PREVIA | 20240227
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }
                        #endregion

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                       warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                if (!warehouseVIREMP.allowsNegativeBalances && (remainingBalance - amountInvAux) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, amountInvAux, db);
                            }
                        }

                        #endregion Details
                    }
                }


                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveTransferEntry(
            bool approve,
            User ActiveUser,
            Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove,
            DBContext db,
            bool reverse,
            InventoryMove inventoryMoveToReverse = null,
            decimal priceLbs = 0)
        {

            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventaryMoveVirtualCompanyExit = null;
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();

            bool validExecLastMov = false;

            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var id_inventaryMoveVirtualCompanyExitToReverse = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMoveToReverse.id &&
                                                                   fod.Document1.DocumentState.code.Equals("03") &&
                                                                   fod.Document1.DocumentType.code.Equals("128")).id_documentOrigin;
                    var inventaryMoveVirtualCompanyExitToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveVirtualCompanyExitToReverse);
                    UpdateInventaryMoveVirtualCompanyExit(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramInventoryMove, db, reverse, inventaryMoveVirtualCompanyExitToReverse);

                    DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                    inventaryMoveVirtualCompanyExitToReverse.Document.id_documentState = documentStatePendiente.id;
                    inventaryMoveVirtualCompanyExitToReverse.Document.DocumentState = documentStatePendiente;

                    db.InventoryMove.Attach(inventaryMoveVirtualCompanyExitToReverse);
                    db.Entry(inventaryMoveVirtualCompanyExitToReverse).State = EntityState.Modified;

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (approve)
                    {
                        validExecLastMov = true;
                        result = UpdateInventaryMoveVirtualCompanyExit(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramInventoryMove, db, reverse, null);
                        inventaryMoveVirtualCompanyExit = result.inventoryMove;
                    }

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "35" : "34")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        if (inventaryMoveVirtualCompanyExit != null)
                        {
                            UpdateDocumentSource(document, inventaryMoveVirtualCompanyExit.Document, db);
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouse,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramInventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouse.ToString() + ","
                           + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            if (i.id_warehouseLocation == 0 || i.id_warehouseLocation == null)
                            {
                                throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                            }

                            foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                {
                                    throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                                if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                {
                                    throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                            }

                            var secondsOver = 0;
                            if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                       i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db,
                                                                            null,
                                                                            i.lotMarked);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.entryAmount, db);
                            }

                            tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                            foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                decimal amountPurAux = 0;
                                factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountPurAux = amountMoveAux * factorConversion;
                                }

                                var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                {
                                    id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                    InventoryMoveDetail = inventoryMoveDetailAux,
                                    id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                    InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                    id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                    Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                    id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                    WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                    id_inventoryMoveDetailEntry = tempDetail.id,
                                    InventoryMoveDetail1 = tempDetail,
                                    quantity = amountPurAux
                                };
                                tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                UpdateDocumentSource(inventoryMove.Document, newInventoryMoveDetailTransfer.InventoryMove.Document, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        if (inventaryMoveVirtualCompanyExit != null)
                        {
                            var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == inventaryMoveVirtualCompanyExit.id);
                            if (documentSourceAux == null)
                            {
                                UpdateDocumentSource(inventoryMove.Document, inventaryMoveVirtualCompanyExit.Document, db);
                            }
                        }

                        #endregion Document

                        #region InventoryMove

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouse.ToString() + ","
                           + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;
                        if (!validExecLastMov)
                        {
                            _IinvMd = GetLastMoveDetail(_param);
                        }

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            if (i.id_warehouseLocation == 0 || i.id_warehouseLocation == null)
                            {
                                throw new Exception("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                            }

                            foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                {
                                    throw new Exception("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                                if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                {
                                    throw new Exception("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                            }

                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                                                   i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.id, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db,
                                                                            null,
                                                                            i.lotMarked);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }

                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.entryAmount, db);
                            }
                            foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                decimal amountPurAux = 0;
                                factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountPurAux = amountMoveAux * factorConversion;
                                }
                                detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                            }
                        }

                        #endregion Details
                    }
                }

                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralIngresoTransferencia;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveVirtualCompanyExit(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var codigoCBVE = db.Setting.FirstOrDefault(fod2 => fod2.code == "CBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCBVE))
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseVIREMP = db.Warehouse.FirstOrDefault(fod => fod.code == codigoCBVE);
                    if (warehouseVIREMP == null)
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido la bodega (con código: " + codigoCBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var codigoCUBVE = db.Setting.FirstOrDefault(fod2 => fod2.code == "CUBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCUBVE))
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CUBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseLocationEMPGEN = db.WarehouseLocation.FirstOrDefault(fod => fod.code == codigoCUBVE);
                    if (warehouseLocationEMPGEN == null)
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido la ubicacion (con código: " + codigoCUBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var id_inventaryMoveVirtualCompanyExit = db.DocumentSource.FirstOrDefault(fod => fod.id_document == paramInventoryMove.id &&
                                                                   fod.Document1.DocumentState.code.Equals("01") &&
                                                                   fod.Document1.DocumentType.code.Equals("128"))?.id_documentOrigin;

                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveVirtualCompanyExit);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, false, warehouseVIREMP.id);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "127" : "128")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        if (reverse)
                        {
                            var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IABVETM"));

                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Reversarse el egreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(IABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryEntryMove = new InventoryEntryMove
                            {
                                id_warehouseEntry = warehouseVIREMP.id,
                                id_warehouseLocationEntry = warehouseLocationEMPGEN.id,
                                id_receiver = ActiveUser.id_employee ?? 0,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateEntry = DateTime.Now
                            };
                        }
                        else
                        {
                            var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EABVETM"));

                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Aprobarse el egreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Egreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(EABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryExitMove = new InventoryExitMove
                            {
                                id_warehouseExit = warehouseVIREMP.id,
                                id_warehouseLocationExit = warehouseLocationEMPGEN.id,
                                id_dispatcher = ActiveUser.id_employee ?? 0,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateExit = DateTime.Now
                            };
                        }
                        inventoryMove.idWarehouse = warehouseVIREMP.id;

                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)warehouseVIREMP.id);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouse.ToString() + ","
                           + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                       warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            warehouseVIREMP.id,
                                                                            warehouseLocationEMPGEN.id,
                                                                            i.id_lot,
                                                                            db);

                                if (!warehouseVIREMP.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, -amountInvAux, db);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryExitMove.id_dispatcher = ActiveUser.id_employee ?? 0;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                            #region Optimiza Codigo
                            //ValidateInventoryMoveDetailToRemove(db, detail);
                            #endregion
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Deleted;
                        }

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouse.ToString() + ","
                           + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                       warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            warehouseVIREMP.id,
                                                                            warehouseLocationEMPGEN.id,
                                                                            i.id_lot,
                                                                            db);

                                if (!warehouseVIREMP.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, -amountInvAux, db);
                            }
                        }

                        #endregion Details
                    }
                }

                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgresoBodegaVirtual;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveTransferAutomaticExit(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };

            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var id_inventaryMoveTransferAutomaticEntryToReverse = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == inventoryMoveToReverse.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("130")).id_document;
                    var inventaryMoveTransferAutomaticEntryToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntryToReverse);
                    UpdateInventaryMoveTransferAutomaticEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramInventoryMove, db, reverse, inventaryMoveTransferAutomaticEntryToReverse);

                    DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                    inventaryMoveTransferAutomaticEntryToReverse.Document.id_documentState = documentStatePendiente.id;
                    inventaryMoveTransferAutomaticEntryToReverse.Document.DocumentState = documentStatePendiente;

                    db.InventoryMove.Attach(inventaryMoveTransferAutomaticEntryToReverse);
                    db.Entry(inventaryMoveTransferAutomaticEntryToReverse).State = EntityState.Modified;

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);
                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "130" : "129")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouse,
                            id_warehouseLocationExit = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseEntry,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocationEntry,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;
                        inventoryMove.idWarehouseEntry = paramInventoryMove.idWarehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)paramInventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                            + _detMat.id_warehouse.ToString() + ","
                            + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                       i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_warehouseEntry, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, i.id_warehouseLocationEntry, null, null, null, i.ordenProduccion, null, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.exitAmount, db);
                            }
                        }

                        inventoryMove.Document.number = inventoryMove.natureSequential;

                        #endregion Details
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                        #endregion Document

                        #region InventoryMove

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryExitMove.id_dispatcher = paramInventoryMove.InventoryExitMove.id_dispatcher;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryExitMove.id_dispatcher);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        var idInventoryMoveDetails = new List<int>();

                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                            var existsDetail = (itemDetail.FirstOrDefault(fod => fod.id == detail.id) != null);
                            if (!existsDetail)
                            {
                                for (int j = detail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer.ElementAt(j);
                                    detail.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferEntry);
                                    detailInventoryMoveDetailTransferEntry.id_inventoryMoveDetailExit = null;
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                }
                                #region Optimiza Codigo
                                //ValidateInventoryMoveDetailToRemove(db, detail);
                                #endregion
                                inventoryMove.InventoryMoveDetail.Remove(detail);
                                db.Entry(detail).State = EntityState.Deleted;
                            }
                        }

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                            + _detMat.id_warehouse.ToString() + ","
                            + _detMat.id_warehouseLocation.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                           i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_warehouseEntry, null, secondsOver, i.id, i.id_costCenter, i.id_subCostCenter, false, i.id_warehouseLocationEntry, null, null, null, i.ordenProduccion, null, i.id_personProcessPlant);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouse,
                                                                            i.id_warehouseLocation,
                                                                            i.id_lot,
                                                                            db);

                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -tempDetail.exitAmount, db);

                                for (int j = tempDetail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferEntry = tempDetail.InventoryMoveDetailTransfer.ElementAt(j);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseExit = tempDetail.id_warehouse;
                                    detailInventoryMoveDetailTransferEntry.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouse);
                                    detailInventoryMoveDetailTransferEntry.id_warehouseLocationExit = tempDetail.id_warehouseLocation.Value;
                                    detailInventoryMoveDetailTransferEntry.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseLocation);

                                    if (detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse != tempDetail.id_warehouseEntry)
                                    {
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse = tempDetail.id_warehouseEntry.Value;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseEntry);
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouseLocation = null;
                                        detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.WarehouseLocation = null;
                                        db.Entry(detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1).State = EntityState.Modified;
                                    }
                                    db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                }
                            }
                        }

                        #endregion Details
                    }

                    if (approve)
                    {
                        result = UpdateInventaryMoveTransferAutomaticEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMove, db, reverse, null);
                    }
                }

                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgresoTransferenciaAuto;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveTransferAutomaticEntry(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var id_inventaryMoveTransferAutomaticEntry = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("130"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntry);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouseEntry);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "129" : "130")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        UpdateDocumentSource(document, paramInventoryMove.Document, db);

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ITAI"));
                        if (inventoryReason == null)
                        {
                            throw new Exception("No puede Guardarse el ingreso por transferencia automática debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática en Inventario con código(ITAI), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseEntry,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocationEntry,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramInventoryMove.idWarehouseEntry);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouseEntry.ToString() + ","
                           + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                            {
                                throw new Exception("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                            }

                            foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                {
                                    throw new Exception("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                                if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                {
                                    throw new Exception("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                            }

                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                       i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouseEntry,
                                                                            i.id_warehouseLocationEntry,
                                                                            i.id_lot,
                                                                            db);
                                var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                if (!warehouseEntryAux.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                            }

                            tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                            if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                            {
                                foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                    var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                    decimal amountPurAux = 0;
                                    factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                    if (factorConversion == 0)
                                    {
                                        throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                                    }
                                    else
                                    {
                                        amountPurAux = amountMoveAux * factorConversion;
                                    }

                                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                    {
                                        id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                        InventoryMoveDetail = inventoryMoveDetailAux,
                                        id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                        InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                        id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                        Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                        id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                        WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                        id_inventoryMoveDetailEntry = tempDetail.id,
                                        InventoryMoveDetail1 = tempDetail,
                                        quantity = amountPurAux
                                    };
                                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                }
                            }
                            else
                            {
                                var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                {
                                    id_inventoryMoveDetailExit = i.id,
                                    InventoryMoveDetail = i,
                                    id_inventoryMoveExit = paramInventoryMove.id,
                                    InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                    id_warehouseExit = i.id_warehouse,
                                    Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                    id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                    WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                    id_inventoryMoveDetailEntry = tempDetail.id,
                                    InventoryMoveDetail1 = tempDetail,
                                    quantity = amountMoveAux
                                };
                                tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                            }
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                        var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == paramInventoryMove.id);
                        if (documentSourceAux == null)
                        {
                            UpdateDocumentSource(inventoryMove.Document, paramInventoryMove.Document, db);
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        foreach (var _detMat in itemDetail)
                        {
                            str_item = str_item + _detMat.id_item.ToString() + ","
                           + _detMat.id_warehouseEntry.ToString() + ","
                           + _detMat.id_warehouseLocationEntry.ToString() + ",;";
                        }

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetail(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        foreach (var i in itemDetail)
                        {
                            if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                            {
                                throw new Exception("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                            }

                            foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                {
                                    throw new Exception("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                                if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                {
                                    throw new Exception("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                            }

                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                                                   i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry ?? 0, i.id_costCenter, i.id_subCostCenter);

                            if (approve)
                            {
                                var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                            i.id_item,
                                                                            i.id_warehouseEntry,
                                                                            i.id_warehouseLocationEntry,
                                                                            i.id_lot,
                                                                            db);
                                var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                if (!warehouseEntryAux.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }

                                UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                            }
                            foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                decimal amountPurAux = 0;
                                factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountPurAux = amountMoveAux * factorConversion;
                                }
                                detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                            }
                        }

                        #endregion Details
                    }
                }
                result.message = "OK";
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMovePlantTransferExit(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMovePlantTransferDTO paramInventoryMovePlantTransferDTO, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };

            InventoryMove inventoryMove = null;
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        foreach (var item in paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails)
                        {
                            ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, item.id_warehouseExit);
                        }
                    }

                    #endregion Validar Fecha emision de Reversión

                    var id_inventaryMoveTransferAutomaticEntryToReverse = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == inventoryMoveToReverse.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("136")).id_document;
                    var inventaryMoveTransferAutomaticEntryToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntryToReverse);
                    UpdateInventaryMovePlantTransferEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveToReverse, db, reverse, inventaryMoveTransferAutomaticEntryToReverse);

                    DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                    inventaryMoveTransferAutomaticEntryToReverse.Document.id_documentState = documentStatePendiente.id;
                    inventaryMoveTransferAutomaticEntryToReverse.Document.DocumentState = documentStatePendiente;

                    db.InventoryMove.Attach(inventaryMoveTransferAutomaticEntryToReverse);
                    db.Entry(inventaryMoveTransferAutomaticEntryToReverse).State = EntityState.Modified;

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }
                    inventoryMove = inventaryMoveTransferAutomaticEntryToReverse;
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMovePlantTransferDTO.id);
                    ValidateEmissionDateInventoryMove(db, paramInventoryMovePlantTransferDTO.dateTimeEmision, true, paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.FirstOrDefault().id_warehouseExit);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "136" : "135")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMovePlantTransferDTO.dateTimeEmision;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        if (paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.Count() > 0)
                        {
                            document.description = "CONJUNTO VARIAS MÁQUINAS";
                        }
                        else
                        {
                            document.description = "Máquina: " + paramInventoryMovePlantTransferDTO.machineForProdCartOnCart +
                                              " - No. De Liquidación: " + paramInventoryMovePlantTransferDTO.numberLiquidationCartOnCart +
                                              " - Proceso: " + paramInventoryMovePlantTransferDTO.processType +
                                              " - Liquidador: " + paramInventoryMovePlantTransferDTO.liquidator;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "EPTAPRP");
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Guardarse el Ingreso Por Transferencia Automática Por Recepción Placa debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Por Recepción Placa con código(EPTAPRP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.FirstOrDefault()?.id_warehouseExit,
                            id_warehouseLocationExit = paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.FirstOrDefault()?.id_warehouseLocationExit,
                            id_dispatcher = paramInventoryMovePlantTransferDTO.id_receiver.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMovePlantTransferDTO.id_receiver.Value),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.FirstOrDefault()?.id_warehouseEntry,
                            id_warehouseLocationEntry = paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.FirstOrDefault()?.id_warehouseLocationEntry,
                            id_receiver = paramInventoryMovePlantTransferDTO.id_receiver.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMovePlantTransferDTO.id_receiver.Value),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.FirstOrDefault()?.id_warehouseExit;
                        inventoryMove.idWarehouseEntry = paramInventoryMovePlantTransferDTO.id_warehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)inventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                            var itemDetail = paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.ToList();

                            foreach (var i in itemDetail)
                            {
                                var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lot).id_personProcessPlant ?? null;
                                var item = db.Item.FirstOrDefault(fod => fod.id == i.id_item);
                                var secondsOver = 0;
                                if (item?.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountToEnter == 0) continue;
                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.amountToEnter;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.cost;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_umMovExit);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseExit.Value,
                                                                                           i.id_warehouseLocationExit.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_warehouseEntry, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false,
                                                                                           i.id_warehouseLocationEntry, i.id_costCenterEntry, i.id_subCostCenterEntry, i.id_productionCart, null, null, idProcessPlant);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseExit,
                                                                                i.id_warehouseLocationExit,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseExit);
                                    if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        var cartName = tempDetail.ProductionCart == null ? "" : ", perteneciente al Carro: " + tempDetail.ProductionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber + cartName);
                                    }
                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseExit, i.id_warehouseLocationExit, -tempDetail.exitAmount, db);
                                }
                            }

                            inventoryMove.Document.number = inventoryMove.natureSequential;

                            #endregion Details
                        }
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMovePlantTransferDTO.dateTimeEmision;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryExitMove.id_dispatcher = paramInventoryMovePlantTransferDTO.id_receiver.Value;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMovePlantTransferDTO.id_receiver.Value);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMovePlantTransferDTO.id_receiver.Value;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMovePlantTransferDTO.id_receiver.Value);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            var itemDetail = paramInventoryMovePlantTransferDTO.InventoryMovePlantTransferDetails.ToList();
                            var idInventoryMoveDetails = new List<int>();

                            for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                            {
                                var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                                var existsDetail = (itemDetail.FirstOrDefault(fod => fod.id == detail.id) != null);
                                if (!existsDetail)
                                {
                                    for (int j = detail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                    {
                                        var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer.ElementAt(j);
                                        detail.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferEntry);
                                        detailInventoryMoveDetailTransferEntry.id_inventoryMoveDetailExit = null;
                                        db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                    }
                                    #region Optimiza Codigo
                                    //ValidateInventoryMoveDetailToRemove(db, detail);
                                    #endregion
                                    inventoryMove.InventoryMoveDetail.Remove(detail);
                                    db.Entry(detail).State = EntityState.Deleted;
                                }
                            }

                            foreach (var i in itemDetail)
                            {
                                var idProcessPlant = db.ProductionLot.FirstOrDefault(a => a.id == i.id_lot).id_personProcessPlant ?? null;
                                var item = db.Item.FirstOrDefault(fod => fod.id == i.id_item);
                                var secondsOver = 0;
                                if (item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountToEnter == 0) continue;
                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.amountToEnter;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.cost;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_umMovExit);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseExit.Value,
                                                               i.id_warehouseLocationExit.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, i.id_warehouseEntry, null, secondsOver, i.id, i.id_costCenter, i.id_subCostCenter, false,
                                                               i.id_warehouseLocationEntry, i.id_costCenterEntry, i.id_subCostCenterEntry, i.id_productionCart, null, null, idProcessPlant);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseExit,
                                                                                i.id_warehouseLocationExit,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseExit);
                                    if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        var cartName = tempDetail.ProductionCart == null ? "" : ", perteneciente al Carro: " + tempDetail.ProductionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber + cartName);
                                    }
                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseExit, i.id_warehouseLocationExit, -tempDetail.exitAmount, db);

                                    for (int j = tempDetail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                    {
                                        var detailInventoryMoveDetailTransferEntry = tempDetail.InventoryMoveDetailTransfer.ElementAt(j);
                                        detailInventoryMoveDetailTransferEntry.id_warehouseExit = tempDetail.id_warehouse;
                                        detailInventoryMoveDetailTransferEntry.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouse);
                                        detailInventoryMoveDetailTransferEntry.id_warehouseLocationExit = tempDetail.id_warehouseLocation.Value;
                                        detailInventoryMoveDetailTransferEntry.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseLocation);

                                        if (detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse != tempDetail.id_warehouseEntry)
                                        {
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse = tempDetail.id_warehouseEntry.Value;
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseEntry);
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouseLocation = null;
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.WarehouseLocation = null;
                                            db.Entry(detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1).State = EntityState.Modified;
                                        }
                                        db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                    }
                                }
                            }

                            #endregion Details
                        }
                    }
                    result = UpdateInventaryMovePlantTransferEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMove, db, reverse, null);
                }

                result.message = "OK";
                result.inventoryMoveAux = result.inventoryMove;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMovePlantTransferEntry(bool approve, User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null, decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };
            InventoryMove inventoryMove = null;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var id_inventaryMoveTransferAutomaticEntry = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("136"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntry);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouseEntry);

                    if (inventoryMove == null)
                    {
                        Document document = db.Document.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntry);
                        if (document == null)
                        {
                            #region Document

                            document = new Document();

                            DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "135" : "136")); document.DocumentType = documentType;
                            document.id_documentType = documentType.id;

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            document.DocumentState = documentState;
                            document.id_documentState = documentState.id;

                            document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                            document.id_emissionPoint = ActiveEmissionPoint.id;

                            document.id_userCreate = ActiveUser.id;
                            document.dateCreate = DateTime.Now;
                            document.id_userUpdate = ActiveUser.id;
                            document.dateUpdate = DateTime.Now;

                            document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                            document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                            document.emissionDate = paramInventoryMove.Document.emissionDate;

                            if (documentType != null)
                            {
                                documentType.currentNumber = documentType.currentNumber + 1;
                                db.DocumentType.Attach(documentType);
                                db.Entry(documentType).State = EntityState.Modified;
                            }

                            document.description = paramInventoryMove.Document.description;

                            UpdateDocumentSource(document, paramInventoryMove.Document, db);

                            #endregion Document
                        }
                        else
                        {
                            #region Document

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            document.DocumentState = documentState;
                            document.id_documentState = documentState.id;

                            document.id_userUpdate = ActiveUser.id;
                            document.dateUpdate = DateTime.Now;

                            document.emissionDate = paramInventoryMove.Document.emissionDate;

                            var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == document.id && fod.id_documentOrigin == paramInventoryMove.id);
                            if (documentSourceAux == null)
                            {
                                UpdateDocumentSource(document, paramInventoryMove.Document, db);
                            }

                            #endregion Document
                        }

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.code == "IPTAPRP");
                        if (inventoryReason == null)
                        {
                            throw new ProdHandlerException("No puede Guardarse el Ingreso Por Transferencia Automática Por Recepción Placa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Por Recepción Placa con código(IPTAPRP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseEntry,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocationEntry,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramInventoryMove.idWarehouseEntry);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;
                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                           i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntry, i.id_subCostCenterEntry,
                                                                                           false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        var cartName = tempDetail.ProductionCart == null ? "" : ", perteneciente al Carro: " + tempDetail.ProductionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber + cartName);
                                    }
                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                        if (factorConversion == 0)
                                        {
                                            throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                        }
                                        else
                                        {
                                            amountPurAux = amountMoveAux * factorConversion;
                                        }

                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                            InventoryMoveDetail = inventoryMoveDetailAux,
                                            id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                            InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                            id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                            id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = amountPurAux
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }
                                else
                                {
                                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                    {
                                        id_inventoryMoveDetailExit = i.id,
                                        InventoryMoveDetail = i,
                                        id_inventoryMoveExit = paramInventoryMove.id,
                                        InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                        id_warehouseExit = i.id_warehouse,
                                        Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                        id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                        WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                        id_inventoryMoveDetailEntry = tempDetail.id,
                                        InventoryMoveDetail1 = tempDetail,
                                        quantity = amountMoveAux
                                    };
                                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                }
                            }

                            #endregion Details
                        }

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                        db.InventoryMove.Add(inventoryMove);
                        db.Entry(inventoryMove).State = EntityState.Added;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                        var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == paramInventoryMove.id);
                        if (documentSourceAux == null)
                        {
                            UpdateDocumentSource(inventoryMove.Document, paramInventoryMove.Document, db);
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                            {
                                var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                                for (int j = detail.InventoryMoveDetailTransfer1.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferExit = detail.InventoryMoveDetailTransfer1.ElementAt(j);
                                    detail.InventoryMoveDetailTransfer1.Remove(detailInventoryMoveDetailTransferExit);
                                    db.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferExit);
                                    db.Entry(detailInventoryMoveDetailTransferExit).State = EntityState.Deleted;
                                }
                                #region Optimiza Codigo
                                //ValidateInventoryMoveDetailToRemove(db, detail);
                                #endregion
                                inventoryMove.InventoryMoveDetail.Remove(detail);
                                db.Entry(detail).State = EntityState.Deleted;
                            }

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;
                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                           i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry ?? 0,
                                                                                           i.id_costCenter, i.id_subCostCenter, false, null, null, null, i.id_productionCart, null, null, i.id_personProcessPlant);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        var cartName = tempDetail.ProductionCart == null ? "" : ", perteneciente al Carro: " + tempDetail.ProductionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber + cartName);
                                    }

                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }
                                foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                    var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                    decimal amountPurAux = 0;
                                    factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                    if (factorConversion == 0)
                                    {
                                        throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                    }
                                    else
                                    {
                                        amountPurAux = amountMoveAux * factorConversion;
                                    }
                                    detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                    db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                                }
                            }

                            #endregion Details
                        }

                        db.InventoryMove.Attach(inventoryMove);
                        db.Entry(inventoryMove).State = EntityState.Modified;
                    }
                }
                result.message = "OK";
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveAutomaticTransferExit(bool approve
            , User ActiveUser, Company ActiveCompany
            , EmissionPoint ActiveEmissionPoint
            , AutomaticTransferDTO paramInventoryMoveAutomaticTransferDTO
            , DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null
            , decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };

            InventoryMove inventoryMove = null;
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var id_inventaryMoveTransferAutomaticEntryToReverse = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == inventoryMoveToReverse.id &&
                                                                   fod.Document.DocumentState.code.Equals("03") &&
                                                                   fod.Document.DocumentType.code.Equals("156")).id_document;
                    var inventaryMoveTransferAutomaticEntryToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntryToReverse);
                    UpdateInventaryMoveAutomaticTransferEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveToReverse, db, reverse, paramInventoryMoveAutomaticTransferDTO, inventaryMoveTransferAutomaticEntryToReverse);

                    DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                    inventaryMoveTransferAutomaticEntryToReverse.Document.id_documentState = documentStatePendiente.id;
                    inventaryMoveTransferAutomaticEntryToReverse.Document.DocumentState = documentStatePendiente;

                    db.InventoryMove.Attach(inventaryMoveTransferAutomaticEntryToReverse);
                    db.Entry(inventaryMoveTransferAutomaticEntryToReverse).State = EntityState.Modified;

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }
                    inventoryMove = inventaryMoveTransferAutomaticEntryToReverse;
                }
                else
                {
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMoveAutomaticTransferDTO.id);
                    ValidateEmissionDateInventoryMove(db, paramInventoryMoveAutomaticTransferDTO.dateTimeEmision, true, paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit);

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "156" : "155")); document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        // Agregamos 2 segundos para la emisión del documento
                        document.emissionDate = paramInventoryMoveAutomaticTransferDTO.dateTimeEmision;

                        if (documentType != null)
                        {
                            documentType.currentNumber = documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        document.description = $"TRANSFERENCIA AUTOMATICA GENERADA POR {paramInventoryMoveAutomaticTransferDTO.number}";

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.id == paramInventoryMoveAutomaticTransferDTO.id_InventoryReasonExit);
                        if (inventoryReason == null)
                        {
                            throw new Exception("No existe el motivo de Egreso Señalado.");
                        }

                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryExitMove = new InventoryExitMove
                        {
                            id_warehouseExit = paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit,
                            id_warehouseLocationExit = paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationExit,
                            id_dispatcher = paramInventoryMoveAutomaticTransferDTO.id_Despachador.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                            dateExit = DateTime.Now
                        };

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMoveAutomaticTransferDTO.id_WarehouseEntry,
                            id_warehouseLocationEntry = paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationEntry,
                            id_receiver = paramInventoryMoveAutomaticTransferDTO.id_Despachador.Value,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit;
                        inventoryMove.idWarehouseEntry = paramInventoryMoveAutomaticTransferDTO.id_WarehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)inventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                            var itemDetail = paramInventoryMoveAutomaticTransferDTO.lsDetail.ToList();

                            foreach (var i in itemDetail)
                            {
                                var item = db.Item.FirstOrDefault(fod => fod.id == i.id_Item);
                                var secondsOver = 0;
                                if (item?.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.quantity == 0) continue;

                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.quantity;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.cost;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_MetricUnitMov);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux
                                    , i.id_Item.Value, i.id_lot, id_metricUnitInvAux
                                    , id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit.Value
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationExit.Value
                                    , lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseEntry, null, secondsOver
                                    , 0, paramInventoryMoveAutomaticTransferDTO.id_CostCenterExit.Value
                                    , paramInventoryMoveAutomaticTransferDTO.id_SubCostCenterExit.Value, false
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationEntry
                                    , paramInventoryMoveAutomaticTransferDTO.id_CostCenterEntry
                                    , paramInventoryMoveAutomaticTransferDTO.id_SubCostCenterEntry, null);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_Item,
                                                                                paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit,
                                                                                paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationExit,
                                                                                i.id_lot,
                                                                                db,
                                                                                null);

                                    var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit);
                                    if (!warehouse.allowsNegativeBalances && (remainingBalance) < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                    }
                                    UpdateStockInventoryItem(i.id_Item.Value, paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit
                                        , paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationExit, -tempDetail.exitAmount, db);
                                }
                            }

                            inventoryMove.Document.number = inventoryMove.natureSequential;

                            #endregion Details
                        }
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMoveAutomaticTransferDTO.dateTimeEmision;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryExitMove.id_dispatcher = paramInventoryMoveAutomaticTransferDTO.id_Despachador.Value;
                        inventoryMove.InventoryExitMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMoveAutomaticTransferDTO.id_Despachador.Value);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMoveAutomaticTransferDTO.id_Despachador.Value;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMoveAutomaticTransferDTO.id_Despachador.Value);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            var itemDetail = paramInventoryMoveAutomaticTransferDTO.lsDetail.ToList();
                            var idInventoryMoveDetails = new List<int>();

                            for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                            {
                                var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                                var existsDetail = (itemDetail.FirstOrDefault(fod => fod.id == detail.id) != null);
                                if (!existsDetail)
                                {
                                    for (int j = detail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                    {
                                        var detailInventoryMoveDetailTransferEntry = detail.InventoryMoveDetailTransfer.ElementAt(j);
                                        detail.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferEntry);
                                        detailInventoryMoveDetailTransferEntry.id_inventoryMoveDetailExit = null;
                                        db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                    }
                                    #region Optimiza Codigo
                                    //ValidateInventoryMoveDetailToRemove(db, detail);
                                    #endregion
                                    inventoryMove.InventoryMoveDetail.Remove(detail);
                                    db.Entry(detail).State = EntityState.Deleted;
                                }
                            }

                            foreach (var i in itemDetail)
                            {
                                var item = db.Item.FirstOrDefault(fod => fod.id == i.id_Item);
                                var secondsOver = 0;
                                if (item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.quantity == 0) continue;

                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.quantity;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.cost;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_MetricUnitMov);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux
                                    , i.id_Item.Value, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux
                                    , unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit.Value
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationExit.Value
                                    , lastInventoryMove, inventoryMove, ActiveUser
                                    , ActiveCompany, db
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseEntry.Value, null
                                    , secondsOver, i.id
                                    , paramInventoryMoveAutomaticTransferDTO.id_CostCenterExit.Value
                                    , paramInventoryMoveAutomaticTransferDTO.id_SubCostCenterExit, false
                                    , paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationEntry.Value
                                    , paramInventoryMoveAutomaticTransferDTO.id_CostCenterEntry.Value
                                    , paramInventoryMoveAutomaticTransferDTO.id_SubCostCenterEntry.Value
                                    , null);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_Item.Value,
                                                                                paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit.Value,
                                                                                paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationExit.Value,
                                                                                i.id_lot,
                                                                                db,
                                                                                null);
                                    var warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit);
                                    if (!warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                    }
                                    UpdateStockInventoryItem(i.id_Item.Value
                                        , paramInventoryMoveAutomaticTransferDTO.id_WarehouseExit.Value
                                        , paramInventoryMoveAutomaticTransferDTO.id_WarehouseLocationExit.Value
                                        , -tempDetail.exitAmount, db);

                                    for (int j = tempDetail.InventoryMoveDetailTransfer.Count - 1; j >= 0; j--)
                                    {
                                        var detailInventoryMoveDetailTransferEntry = tempDetail.InventoryMoveDetailTransfer.ElementAt(j);
                                        detailInventoryMoveDetailTransferEntry.id_warehouseExit = tempDetail.id_warehouse;
                                        detailInventoryMoveDetailTransferEntry.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouse);
                                        detailInventoryMoveDetailTransferEntry.id_warehouseLocationExit = tempDetail.id_warehouseLocation.Value;
                                        detailInventoryMoveDetailTransferEntry.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseLocation);

                                        if (detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse != tempDetail.id_warehouseEntry)
                                        {
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouse = tempDetail.id_warehouseEntry.Value;
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == tempDetail.id_warehouseEntry);
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.id_warehouseLocation = null;
                                            detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1.WarehouseLocation = null;
                                            db.Entry(detailInventoryMoveDetailTransferEntry.InventoryMoveDetail1).State = EntityState.Modified;
                                        }
                                        db.Entry(detailInventoryMoveDetailTransferEntry).State = EntityState.Modified;
                                    }
                                }
                            }

                            #endregion Details
                        }
                    }

                    result = UpdateInventaryMoveAutomaticTransferEntry(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMove, db, reverse, paramInventoryMoveAutomaticTransferDTO, null);
                }


                result.inventoryMoveAux = result.inventoryMove;
                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                result.inventoryMoveAux = result.inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                throw e;
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveAutomaticTransferEntry(bool approve
            , User ActiveUser, Company ActiveCompany
            , EmissionPoint ActiveEmissionPoint, InventoryMove paramInventoryMove
            , DBContext db, bool reverse
            , AutomaticTransferDTO automaticTransferDto
            , InventoryMove inventoryMoveToReverse = null
            , decimal priceLbs = 0)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = "" };
            InventoryMove inventoryMove = null;

            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    var id_inventaryMoveTransferAutomaticEntry = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("156"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntry);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouseEntry);

                    if (inventoryMove == null)
                    {
                        Document document = db.Document.FirstOrDefault(fod => fod.id == id_inventaryMoveTransferAutomaticEntry);
                        if (document == null)
                        {
                            #region Document

                            document = new Document();

                            DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "155" : "156")); document.DocumentType = documentType;
                            document.id_documentType = documentType.id;

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            document.DocumentState = documentState;
                            document.id_documentState = documentState.id;

                            document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                            document.id_emissionPoint = ActiveEmissionPoint.id;

                            document.id_userCreate = ActiveUser.id;
                            document.dateCreate = DateTime.Now;
                            document.id_userUpdate = ActiveUser.id;
                            document.dateUpdate = DateTime.Now;

                            document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                            document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                            document.emissionDate = paramInventoryMove.Document.emissionDate.AddSeconds(2); ;

                            if (documentType != null)
                            {
                                documentType.currentNumber = documentType.currentNumber + 1;
                                db.DocumentType.Attach(documentType);
                                db.Entry(documentType).State = EntityState.Modified;
                            }

                            document.description = paramInventoryMove.Document.description;

                            UpdateDocumentSource(document, paramInventoryMove.Document, db);

                            #endregion Document
                        }
                        else
                        {
                            #region Document

                            DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                            document.DocumentState = documentState;
                            document.id_documentState = documentState.id;

                            document.id_userUpdate = ActiveUser.id;
                            document.dateUpdate = DateTime.Now;

                            document.emissionDate = paramInventoryMove.Document.emissionDate;

                            var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == document.id && fod.id_documentOrigin == paramInventoryMove.id);
                            if (documentSourceAux == null)
                            {
                                UpdateDocumentSource(document, paramInventoryMove.Document, db);
                            }

                            #endregion Document
                        }

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = db.InventoryReason.FirstOrDefault(r => r.id == automaticTransferDto.id_InventoryReasonEntry);
                        if (inventoryReason == null)
                        {
                            throw new Exception("No puede Guardarse el Ingreso Por Transferencia Automática debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Por Recepción Placa con código(IPTAPRP), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                        }
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = inventoryReason.id;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseEntry,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocationEntry,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouseEntry;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramInventoryMove.idWarehouseEntry);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new Exception("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new Exception("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new Exception("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailAutomatic(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                           i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenterEntry, i.id_subCostCenterEntry,
                                                                                           false, null, null, null, i.id_productionCart);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        var cartName = tempDetail.ProductionCart == null ? "" : ", perteneciente al Carro: " + tempDetail.ProductionCart.name;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber + cartName);
                                    }
                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                                if (i.InventoryMoveDetailTransfer1 != null && i.InventoryMoveDetailTransfer1.Count() > 0)
                                {
                                    foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                                    {
                                        var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                        var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                        decimal amountPurAux = 0;
                                        factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                    fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                        if (factorConversion == 0)
                                        {
                                            throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                        }
                                        else
                                        {
                                            amountPurAux = amountMoveAux * factorConversion;
                                        }

                                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                        {
                                            id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                            InventoryMoveDetail = inventoryMoveDetailAux,
                                            id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                            InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                            id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                            id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                            id_inventoryMoveDetailEntry = tempDetail.id,
                                            InventoryMoveDetail1 = tempDetail,
                                            quantity = amountPurAux
                                        };
                                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                    }
                                }
                                else
                                {
                                    var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                    {
                                        id_inventoryMoveDetailExit = i.id,
                                        InventoryMoveDetail = i,
                                        id_inventoryMoveExit = paramInventoryMove.id,
                                        InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id),
                                        id_warehouseExit = i.id_warehouse,
                                        Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouse),
                                        id_warehouseLocationExit = i.id_warehouseLocation.Value,
                                        WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.id_warehouseLocation),
                                        id_inventoryMoveDetailEntry = tempDetail.id,
                                        InventoryMoveDetail1 = tempDetail,
                                        quantity = amountMoveAux
                                    };
                                    tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                    newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                }
                            }

                            #endregion Details
                        }

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                        db.Entry(inventoryMove).State = EntityState.Added;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;

                        var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == paramInventoryMove.id);
                        if (documentSourceAux == null)
                        {
                            UpdateDocumentSource(inventoryMove.Document, paramInventoryMove.Document, db);
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = db.Employee.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        if (approve)
                        {
                            #region Details

                            for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                            {
                                var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);

                                for (int j = detail.InventoryMoveDetailTransfer1.Count - 1; j >= 0; j--)
                                {
                                    var detailInventoryMoveDetailTransferExit = detail.InventoryMoveDetailTransfer1.ElementAt(j);
                                    detail.InventoryMoveDetailTransfer1.Remove(detailInventoryMoveDetailTransferExit);
                                    db.InventoryMoveDetailTransfer.Remove(detailInventoryMoveDetailTransferExit);
                                    db.Entry(detailInventoryMoveDetailTransferExit).State = EntityState.Deleted;
                                }
                                #region Optimiza Codigo
                                //ValidateInventoryMoveDetailToRemove(db, detail);
                                #endregion
                                inventoryMove.InventoryMoveDetail.Remove(detail);
                                db.Entry(detail).State = EntityState.Deleted;
                            }

                            var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                            foreach (var i in itemDetail)
                            {
                                if (i.id_warehouseLocationEntry == 0 || i.id_warehouseLocationEntry == null)
                                {
                                    throw new Exception("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                                }

                                foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                    var warehouseExit = db.Warehouse.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                    var warehouseLocationExit = db.WarehouseLocation.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                    if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                    {
                                        throw new Exception("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                    if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                    {
                                        throw new Exception("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                            " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                    };
                                }

                                var secondsOver = 0;
                                if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                                if (i.amountMove == 0) continue;

                                InventoryMoveDetail lastInventoryMove = null;

                                decimal amountMoveAux = i.amountMove.Value;
                                decimal amountInvAux = 0;

                                decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                                decimal unitPriceInvAux = 0;

                                var metricUnitMovAux = db.MetricUnit.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                                int id_metricUnitMovAux = metricUnitMovAux.id;
                                int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                                var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountInvAux = amountMoveAux * factorConversion;
                                    unitPriceInvAux = unitPriceMoveAux * factorConversion;
                                }

                                InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailAutomatic(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouseEntry.Value,
                                                                                           i.id_warehouseLocationEntry.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.InventoryMoveDetailTransfer.FirstOrDefault()?.id_inventoryMoveDetailEntry ?? 0,
                                                                                           i.id_costCenter, i.id_subCostCenter, false, null, null, null, i.id_productionCart);

                                if (approve)
                                {
                                    var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                                                                i.id_item,
                                                                                i.id_warehouseEntry,
                                                                                i.id_warehouseLocationEntry,
                                                                                i.id_lot,
                                                                                db,
                                                                                i.id_productionCart);
                                    var warehouseEntryAux = db.Warehouse.FirstOrDefault(fod => fod.id == i.id_warehouseEntry);
                                    if (!warehouseEntryAux.allowsNegativeBalances && remainingBalance < 0)
                                    {
                                        var action = reverse ? "Reversarse" : "Aprobarse";
                                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                        throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                    }

                                    UpdateStockInventoryItem(i.id_item, i.id_warehouseEntry, i.id_warehouseLocationEntry, i.exitAmount, db);
                                }

                                foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                                {
                                    var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                    var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                    decimal amountPurAux = 0;
                                    factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                                fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                    if (factorConversion == 0)
                                    {
                                        throw new Exception("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida del detalle Origen Configúrelo, e intente de nuevo");
                                    }
                                    else
                                    {
                                        amountPurAux = amountMoveAux * factorConversion;
                                    }
                                    detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                    db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                                }
                            }

                            #endregion Details
                        }

                        //db.InventoryMove.Attach(inventoryMove);
                        //db.Entry(inventoryMove).State = EntityState.Modified;
                    }
                }

                int batchSize = 50; // Tamaño del lote
                int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                int index = 0;

                using (var transaction = db.Database.BeginTransaction())
                {
                    try
                    {
                        while (index <= totalDetalles)
                        {
                            var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList(); // Obtener un lote de detalles
                            foreach (var detalle in batchDetalles)
                            {
                                if (detalle.id == 0)
                                {
                                    db.InventoryMoveDetail.Add(detalle);
                                }

                            }

                            //Guardar los cambios en el contexto
                            db.SaveChanges();

                            index += batchSize;
                        }
                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        // Revertir la transacción en caso de error
                        //result.message = ex.Message;
                        MetodosEscrituraLogs.EscribeExcepcionLogNest(ex, getRutaLog(), "ServiceInventoryMove", "Produccion");
                        transaction.Rollback();
                        throw; // O manejar el error de otra manera
                    }


                }
                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        #endregion UpdateInventaryMove

        #region UpdateInventoryReservation

        public class InventoryMoveDetailBalancesLast
        {
            public ProductionScheduleInventoryReservationDetail productionScheduleInventoryReservationDetail { get; set; }
            public InventoryMoveDetail inventoryMoveDetail { get; set; }
            public InventoryMoveDetail inventoryMoveTransferExitDetail { get; set; }
            public InventoryMoveDetail inventoryMoveTransferEntryDetail { get; set; }
            public decimal balanceUMTP { get; set; }
            public decimal balanceDetail { get; set; }
        }

        public static decimal TruncateDecimal(decimal decimalParam)
        {
            var decimalTruncate = decimal.Truncate(decimalParam);
            if ((decimalParam - decimalTruncate) > 0)
            {
                decimalTruncate++;
            };
            return decimalTruncate;
        }

        public static void UpdateInventoryReservationDetail(User activeUser, Company activeCompany, EmissionPoint activeEmissionPoint, List<ProductionScheduleInventoryReservationDetail> productionScheduleInventoryReservationDetail, DBContext db, bool reverse)
        {
            try
            {
                List<InventoryMoveDetailBalancesLast> listInventoryMoveDetailBalancesLast = new List<InventoryMoveDetailBalancesLast>();
                foreach (var detail in productionScheduleInventoryReservationDetail)
                {
                    if (detail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.id_salesRequestDetail == null) continue;

                    if (reverse)
                    {
                        foreach (var detailInventoryReservation in detail.InventoryReservation)
                        {
                            listInventoryMoveDetailBalancesLast.Add(new InventoryMoveDetailBalancesLast
                            {
                                productionScheduleInventoryReservationDetail = detail,
                                inventoryMoveDetail = null,
                                inventoryMoveTransferExitDetail = detailInventoryReservation.InventoryMoveDetail,
                                inventoryMoveTransferEntryDetail = detailInventoryReservation.InventoryMoveDetail1,
                                balanceUMTP = detailInventoryReservation.quantity,
                                balanceDetail = detailInventoryReservation.InventoryMoveDetail.exitAmount
                            });
                        }
                    }
                    else
                    {
                        var inventoryMoveDetailBalancesLasts = db.InventoryMoveDetail.Where(w => w.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                                                                                        w.id_inventoryMoveDetailNext == null &&
                                                                                                                        w.balance > 0 &&
                                                                                                                        w.id_item == detail.ProductionScheduleRequestDetail.id_item &&
                                                                                                                        w.Warehouse.WarehouseType.code != ("RES01")).OrderBy(ob => ob.id_lot).ThenByDescending(tbd => tbd.inMaximumUnit).ToList();
                        var metricUnitUMTPAux = db.Setting.FirstOrDefault(fod => fod.code.Equals("UMTP"));
                        var id_metricUnitUMTPValueAux = int.Parse(metricUnitUMTPAux?.value ?? "0");
                        var metricUnitUMTP = db.MetricUnit.FirstOrDefault(fod => fod.id == id_metricUnitUMTPValueAux);

                        int? id_metricUnitPresentation;
                        MetricUnitConversion metricUnitConversion = null;
                        decimal factor;
                        decimal factorUpsideDown;

                        var quantityAux = detail.quantity;
                        metricUnitConversion = db.MetricUnitConversion.FirstOrDefault(muc => muc.id_company == activeCompany.id &&
                                                                                                 muc.id_metricOrigin == detail.ProductionScheduleRequestDetail.id_metricUnit &&
                                                                                                 muc.id_metricDestiny == metricUnitUMTP.id);

                        if (metricUnitUMTP.id != detail.ProductionScheduleRequestDetail.id_metricUnit && metricUnitConversion == null)
                            throw new Exception("No existe factor de conversión entre " + (detail.ProductionScheduleRequestDetail.MetricUnit.code ?? metricUnitUMTP.code) + " y " + metricUnitUMTP.code + " necesario para reservar producto en Invetario, configúrelo e intentelo de nuevo.");

                        factor = (metricUnitUMTP.id == detail.ProductionScheduleRequestDetail.id_metricUnit) ? 1 : (metricUnitConversion.factor);

                        quantityAux *= factor;

                        decimal balacesAux = 0;
                        decimal balanceUMTPAux = 0;
                        decimal balanceDetailAux = 0;

                        foreach (var inventoryMoveDetailBalancesLast in inventoryMoveDetailBalancesLasts)
                        {
                            id_metricUnitPresentation = inventoryMoveDetailBalancesLast.Item.Presentation?.id_metricUnit ?? metricUnitUMTP.id;
                            metricUnitConversion = db.MetricUnitConversion.FirstOrDefault(muc => muc.id_company == activeCompany.id &&
                                                                                                     muc.id_metricOrigin == id_metricUnitPresentation &&
                                                                                                     muc.id_metricDestiny == metricUnitUMTP.id);

                            if (metricUnitUMTP.id != id_metricUnitPresentation && metricUnitConversion == null)
                                throw new Exception("No existe factor de conversión entre " + (inventoryMoveDetailBalancesLast.Item.Presentation?.MetricUnit.code ?? metricUnitUMTP.code) + " y " + metricUnitUMTP.code + " necesario para reservar producto en Invetario, configúrelo e intentelo de nuevo.");

                            factor = (metricUnitUMTP.id == id_metricUnitPresentation) ? 1 : (metricUnitConversion.factor);

                            metricUnitConversion = db.MetricUnitConversion.FirstOrDefault(muc => muc.id_company == activeCompany.id &&
                                                                                                     muc.id_metricOrigin == metricUnitUMTP.id &&
                                                                                                     muc.id_metricDestiny == id_metricUnitPresentation);

                            if (metricUnitUMTP.id != id_metricUnitPresentation && metricUnitConversion == null)
                                throw new Exception("No existe factor de conversión entre " + metricUnitUMTP.code + " y " + (inventoryMoveDetailBalancesLast.Item.Presentation?.MetricUnit.code ?? metricUnitUMTP.code) + " necesario para reservar producto en Invetario, configúrelo e intentelo de nuevo.");

                            factorUpsideDown = (metricUnitUMTP.id == id_metricUnitPresentation) ? 1 : (metricUnitConversion.factor);

                            if (inventoryMoveDetailBalancesLast.inMaximumUnit)
                            {
                                balacesAux = (inventoryMoveDetailBalancesLast.balance *
                                              (inventoryMoveDetailBalancesLast.Item.Presentation?.maximum ?? 1) *
                                              (inventoryMoveDetailBalancesLast.Item.Presentation?.minimum ?? 1) *
                                              factor);
                            }
                            else
                            {
                                balacesAux = (inventoryMoveDetailBalancesLast.balance *
                                              (inventoryMoveDetailBalancesLast.Item.Presentation?.minimum ?? 1) *
                                              factor);
                            }

                            if (balacesAux >= quantityAux)
                            {
                                if (inventoryMoveDetailBalancesLast.inMaximumUnit)
                                {
                                    balanceDetailAux = ((quantityAux * factorUpsideDown) /
                                                      (inventoryMoveDetailBalancesLast.Item.Presentation?.minimum ?? 1)) /
                                                     (inventoryMoveDetailBalancesLast.Item.Presentation?.maximum ?? 1);
                                    balanceDetailAux = TruncateDecimal(balanceDetailAux);

                                    balanceUMTPAux = (balanceDetailAux *
                                             (inventoryMoveDetailBalancesLast.Item.Presentation?.maximum ?? 1) *
                                             (inventoryMoveDetailBalancesLast.Item.Presentation?.minimum ?? 1) *
                                             factor);
                                }
                                else
                                {
                                    balanceDetailAux = ((quantityAux * factorUpsideDown) /
                                                      (inventoryMoveDetailBalancesLast.Item.Presentation?.minimum ?? 1));
                                    balanceDetailAux = TruncateDecimal(balanceDetailAux);

                                    balanceUMTPAux = (balanceDetailAux *
                                                  (inventoryMoveDetailBalancesLast.Item.Presentation?.minimum ?? 1) *
                                                  factor);
                                }

                                listInventoryMoveDetailBalancesLast.Add(new InventoryMoveDetailBalancesLast
                                {
                                    productionScheduleInventoryReservationDetail = detail,
                                    inventoryMoveDetail = inventoryMoveDetailBalancesLast,
                                    inventoryMoveTransferExitDetail = null,
                                    inventoryMoveTransferEntryDetail = null,
                                    balanceUMTP = balanceUMTPAux,
                                    balanceDetail = balanceDetailAux
                                });
                                break;
                            }
                            else
                            {
                                listInventoryMoveDetailBalancesLast.Add(new InventoryMoveDetailBalancesLast
                                {
                                    productionScheduleInventoryReservationDetail = detail,
                                    inventoryMoveDetail = inventoryMoveDetailBalancesLast,
                                    inventoryMoveTransferExitDetail = null,
                                    inventoryMoveTransferEntryDetail = null,
                                    balanceUMTP = balacesAux,
                                    balanceDetail = inventoryMoveDetailBalancesLast.balance
                                });
                            }
                        }
                    }
                }
                if (listInventoryMoveDetailBalancesLast.Count() > 0)
                {
                    UpdateInventoryReservationTransfer(activeUser, activeCompany, activeEmissionPoint, listInventoryMoveDetailBalancesLast, db, reverse);
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public static void UpdateInventoryReservationTransfer(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, List<InventoryMoveDetailBalancesLast> inventoryMoveDetailBalancesLast, DBContext db, bool reverse)
        {
            try
            {
                var inventoryMoveDetailBalancesLastAux = inventoryMoveDetailBalancesLast;
                if (reverse)
                {
                    UpdateInventoryMoveTransferEntryDetail(ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveDetailBalancesLastAux, db, reverse, reverse ? inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferEntryDetail.InventoryMove : null);
                    UpdateInventoryMoveTransferExitDetail(ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveDetailBalancesLastAux, db, reverse, reverse ? inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferExitDetail.InventoryMove : null);

                    foreach (var detail in inventoryMoveDetailBalancesLastAux)
                    {
                        for (int j = detail.productionScheduleInventoryReservationDetail.InventoryReservation.Count - 1; j >= 0; j--)
                        {
                            var detailInventoryReservation = detail.productionScheduleInventoryReservationDetail.InventoryReservation.ElementAt(j);
                            detailInventoryReservation.id_salesQuotationDetail = null;
                            detailInventoryReservation.SalesQuotationDetail = null;
                            detailInventoryReservation.id_salesRequestDetail = null;
                            detailInventoryReservation.SalesRequestDetail = null;
                            detailInventoryReservation.id_productionScheduleInventoryReservationDetail = null;
                            detailInventoryReservation.ProductionScheduleInventoryReservationDetail = null;

                            db.InventoryReservation.Attach(detailInventoryReservation);
                            db.Entry(detailInventoryReservation).State = EntityState.Modified;
                        }
                    }
                }
                else
                {
                    inventoryMoveDetailBalancesLastAux = UpdateInventoryMoveTransferExitDetail(ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveDetailBalancesLast, db, reverse, reverse ? inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferExitDetail.InventoryMove : null);
                    inventoryMoveDetailBalancesLastAux = UpdateInventoryMoveTransferEntryDetail(ActiveUser, ActiveCompany, ActiveEmissionPoint, inventoryMoveDetailBalancesLastAux, db, reverse, reverse ? inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferEntryDetail.InventoryMove : null);
                    foreach (var detail in inventoryMoveDetailBalancesLastAux)
                    {
                        db.InventoryReservation.Add(new InventoryReservation
                        {
                            id_salesQuotation = detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.SalesRequestDetail.SalesRequestDetailSalesQuotation?.FirstOrDefault()?.id_salesQuotation,
                            SalesQuotation = detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.SalesRequestDetail.SalesRequestDetailSalesQuotation?.FirstOrDefault()?.SalesQuotation,
                            id_salesQuotationDetail = detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.SalesRequestDetail.SalesRequestDetailSalesQuotation?.FirstOrDefault()?.id_salesQuotationDetail,
                            SalesQuotationDetail = detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.SalesRequestDetail.SalesRequestDetailSalesQuotation?.FirstOrDefault()?.SalesQuotationDetail,
                            id_salesRequest = (detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.id_salesRequest).Value,
                            SalesRequest = detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.SalesRequest,
                            id_salesRequestDetail = detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.id_salesRequestDetail,
                            SalesRequestDetail = detail.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail?.FirstOrDefault()?.SalesRequestDetail,
                            id_productionScheduleInventoryReservationDetail = detail.productionScheduleInventoryReservationDetail.id,
                            ProductionScheduleInventoryReservationDetail = detail.productionScheduleInventoryReservationDetail,
                            id_productionSchedule = detail.productionScheduleInventoryReservationDetail.id_productionSchedule,
                            ProductionSchedule = detail.productionScheduleInventoryReservationDetail.ProductionSchedule,
                            id_inventoryMoveTransferExitDetail = detail.inventoryMoveTransferExitDetail.id,
                            InventoryMoveDetail = detail.inventoryMoveTransferExitDetail,
                            id_inventoryMoveTransferEntryDetail = detail.inventoryMoveTransferEntryDetail.id,
                            InventoryMoveDetail1 = detail.inventoryMoveTransferEntryDetail,
                            quantity = detail.balanceUMTP,
                        });
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public static List<InventoryMoveDetailBalancesLast> UpdateInventoryMoveTransferExitDetail(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, List<InventoryMoveDetailBalancesLast> inventoryMoveDetailBalancesLast, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            List<InventoryMoveDetailBalancesLast> result = new List<InventoryMoveDetailBalancesLast>();
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                var productionSchedule = inventoryMoveDetailBalancesLast.FirstOrDefault().productionScheduleInventoryReservationDetail.ProductionSchedule;
                document.emissionDate = productionSchedule.Document.emissionDate;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                if (!reverse) UpdateDocumentSource(document, productionSchedule.Document, db);
                else UpdateDocumentSource(document, inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferExitDetail.InventoryMove.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;
                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IREPTAPR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse el egreso por transferencia automática de la reserva de inventario debido a que no existe el Motivo de Inventario del Sistema, Ingreso Reverso Egreso Por Transferencia Automática Por Reservación con código(IREPTAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferExitDetail.id_warehouse,
                        id_warehouseLocationEntry = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferExitDetail.id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                else
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EPTAPR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse el egreso por transferencia automática de la reserva de inventario debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Por Reservación con código(EPTAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveDetail.id_warehouse,
                        id_warehouseLocationExit = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveDetail.id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                foreach (var i in inventoryMoveDetailBalancesLast)
                {
                    var secondsOver = 0;
                    var inventoryMoveDetailAux = reverse ? i.inventoryMoveTransferExitDetail : i.inventoryMoveDetail;

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == inventoryMoveDetailAux.id_lot &&
                                                     d.id_item == inventoryMoveDetailAux.id_item &&
                                                     d.id_warehouse == inventoryMoveDetailAux.id_warehouse &&
                                                     d.id_warehouseLocation == inventoryMoveDetailAux.id_warehouseLocation &&
                                                     !d.inMaximumUnit).ToList();

                    foreach (var inventoryMoveDetail in inventoryMove.InventoryMoveDetail)
                    {
                        if (inventoryMoveDetail.id_lot == inventoryMoveDetailAux.id_lot &&
                                                     inventoryMoveDetail.id_item == inventoryMoveDetailAux.id_item &&
                                                     inventoryMoveDetail.id_warehouse == inventoryMoveDetailAux.id_warehouse &&
                                                     inventoryMoveDetail.id_warehouseLocation == inventoryMoveDetailAux.id_warehouseLocation &&
                                                     !inventoryMoveDetail.inMaximumUnit)
                        {
                            secondsOver++;
                        }
                    }

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionSchedule.Document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.balanceDetail;
                    decimal amountInvAux = i.balanceDetail;

                    decimal unitPriceMoveAux = !reverse ? inventoryMoveDetailAux.averagePrice : inventoryMoveDetailAux.unitPrice;
                    decimal unitPriceInvAux = !reverse ? inventoryMoveDetailAux.averagePrice : inventoryMoveDetailAux.unitPrice;
                    var action = reverse ? "Reversarse" : "Aprobarse";
                    var warehouseEntry = db.Warehouse.FirstOrDefault(fod => fod.WarehouseType.code == ("RES01"));
                    if (warehouseEntry == null)
                    {
                        throw new Exception("No puede " + action + " el egreso por transferencia automática de la reserva de inventario debido a que no existe una bodega de Reservación que se espera que el código del tipo de bodega asignado sea (RES01) en el Sistema, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, inventoryMoveDetailAux.id_item, inventoryMoveDetailAux.id_lot, inventoryMoveDetailAux.id_metricUnit, inventoryMoveDetailAux.id_metricUnit, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, inventoryMoveDetailAux.id_warehouse,
                                                                               inventoryMoveDetailAux.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, warehouseEntry.id, null, secondsOver);
                    if (!inventoryMoveDetailAux.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                        throw new Exception("No puede " + action + " el egreso por transferencia automática de la reserva de inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                    }

                    result.Add(new InventoryMoveDetailBalancesLast
                    {
                        productionScheduleInventoryReservationDetail = i.productionScheduleInventoryReservationDetail,
                        inventoryMoveDetail = i.inventoryMoveDetail,
                        inventoryMoveTransferExitDetail = tempDetail,
                        inventoryMoveTransferEntryDetail = null,
                        balanceUMTP = i.balanceUMTP,
                        balanceDetail = i.balanceDetail
                    });
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static List<InventoryMoveDetailBalancesLast> UpdateInventoryMoveTransferEntryDetail(User ActiveUser, Company ActiveCompany, EmissionPoint ActiveEmissionPoint, List<InventoryMoveDetailBalancesLast> inventoryMoveDetailBalancesLast, DBContext db, bool reverse, InventoryMove inventoryMoveToReverse = null)
        {
            List<InventoryMoveDetailBalancesLast> result = new List<InventoryMoveDetailBalancesLast>();
            try
            {
                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true);
                }

                #endregion Validar Fecha emision de Reversión

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                document.id_userCreate = ActiveUser.id;
                document.dateCreate = DateTime.Now;
                document.id_userUpdate = ActiveUser.id;
                document.dateUpdate = DateTime.Now;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                var productionSchedule = inventoryMoveDetailBalancesLast.FirstOrDefault().productionScheduleInventoryReservationDetail.ProductionSchedule;
                document.emissionDate = productionSchedule.Document.emissionDate;

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                if (!reverse) UpdateDocumentSource(document, productionSchedule.Document, db);
                else UpdateDocumentSource(document, inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferEntryDetail.InventoryMove.Document, db);

                #endregion Document

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                if (reverse)
                {
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("ERIPTAPR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Reversarse el ingreso por transferencia automática de la reserva de inventario debido a que no existe el Motivo de Inventario del Sistema, Egreso Reverso Ingreso Por Transferencia Automática Por Reservación con código(ERIPTAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryExitMove = new InventoryExitMove
                    {
                        id_warehouseExit = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferEntryDetail.id_warehouse,
                        id_warehouseLocationExit = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveTransferEntryDetail.id_warehouseLocation,
                        id_dispatcher = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateExit = DateTime.Now
                    };
                }
                else
                {
                    result = inventoryMoveDetailBalancesLast;
                    var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IPTAPR"));
                    if (inventoryReason == null)
                    {
                        throw new Exception("No puede Aprobarse el ingreso por transferencia automática de la reserva de inventario debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Por Reservación con código(IPTAPR), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    inventoryMove.InventoryReason = inventoryReason;
                    inventoryMove.id_inventoryReason = inventoryReason.id;

                    inventoryMove.InventoryEntryMove = new InventoryEntryMove
                    {
                        id_warehouseEntry = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveDetail.id_warehouse,
                        id_warehouseLocationEntry = inventoryMoveDetailBalancesLast.FirstOrDefault().inventoryMoveDetail.id_warehouseLocation,
                        id_receiver = ActiveUser.id_employee ?? 0,
                        Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                        dateEntry = DateTime.Now
                    };
                }
                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                foreach (var i in inventoryMoveDetailBalancesLast)
                {
                    var secondsOver = 0;
                    var inventoryMoveDetailAux = reverse ? i.inventoryMoveTransferEntryDetail : i.inventoryMoveDetail;

                    var action = reverse ? "Reversarse" : "Aprobarse";
                    var warehouseEntry = i.inventoryMoveTransferExitDetail.Warehouse1;
                    if (warehouseEntry == null)
                    {
                        throw new Exception("No puede " + action + " el ingreso por transferencia automática de la reserva de inventario debido a que no existe una bodega de Reservación que se espera que el código del tipo de bodega asignado sea (RES01) en el Sistema, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    int? id_customer = i.productionScheduleInventoryReservationDetail.ProductionScheduleRequestDetail.SalesRequestOrQuotationDetailProductionScheduleRequestDetail.FirstOrDefault().SalesRequest.id_customer;
                    if (id_customer == null)
                    {
                        throw new Exception("No puede " + action + " el ingreso por transferencia automática de la reserva de inventario debido a que no existe el cliente en el requrimiento de pedido asociado a esta Programación en el Sistema, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                    }
                    var warehouseLocationEntry = ServiceWarehouseLocation.GetWarehouseLocationPerson(db, ActiveUser, ActiveCompany, warehouseEntry, id_customer.Value, "CLI");

                    var id_warehouseAux = reverse ? i.inventoryMoveTransferEntryDetail.id_warehouse : warehouseEntry.id;
                    var id_warehouseLocationAux = reverse ? i.inventoryMoveTransferEntryDetail.id_warehouseLocation : warehouseLocationEntry.id;

                    List<InventoryMoveDetail> lastsMoveDetails =
                        db.InventoryMoveDetail.Where(d =>
                                                     d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                     d.id_lot == inventoryMoveDetailAux.id_lot &&
                                                     d.id_item == inventoryMoveDetailAux.id_item &&
                                                     d.id_warehouse == id_warehouseAux &&
                                                     d.id_warehouseLocation == id_warehouseLocationAux &&
                                                     !d.inMaximumUnit).ToList();

                    foreach (var inventoryMoveDetail in inventoryMove.InventoryMoveDetail)
                    {
                        if (inventoryMoveDetail.id_lot == inventoryMoveDetailAux.id_lot &&
                                                     inventoryMoveDetail.id_item == inventoryMoveDetailAux.id_item &&
                                                     inventoryMoveDetail.id_warehouse == id_warehouseAux &&
                                                     inventoryMoveDetail.id_warehouseLocation == id_warehouseLocationAux &&
                                                     !inventoryMoveDetail.inMaximumUnit)
                        {
                            secondsOver++;
                        }
                    }

                    lastsMoveDetails = lastsMoveDetails.Where(w => DateTime.Compare(productionSchedule.Document.emissionDate, w.InventoryMove.Document.emissionDate) >= 0).OrderByDescending(d => d.InventoryMove.Document.emissionDate).ThenByDescending(d => d.dateCreate).ToList();

                    InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                            ? lastsMoveDetails.First()
                                                            : null;

                    decimal amountMoveAux = i.balanceDetail;
                    decimal amountInvAux = i.balanceDetail;

                    decimal unitPriceMoveAux = !reverse ? inventoryMoveDetailAux.averagePrice : inventoryMoveDetailAux.unitPrice;
                    decimal unitPriceInvAux = !reverse ? inventoryMoveDetailAux.averagePrice : inventoryMoveDetailAux.unitPrice;

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, inventoryMoveDetailAux.id_item, inventoryMoveDetailAux.id_lot, inventoryMoveDetailAux.id_metricUnit, inventoryMoveDetailAux.id_metricUnit, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, id_warehouseAux,
                                                                               id_warehouseLocationAux.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver);
                    if (!tempDetail.Warehouse.allowsNegativeBalances && tempDetail.balance < 0)
                    {
                        var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                        throw new Exception("No puede " + action + " el ingreso por transferencia automática de la reserva de inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                    }

                    if (!reverse)
                    {
                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = i.inventoryMoveTransferExitDetail.id,
                            InventoryMoveDetail = i.inventoryMoveTransferExitDetail,
                            id_inventoryMoveExit = i.inventoryMoveTransferExitDetail.id_inventoryMove,
                            InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == i.inventoryMoveTransferExitDetail.id_inventoryMove),
                            id_warehouseExit = i.inventoryMoveTransferExitDetail.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == i.inventoryMoveTransferExitDetail.id_warehouse),
                            id_warehouseLocationExit = i.inventoryMoveTransferExitDetail.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == i.inventoryMoveTransferExitDetail.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = i.balanceDetail
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        #endregion UpdateInventoryReservation

        #region Auxiliar

        public static List<ResultMastered> GetSaldoMastered(DBContext db, int companyId, int? id_boxedWarehouse, int? id_boxedWarehouseLocation, DateTime emissionDate)
        {
            var resultItemsLotSaldo = ServiceInventoryBalance.ValidateBalanceGeneral(new InvParameterBalanceGeneral
            {
                requiresLot = null,
                id_Warehouse = id_boxedWarehouse,
                id_WarehouseLocation = id_boxedWarehouseLocation,
                id_Item = null,
                id_ProductionLot = null,
                lotMarket = null,
                id_productionCart = null,
                cut_Date = emissionDate.Date,
                id_company = companyId,
                consolidado = true,
                groupby = ServiceInventoryGroupBy.GROUPBY_ITEM_LOTE,
                idItemList = null

            }, modelSaldoProductlote: true);
            var saldos = resultItemsLotSaldo.Item2;

            int[] items = saldos
                            .GroupBy(r => r.id_item)
                            .Select(r => r.Key)
                            .ToArray();

            var itemData = db.Item
                                .Where(r => items.Contains(r.id))
                                .Select(r => new {
                                    itemId = r.id,
                                    r.id_itemType,
                                    r.name,
                                    r.masterCode,
                                    r.id_presentation,
                                    r.id_inventoryLine,
                                }).ToArray();

            var itemGeneral = db.ItemGeneral
                                       .Where(r => items.Contains(r.id_item))
                                       .Select(r => new
                                       {
                                           r.id_item,
                                           r.id_size,
                                           r.id_trademark,

                                       })
                                       .ToArray();


            return (from item in items
                    join saldo in saldos
                    on item equals saldo.id_item
                    join itData in itemData
                    on item equals itData.itemId
                    join itGeneral in itemGeneral
                    on item equals itGeneral.id_item
                    where saldo.saldo > 0
                    select new ResultMastered
                    {
                        id = $"{item}:{(saldo.id_lote?.ToString() ?? "")}",
                        code = itData.masterCode,
                        name = itData.name,
                        noLote = (saldo.internalNumber ?? "Sin Lote"),
                        saldoStr = (saldo.saldo.ToString("0.00")),
                        id_item = item,
                        id_size = itGeneral.id_size,
                        id_itemType = itData.id_itemType,
                        id_trademark = itGeneral.id_trademark,
                        id_presentationMP = itData.id_presentation,
                        id_lote = (saldo.id_lote ?? 0),
                        saldo = saldo.saldo
                    })
                    .ToList();

        }
        public static SaldoProductoLote[] GetRemainingBalanceBulk(int activeCompanyId,
                                                                    int? id_warehouse,
                                                                    SaldoProductoLote[] parameters,
                                                                    DBContext db,
                                                                    string lotMarked = null,
                                                                    DateTime? fechaCorte = null,
                                                                    int[] inventotyMoveDetailIds = null,
                                                                    SqlConnection connection = null,
                                                                    IDbTransaction transaction = null,
                                                                    bool withNegatives = false
                                                                    )
        {

            var lotMarkedPar = db.Setting.FirstOrDefault(fod => fod.code == "LMMASTER")?.value ?? "NO";
            lotMarked = lotMarked != null ? lotMarked : null;
            fechaCorte = fechaCorte ?? DateTime.Now.Date;

            string itemsList = parameters.GroupBy(r => r.id_item).Select(r => r.Key.ToString()).Aggregate((i, j) => $"{i}|{j}");
            string inventotyMoveDetailIdsSer = null;

            if ((inventotyMoveDetailIds?.Length ?? 0) > 0)
            {
                inventotyMoveDetailIdsSer = inventotyMoveDetailIds.GroupBy(r => r).Select(r => r.Key.ToString()).Aggregate((i, j) => $"{i}|{j}");
            }

            var resultItemsLotSaldo = ServiceInventoryBalance.ValidateBalanceGeneral(new InvParameterBalanceGeneral
            {
                requiresLot = null,
                id_Warehouse = id_warehouse,
                id_WarehouseLocation = null,
                id_Item = null,
                id_ProductionLot = null,
                lotMarket = null,
                id_productionCart = null,
                cut_Date = fechaCorte,
                id_company = activeCompanyId,
                consolidado = true,
                groupby = ServiceInventoryGroupBy.GROUPBY_BODEGA_UBICA_LOTE_ITEM,
                idItemList = itemsList,
                idInventoryDetails = inventotyMoveDetailIdsSer

            }, modelSaldoProductlote: true, connection: connection, transaction: transaction, withNegatives: withNegatives);

            var saldos = resultItemsLotSaldo.Item2;

            var result = (from saldo in saldos
                          join param in parameters
                                            .GroupBy(r => new
                                            {
                                                warhlocgrp = r.id_warehouseLocation,
                                                lotgrp = r.id_lote,
                                                itgrp = r.id_item
                                            })
                          on new { warhloc = saldo.id_warehouseLocation, lot = saldo.id_lote, it = saldo.id_item }
                          equals new { warhloc = param.Key.warhlocgrp, lot = param.Key.lotgrp, it = param.Key.itgrp }
                          select new
                          {
                              id_item = saldo.id_item,
                              saldo = saldo.saldo,
                              id_WarehouseLocation = saldo.id_warehouseLocation,
                              id_ProdutionLot = saldo.id_lote
                          })
                          .GroupBy(r => new { ubicacion = r.id_WarehouseLocation, lote = r.id_ProdutionLot, item = r.id_item })
                          .Select(r => new SaldoProductoLote
                          {
                              id_warehouseLocation = r.Key.ubicacion,
                              id_lote = r.Key.lote,
                              id_item = r.Key.item,
                              saldo = r.Sum(t => t.saldo)
                          })
                           .ToArray();

            return result;
        }

        public static decimal GetRemainingBalance(int activeCompanyId,
                                                    int? id_item,
                                                    int? id_warehouse,
                                                    int? id_warehouseLocation,
                                                    int? id_lot,
                                                    DBContext db,
                                                    int? id_productionCart = null,
                                                    string lotMarked = null,
                                                    DateTime? fechaCorte = null,
                                                    bool? requiereLot = null)
        {


            var lotMarkedPar = db.Setting.FirstOrDefault(fod => fod.code == "LMMASTER")?.value ?? "NO";
            lotMarked = lotMarked != null ? lotMarked : null;
            var codigosEstados = new[] { "03", "16" };
            fechaCorte = fechaCorte ?? DateTime.Now.Date;

            var resultItemsLotSaldo = ServiceInventoryBalance.ValidateBalanceGeneral(new InvParameterBalanceGeneral
            {
                requiresLot = requiereLot,
                id_Warehouse = id_warehouse,
                id_WarehouseLocation = id_warehouseLocation,
                id_Item = id_item,
                id_ProductionLot = id_lot,
                lotMarket = lotMarked,
                id_productionCart = id_productionCart,
                cut_Date = fechaCorte,
                id_company = activeCompanyId,
                consolidado = true,
                groupby = ServiceInventoryGroupBy.GROUPBY_ITEM

            }, modelSaldoProductlote: true);
            var saldos = resultItemsLotSaldo.Item2;

            //var inventoryMoveDetailAux = lotMarkedPar == "SI" ?
            //    db.InventoryMoveDetail.Where(w => w.id_warehouse == id_warehouse &&
            //        w.id_warehouseLocation == id_warehouseLocation &&
            //        w.id_item == id_item &&
            //        codigosEstados.Contains(w.InventoryMove.Document.DocumentState.code) &&
            //        w.id_lot == (id_lot == 0 ? null : id_lot) &&
            //        w.lotMarked == lotMarked &&
            //        w.id_productionCart == (id_productionCart == null ? w.id_productionCart : id_productionCart)).ToList() :
            //    db.InventoryMoveDetail.Where(w => w.id_warehouse == id_warehouse &&
            //        w.id_warehouseLocation == id_warehouseLocation &&
            //        w.id_item == id_item &&
            //        codigosEstados.Contains(w.InventoryMove.Document.DocumentState.code) &&
            //        w.id_lot == (id_lot == 0 ? null : id_lot) &&
            //        w.id_productionCart == (id_productionCart == null ? w.id_productionCart : id_productionCart)).ToList();

            //decimal remainingBalance = inventoryMoveDetailAux.Count() > 0 ? inventoryMoveDetailAux.Sum(s => s.entryAmount - s.exitAmount) : 0;
            decimal remainingBalance = (saldos?.Sum(r => r.saldo) ?? 0);
            return remainingBalance;
        }

        public static Item[] GetItemsWithBalance(DBContext db,
                                                    int companyId,
                                                    int id_warehouse,
                                                    int? id_warehouseLocation,
                                                    bool requiresLot,
                                                    DateTime fechaCorte,
                                                    int? currentItemId)
        {
            var resultItemsWithBalance = ServiceInventoryBalance.ValidateBalanceGeneral(new InvParameterBalanceGeneral
            {
                requiresLot = requiresLot,
                id_Warehouse = id_warehouse,
                id_WarehouseLocation = id_warehouseLocation,
                id_Item = null,
                id_ProductionLot = null,
                lotMarket = null,
                id_productionCart = null,
                cut_Date = fechaCorte,
                id_company = companyId,
                consolidado = true,
                groupby = ServiceInventoryGroupBy.GROUPBY_ITEM

            }, modelSaldoProductlote: true);
            var items = resultItemsWithBalance.Item2;

            List<int> itemsIds = items
                                    .Where(r => r.saldo > 0)
                                    .Select(r => r.id_item)
                                    .ToList();


            if (currentItemId.HasValue && !itemsIds.Contains(currentItemId.Value))
            {
                itemsIds.Add(currentItemId.Value);

            }

            var preResult = db.Item
                             .Where(r => itemsIds.Contains(r.id))
                             .ToList();

            var result = preResult
                             .Select(r => new Item
                             {
                                 id = r.id,
                                 masterCode = r.masterCode,
                                 name = r.name
                             })
                             .ToArray();

            return result;
        }
        #region #region  RA  | Optimizacion Fx Inventario - 007
        public static List<ItemInvMoveDetail> GetLastMoveDetailBulk(ParamForQueryInvMoveDetail _paramInvDetail)
        {
            List<ParamSQL> lstParametersSql = new List<ParamSQL>();
            List<ItemInvMoveDetail> lstResult = new List<ItemInvMoveDetail>();

            #region VARIABLES

            ParamSQL _param = new ParamSQL();
            _param.Nombre = "@str_item_inf";
            _param.TipoDato = DbType.String;
            _param.Valor = _paramInvDetail.str_item;
            lstParametersSql.Add(_param);

            _param = new ParamSQL();
            _param.Nombre = "@dt_emissionDate";
            _param.TipoDato = DbType.String;
            _param.Valor = DateTime.Parse(_paramInvDetail.emissiondate).ToIsoDateFormat();
            lstParametersSql.Add(_param);

            _param = new ParamSQL();
            _param.Nombre = "@dt_houremissionDate";
            _param.TipoDato = DbType.String;
            _param.Valor = _paramInvDetail.houremissiondate;
            lstParametersSql.Add(_param);

            #endregion VARIABLES

            string _cadenaConexion = ConfigurationManager.ConnectionStrings["DBContextNE"].ConnectionString;
            string _rutaLog = (string)ConfigurationManager.AppSettings["rutaLog"];
            DataSet ds = AccesoDatos.MSSQL.MetodosDatos2.ObtieneDatos(_cadenaConexion
                                                , "pac_Inventario_Ultimo_Movimiento_Bulk"
                                                , _rutaLog
                                                , "ServiceInventoryMove"
                                                , "PROD"
                                                , lstParametersSql
                                                , timeout: 120);

            if (ds != null && ds.Tables.Count > 0)
            {
                DataTable dt = ds.Tables[0];
                lstResult = dt.AsEnumerable().Select(s => new ItemInvMoveDetail()
                {
                    id_item = s.Field<Int32>("IdItem"),
                    Id_warehouse = s.Field<Int32>("Id_warehouse"),
                    Id_warehouselocation = s.Field<Int32>("Id_warehouselocation"),
                    id_inventorymovedetail = s.Field<Int32>("IdInventoryMoveDetail")

                }).ToList();
            }
            return lstResult;
        }
        #endregion


        public static List<ItemInvMoveDetail> GetLastMoveDetail(ParamForQueryInvMoveDetail _paramInvDetail)
        {
            List<ParamSQL> lstParametersSql = new List<ParamSQL>();
            List<ItemInvMoveDetail> lstResult = new List<ItemInvMoveDetail>();

            #region VARIABLES

            ParamSQL _param = new ParamSQL();
            _param.Nombre = "@str_item_inf";
            _param.TipoDato = DbType.String;
            _param.Valor = _paramInvDetail.str_item;
            lstParametersSql.Add(_param);

            _param = new ParamSQL();
            _param.Nombre = "@dt_emissionDate";
            _param.TipoDato = DbType.String;
            _param.Valor = DateTime.Parse(_paramInvDetail.emissiondate).ToIsoDateFormat();
            lstParametersSql.Add(_param);

            _param = new ParamSQL();
            _param.Nombre = "@dt_houremissionDate";
            _param.TipoDato = DbType.String;
            _param.Valor = _paramInvDetail.houremissiondate;
            lstParametersSql.Add(_param);

            #endregion VARIABLES

            string _cadenaConexion = ConfigurationManager.ConnectionStrings["DBContextNE"].ConnectionString;
            string _rutaLog = (string)ConfigurationManager.AppSettings["rutaLog"];
            DataSet ds = AccesoDatos.MSSQL.MetodosDatos2.ObtieneDatos(_cadenaConexion
                                                , "pac_Inventario_Ultimo_Movimiento"
                                                , _rutaLog
                                                , "ServiceInventoryMove"
                                                , "PROD"
                                                , lstParametersSql);

            if (ds != null && ds.Tables.Count > 0)
            {
                DataTable dt = ds.Tables[0];
                lstResult = dt.AsEnumerable().Select(s => new ItemInvMoveDetail()
                {
                    id_item = s.Field<Int32>("IdItem"),
                    id_inventorymovedetail = s.Field<Int32>("IdInventoryMoveDetail")

                }).ToList();
            }
            return lstResult;
        }

        public static void ValidateEmissionDateInventoryMove(DBContext db, DateTime emissionDate, bool reverse, int? idWarehouse = null)
        {
            string warehouseName = "";

            var periodDetail = db.InventoryPeriodDetail.Where(fod => !fod.isClosed && fod.dateInit.Year == emissionDate.Year);

            var lstInventoryPeriodDetail1 = periodDetail
                .AsEnumerable()
                .Where(fod => {
                    var condition = (DateTime.Compare(fod.dateInit.Date, emissionDate.Date) <= 0 &&
                                    DateTime.Compare(emissionDate.Date, fod.dateEnd.Date) <= 0);
                    return condition;
                })
                .ToList();

            InventoryPeriodDetail inventoryPeriodDetail;

            if (idWarehouse != null)
            {
                inventoryPeriodDetail = lstInventoryPeriodDetail1.FirstOrDefault(fod => fod.InventoryPeriod.id_warehouse == idWarehouse && fod.InventoryPeriod.isActive);
                warehouseName = db.Warehouse.FirstOrDefault(fod => fod.id == idWarehouse)?.name ?? "";
            }
            else
            {
                inventoryPeriodDetail = lstInventoryPeriodDetail1.FirstOrDefault();
            }

            if (inventoryPeriodDetail != null)
            {
                if (inventoryPeriodDetail.AdvanceParametersDetail.valueCode.Trim() != "A")
                {
                    throw new ProdHandlerException(reverse ? ("Fecha de emisión del documento(" + emissionDate.ToString("dd/MM/yyyy") + ") debe pertenecer a un período de inventario abierto" + (warehouseName != "" ? " para la bodega de " + warehouseName : ""))
                                                : ("Fecha de emisión del documento(" + emissionDate.ToString("dd/MM/yyyy") + ") debe pertenecer a un período de inventario abierto" + (warehouseName != "" ? " para la bodega de " + warehouseName : "")));
                }
            }
            else
            {
                throw new ProdHandlerException("No existe período de Inventario Creado" + (warehouseName != "" ? " para la bodega " + warehouseName : ""));
            }
        }

        private static void UpdateDocumentSource(Document destinationDocument, Document sourceDocument, DBContext db, bool isNew = true)
        {
            if (destinationDocument != null && sourceDocument != null)
            {
                if (db.DocumentSource.FirstOrDefault(fod => fod.id_document == destinationDocument.id && fod.id_documentOrigin == sourceDocument.id) == null)
                {
                    db.DocumentSource.Add(new DocumentSource()
                    {
                        id_document = destinationDocument.id,
                        Document = destinationDocument,
                        id_documentOrigin = sourceDocument.id,
                        Document1 = (isNew) ? sourceDocument : null
                    });


                }
            }
        }

        public static string UpdateBalancesAndCosts(InventoryMoveDetail inventoryMoveDetail, DBContext db, User ActiveUser)
        {
            string result = "";
            try
            {
                if (inventoryMoveDetail != null)
                {
                    var priceIfReverse = inventoryMoveDetail.InventoryMove.InventoryMove2?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == inventoryMoveDetail.id_item &&
                                                                                                                                fod.id_warehouse == inventoryMoveDetail.id_warehouse &&
                                                                                                                                fod.id_warehouseLocation == inventoryMoveDetail.id_warehouseLocation &&
                                                                                                                                fod.id_lot == inventoryMoveDetail.id_lot &&
                                                                                                                                fod.inMaximumUnit == inventoryMoveDetail.inMaximumUnit).unitPrice;
                    var quantity = inventoryMoveDetail.entryAmount - inventoryMoveDetail.exitAmount;
                    var entry = quantity > 0;
                    var quantityCost = (entry ? (quantity) * (priceIfReverse ?? inventoryMoveDetail.unitPrice) : (quantity) * (priceIfReverse ?? (inventoryMoveDetail?.InventoryMoveDetail3?.averagePrice ?? 0)));
                    var balanceaux = (inventoryMoveDetail?.InventoryMoveDetail3?.balance ?? 0) + quantity;
                    var balanceCost = (inventoryMoveDetail?.InventoryMoveDetail3?.balanceCost ?? 0) + quantityCost;
                    var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);

                    inventoryMoveDetail.entryAmountCost = entry ? quantity * (priceIfReverse ?? inventoryMoveDetail.unitPrice) : 0;
                    inventoryMoveDetail.exitAmountCost = entry ? 0 : (-quantity) * (priceIfReverse ?? (inventoryMoveDetail?.InventoryMoveDetail3?.averagePrice ?? 0));

                    inventoryMoveDetail.id_userUpdate = ActiveUser.id;
                    inventoryMoveDetail.dateUpdate = DateTime.Now;

                    inventoryMoveDetail.unitPrice = priceIfReverse ?? (entry ? (inventoryMoveDetail.unitPrice) : (inventoryMoveDetail?.InventoryMoveDetail3?.averagePrice ?? 0));
                    inventoryMoveDetail.balance = balanceaux;
                    inventoryMoveDetail.averagePrice = averagePriceAux;
                    inventoryMoveDetail.balanceCost = balanceCost;

                    if (!inventoryMoveDetail.Warehouse.allowsNegativeBalances && inventoryMoveDetail.balance < 0)
                    {
                        var lotNumber = inventoryMoveDetail.Lot == null ? "" : ", perteneciente al Lote: " + inventoryMoveDetail.Lot.number;
                        throw new Exception("No se pudo completar el recosteo en inventario debido a no haber suficiente Stock o quedará en negativo el movimiento de inventario: " + inventoryMoveDetail.InventoryMove.InventoryReason.name + ", número: " + inventoryMoveDetail.InventoryMove.Document.number + ", para el producto: " +
                                            inventoryMoveDetail.Item.name + ", en la Bodega: " + inventoryMoveDetail.Warehouse.name + ", en la Ubicación: " + inventoryMoveDetail.WarehouseLocation.name + lotNumber);
                    }

                    db.InventoryMoveDetail.Attach(inventoryMoveDetail);
                    db.Entry(inventoryMoveDetail).State = EntityState.Modified;

                    if (inventoryMoveDetail.id_inventoryMoveDetailNext != null)
                    {
                        UpdateBalancesAndCosts(inventoryMoveDetail.InventoryMoveDetail4, db, ActiveUser);
                    }
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        #region  RA | Optimizacion Fx Inventario - 005 
        private static InventoryMoveDetail PrepareUpdateInventoryMoveDetail(bool entry,
                                                                                decimal Iquantity,
                                                                                int Iid_item,
                                                                                int? Iid_lot,
                                                                                int Iid_metricUnit,
                                                                                int Iid_metricUnitMove,
                                                                                decimal IunitPriceMove,
                                                                                decimal IamountMove,
                                                                                bool IinMaximumUnit,
                                                                                decimal Iprice,
                                                                                int Iid_warehouse,
                                                                                int Iid_warehouseLocation,
                                                                                InventoryMoveDetail lastInventoryMove,
                                                                                ref InventoryMove inventoryMove,
                                                                                User ActiveUser,
                                                                                Company ActiveCompany,
                                                                                DBContext db,
                                                                                int? Iid_warehouseEntry = null,
                                                                                InventoryMoveDetail InventoryMoveDetailExit = null,
                                                                                int IsecondsOver = 0,
                                                                                int Iid = 0,
                                                                                int? id_costCenter = null,
                                                                                int? id_subCostCenter = null,
                                                                                bool genSecTrans = false,
                                                                                int? Iid_warehouseLocationEntry = null,
                                                                                int? id_costCenterEntry = null,
                                                                                int? id_subCostCenterEntry = null,
                                                                                int? id_productionCart = null,
                                                                                string ordenProduccion = null,
                                                                                string lotMarked = null,
                                                                                int? id_personProcessPlant = null)
        {
            var quantity = (entry ? (Iquantity) : (-Iquantity));
            var quantityCost = (entry ? (Iquantity) * (Iprice) : (-Iquantity) * (lastInventoryMove?.averagePrice ?? 0));
            var balanceaux = (lastInventoryMove?.balance ?? 0) + quantity;
            var balanceCost = (lastInventoryMove?.balanceCost ?? 0) + quantityCost;
            var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);
            var tempDetail = inventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id == Iid);
            var isNew = false;
            if (tempDetail == null)
            {
                tempDetail = new InventoryMoveDetail
                {
                    id_inventoryMove = inventoryMove.id,
                    InventoryMove = inventoryMove,

                    id_userCreate = ActiveUser.id,
                    dateCreate = DateTime.Now
                };
                isNew = true;
            }
            tempDetail.isNew = isNew;
            tempDetail.id_item = Iid_item;
            tempDetail.Item = db.Item.FirstOrDefault(fod => fod.id == Iid_item);

            tempDetail.id_lot = Iid_lot;
            tempDetail.Lot = db.Lot.FirstOrDefault(fod => fod.id == Iid_lot);

            tempDetail.id_metricUnit = Iid_metricUnit;
            tempDetail.MetricUnit = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnit);

            tempDetail.id_metricUnitMove = Iid_metricUnitMove;
            tempDetail.MetricUnit1 = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnitMove);
            tempDetail.unitPriceMove = IunitPriceMove;
            tempDetail.amountMove = IamountMove;

            tempDetail.inMaximumUnit = IinMaximumUnit;

            tempDetail.entryAmount = entry ? Iquantity : 0;
            tempDetail.entryAmountCost = entry ? Iquantity * Iprice : 0;

            tempDetail.exitAmount = entry ? 0 : Iquantity;
            tempDetail.exitAmountCost = entry ? 0 : Iquantity * (lastInventoryMove?.averagePrice ?? 0);

            tempDetail.id_warehouse = Iid_warehouse;
            tempDetail.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouse);

            tempDetail.id_warehouseLocation = Iid_warehouseLocation;
            tempDetail.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocation);

            tempDetail.id_warehouseEntry = Iid_warehouseEntry;
            tempDetail.Warehouse1 = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouseEntry);

            tempDetail.id_warehouseLocationEntry = Iid_warehouseLocationEntry;
            tempDetail.WarehouseLocation1 = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocationEntry);

            tempDetail.id_inventoryMoveDetailExit = InventoryMoveDetailExit?.id;
            tempDetail.InventoryMoveDetail2 = InventoryMoveDetailExit;

            tempDetail.InventoryMoveDetailPurchaseOrder = null;

            tempDetail.id_userUpdate = ActiveUser.id;
            tempDetail.dateUpdate = DateTime.Now;

            tempDetail.InventoryMoveDetail3 = lastInventoryMove;
            tempDetail.id_inventoryMoveDetailPrevious = lastInventoryMove?.id;

            tempDetail.unitPrice = entry ? Iprice : (lastInventoryMove?.averagePrice ?? 0);
            tempDetail.balance = balanceaux;
            tempDetail.averagePrice = averagePriceAux;
            tempDetail.balanceCost = balanceCost;

            tempDetail.id_costCenter = id_costCenter;
            tempDetail.id_subCostCenter = id_subCostCenter;

            tempDetail.genSecTrans = genSecTrans;

            tempDetail.id_costCenterEntry = id_costCenterEntry;
            tempDetail.id_subCostCenterEntry = id_subCostCenterEntry;

            tempDetail.id_productionCart = id_productionCart;

            tempDetail.ordenProduccion = ordenProduccion;
            tempDetail.lotMarked = lotMarked;
            tempDetail.id_personProcessPlant = id_personProcessPlant;

            //tempDetail.dateCreate.AddSeconds(IsecondsOver);
            if (inventoryMove.Document.DocumentState.code.Equals("01"))
            {
                tempDetail.InventoryMoveDetail3 = null;
                tempDetail.id_inventoryMoveDetailPrevious = null;
            }


            return tempDetail;
        }
        private static void ExecUpdateInventoryMoveDetail(DBContext db, InventoryMoveDetail detail, bool isNew)
        {

            //if (isNew)
            //{
            //    db.InventoryMoveDetail.Add(detail);
            //}
            //else
            //{
            //    db.Entry(detail).State = EntityState.Modified;
            //}
            //db.Entry(detail).State = isNew ? EntityState.Added : EntityState.Modified;
            //else
            //{
            //    //db.InventoryMoveDetail.Attach(tempDetail);
            //    //db.Entry(tempDetail).State = EntityState.Modified;
            //   
            //}

            //db.SaveChanges();


            //return detail;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveVirtualCompanyEntryOP(
            bool approve,
            User ActiveUser,
            Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove,
            DBContext db,
            bool reverse,
            Setting[] settings,
            Warehouse[] warehouses,
            WarehouseLocation[] warehouseLocations,
            DocumentState[] documentStates,
            EmissionPoint[] emissionPoints,
            InventoryReason[] inventoryReasons,
            Employee[] employees,
            MetricUnit[] metricUnits,
            MetricUnitConversion[] metricUnitConversions,
            InventoryMove inventoryMoveToReverse = null,
            DbContextTransaction trans = null,
            string identificador = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;

            IDbTransaction transaction = null;
            SqlConnection connection = null;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse?.InventoryMoveDetail.ToList();
                    if (itemDetail != null)
                    {
                        foreach (var i in itemDetail)
                        {
                            UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                        }
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    if (trans != null)
                    {
                        transaction = trans.UnderlyingTransaction;
                        connection = transaction.Connection as SqlConnection;
                    }

                    var codigoCBVE = settings.FirstOrDefault(fod2 => fod2.code == "CBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCBVE))
                    {
                        throw new ProdHandlerException("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseVIREMP = warehouses.FirstOrDefault(fod => fod.code == codigoCBVE);
                    if (warehouseVIREMP == null)
                    {
                        throw new ProdHandlerException("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido la bodega (con código: " + codigoCBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var codigoCUBVE = settings.FirstOrDefault(fod2 => fod2.code == "CUBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCUBVE))
                    {
                        throw new ProdHandlerException("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CUBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseLocationEMPGEN = warehouseLocations.FirstOrDefault(fod => fod.code == codigoCUBVE);
                    if (warehouseLocationEMPGEN == null)
                    {
                        throw new ProdHandlerException("No puede Guardarse Ingreso a Bodega Virtual de Empresa debido a no tener definido la ubicacion (con código: " + codigoCUBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var id_inventaryMoveVirtualCompanyEntry = db.DocumentSource.FirstOrDefault(fod => fod.id_documentOrigin == paramInventoryMove.id &&
                                                                   fod.Document.DocumentState.code.Equals("01") &&
                                                                   fod.Document.DocumentType.code.Equals("127"))?.id_document;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveVirtualCompanyEntry);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, false, warehouseVIREMP.id);

                    if (inventoryMove == null)
                    {
                        #region Document
                        LogInfo($"serv-imnull-doc-{identificador}", DateTime.Now);
                        Document document = new Document();

                        string codeDocumentType = (reverse ? "128" : "127");
                        var resultDocumentType = GetDocumentTypeSequentialAndNumber(codeDocumentType, db, ActiveCompany, ActiveEmissionPoint);
                        DocumentType documentType = resultDocumentType.Item1;
                        //db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "128" : "127")); 
                        document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = documentStates.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = emissionPoints.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = resultDocumentType.Item2; //GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = resultDocumentType.Item3;  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = resultDocumentType.Item4;
                            //documentType.currentNumber + 1;
                            //db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        UpdateDocumentSource(document, paramInventoryMove.Document, db);

                        #endregion Document

                        #region InventoryMove
                        LogInfo($"serv-imnull-im-{identificador}", DateTime.Now);
                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        if (reverse)
                        {
                            var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EABVETM"));
                            if (inventoryReason == null)
                            {
                                throw new Exception("No puede Reversarse el ingreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Egreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(EABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryExitMove = new InventoryExitMove
                            {
                                id_warehouseExit = warehouseVIREMP.id,
                                id_warehouseLocationExit = warehouseLocationEMPGEN.id,
                                id_dispatcher = ActiveUser.id_employee ?? 0,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateExit = DateTime.Now
                            };
                        }
                        else
                        {
                            var inventoryReason = inventoryReasons.FirstOrDefault(fod => fod.code.Equals("IABVETM"));
                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Aprobarse el ingreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(IABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryEntryMove = new InventoryEntryMove
                            {
                                id_warehouseEntry = warehouseVIREMP.id,
                                id_warehouseLocationEntry = warehouseLocationEMPGEN.id,
                                id_receiver = ActiveUser.id_employee ?? 0,
                                Employee = employees.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateEntry = DateTime.Now
                            };
                        }
                        inventoryMove.idWarehouse = warehouseVIREMP.id;

                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)warehouseVIREMP.id);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details
                        LogInfo($"serv-imnull-imd-{identificador}", DateTime.Now);
                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);
                        //str_item = itemDetail
                        //                .Select(r => $"{r.id_item.ToString()},{r.id_warehouse.ToString()},{r.id_warehouseLocation.ToString()}")
                        //                .Aggregate((i, j) => $"{i};{j}");
                        // -- VERSION PREVIA | 20240227
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;
                        if (!approve)
                        {
                            _IinvMd = GetLastMoveDetailBulk(_param);
                        }

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnits.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailForSP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                                 warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans,
                                                                                                 process: "InventoryMoveExitTransfer");
                            tempDetails.Add(tempDetail);
                        }

                        LogInfo($"serv-imnull-imd-save-{identificador}", DateTime.Now);
                        db.SaveChanges();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null,
                                                                                connection: connection,
                                                                                transaction: transaction,
                                                                                withNegatives: true);
                        }
                        #endregion 

                        int idx = 0;
                        List<ItemInventoryDto> itemInventories = new List<ItemInventoryDto>();
                        foreach (var i in itemDetail)
                        {
                            var tempDetail = tempDetails[idx];
                            if (approve)
                            {
                                #region Optimizacion Aprobacion | Tabla de saldo 
                                decimal remainingBalance = (SaldoValidaAprobacion?
                                                                     .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                 && r.id_lote == i.id_lot
                                                                                 && r.id_item == i.id_item)?
                                                                     .Sum(r => r.saldo) ?? 0);

                                #endregion


                                if (!warehouseVIREMP.allowsNegativeBalances && remainingBalance < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";

                                    var lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                    var item = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                    var warh = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                    var loct = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);

                                    var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        item?.name + ", en la Bodega: " + warh?.name + ", en la Ubicación: " + loct?.name + lotNumber);
                                }
                                var itemInventory = UpdateStockInventoryItemOP(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, tempDetail.entryAmount, db);
                                if (itemInventory != null) itemInventories.Add(itemInventory.ToDto());
                            }

                            idx++;
                        }

                        LogInfo($"serv-imnull-imd-itinv-{identificador}", DateTime.Now);
                        if (approve && (itemInventories?.Count ?? 0) > 0)
                        {
                            transaction = null;
                            connection = null;
                            if (trans == null)
                            {
                                transaction = getDbTransaction();
                                connection = transaction.Connection as SqlConnection;
                            }
                            else
                            {
                                transaction = trans.UnderlyingTransaction;
                                connection = transaction.Connection as SqlConnection;
                            }

                            ServiceTransCtl.UpdateItemInventory(itemInventories.ToArray(), transaction, connection);
                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document
                        LogInfo($"serv-im-doc-{identificador}", DateTime.Now);
                        DocumentState documentState = documentStates.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        #endregion Document

                        #region InventoryMove
                        LogInfo($"serv-im-im-{identificador}", DateTime.Now);
                        inventoryMove.InventoryEntryMove.id_receiver = ActiveUser.id_employee ?? 0;
                        inventoryMove.InventoryEntryMove.Employee = employees.FirstOrDefault(fod => fod.id == ActiveUser.id_employee);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details
                        LogInfo($"serv-im-imd-{identificador}", DateTime.Now);
                        result.inventoryMoveDetailIdsForDelete = inventoryMove
                                                                    .InventoryMoveDetail
                                                                    .Select(r => r.id)
                                                                    .ToArray();
                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                            #region Optimiza Codigo
                            //ValidateInventoryMoveDetailToRemove(db, detail);
                            #endregion
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Detached;
                        }

                        LogInfo($"serv-im-imd-save-head-{identificador}", DateTime.Now);
                        db.SaveChanges();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 
                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        //str_item = itemDetail
                        //                .Select(r => $"{r.id_item.ToString()},{r.id_warehouse.ToString()},{r.id_warehouseLocation.ToString()}")
                        //                .Aggregate((i, j) => $"{i};{j}");
                        // -- VERSION PREVIA | 20240227
                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();
                        foreach (var i in itemDetail)
                        {
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnits.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailForSP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                             warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans,
                                                                                             process: "InventoryMoveExitTransfer");
                            tempDetails.Add(tempDetail);

                        }

                        LogInfo($"serv-imn-imd-save{identificador}", DateTime.Now);
                        db.SaveChanges();

                        #region  -- Optimizacion consulta Saldo --
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null,
                                                                                inventotyMoveDetailIds: result.inventoryMoveDetailIdsForDelete,
                                                                                connection: connection,
                                                                                transaction: transaction,
                                                                                withNegatives: true);
                        }
                        #endregion

                        int idx = 0;
                        List<ItemInventoryDto> itemInventories = new List<ItemInventoryDto>();
                        foreach (var i in itemDetail)
                        {
                            var tempDetail = tempDetails[idx];
                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                                    .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                                && r.id_lote == i.id_lot
                                                                                && r.id_item == i.id_item)?
                                                                    .Sum(r => r.saldo) ?? 0);

                                if (!warehouseVIREMP.allowsNegativeBalances && (remainingBalance < 0))
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";

                                    var lot = db.Lot.FirstOrDefault(r => r.id == tempDetail.id_lot);
                                    var item = db.Item.FirstOrDefault(r => r.id == tempDetail.id_item);
                                    var warh = db.Warehouse.FirstOrDefault(r => r.id == tempDetail.id_warehouse);
                                    var loct = db.WarehouseLocation.FirstOrDefault(r => r.id == tempDetail.id_warehouseLocation);

                                    var lotNumber = lot == null ? "" : ", perteneciente al Lote: " + lot.number;
                                    throw new Exception("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        item?.name + ", en la Bodega: " + warh?.name + ", en la Ubicación: " + loct?.name + lotNumber);
                                }
                                var itemInventory = UpdateStockInventoryItemOP(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, tempDetail.entryAmount, db);
                                if (itemInventory != null) itemInventories.Add(itemInventory.ToDto());
                            }

                            idx++;
                        }

                        LogInfo($"serv-im-imd-itinv-{identificador}", DateTime.Now);
                        if (approve && (itemInventories?.Count ?? 0) > 0)
                        {
                            transaction = null;
                            connection = null;
                            if (trans == null)
                            {
                                transaction = getDbTransaction();
                                connection = transaction.Connection as SqlConnection;
                            }
                            else
                            {
                                transaction = trans.UnderlyingTransaction;
                                connection = transaction.Connection as SqlConnection;
                            }

                            ServiceTransCtl.UpdateItemInventory(itemInventories.ToArray(), transaction, connection);
                        }
                        #endregion Details
                    }


                }


                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgresoTransferenciaVirtual;
            }
            finally
            {
                result.inventoryMove = inventoryMove;
            }

            return result;
        }


        #endregion RA  | Optimizacion Fx Inventario - 005

        #region Control De Transacciones
        private static InventoryMoveDetail UpdateInventoryMoveDetailOpeningClosingForSP(bool entry,
                                                                                       decimal Iquantity,
                                                                                       int Iid_item,
                                                                                       int? Iid_lot,
                                                                                       int Iid_metricUnit,
                                                                                       int Iid_metricUnitMove,
                                                                                       decimal IunitPriceMove,
                                                                                       decimal IamountMove,
                                                                                       bool IinMaximumUnit,
                                                                                       decimal Iprice,
                                                                                       int Iid_warehouse,
                                                                                       int Iid_warehouseLocation,
                                                                                       InventoryMoveDetail lastInventoryMove,
                                                                                       InventoryMove inventoryMove,
                                                                                       User ActiveUser,
                                                                                       Company ActiveCompany,
                                                                                       DBContext db,
                                                                                       int? Iid_warehouseEntry = null,
                                                                                       InventoryMoveDetail InventoryMoveDetailExit = null,
                                                                                       int IsecondsOver = 0,
                                                                                       int Iid = 0,
                                                                                       int? id_costCenter = null,
                                                                                       int? id_subCostCenter = null,
                                                                                       bool genSecTrans = false,
                                                                                       int? Iid_warehouseLocationEntry = null,
                                                                                       int? id_costCenterEntry = null,
                                                                                       int? id_subCostCenterEntry = null,
                                                                                       int? id_productionCart = null,
                                                                                       string ordenProduccion = null,
                                                                                       string lotMarked = null,
                                                                                       int? id_personProcessPlant = null)
        {
            var quantity = (entry ? (Iquantity) : (-Iquantity));
            var quantityCost = (entry ? (Iquantity) * (Iprice) : (-Iquantity) * (lastInventoryMove?.averagePrice ?? 0));
            var balanceaux = (lastInventoryMove?.balance ?? 0) + quantity;
            var balanceCost = (lastInventoryMove?.balanceCost ?? 0) + quantityCost;
            var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);
            var tempDetail = inventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id == Iid && fod.id_lot == Iid_lot && fod.id_warehouseEntry == Iid_warehouse
            && fod.id_item == Iid_item && fod.id_productionCart == id_productionCart);

            var isNew = false;

            if (tempDetail == null)
            {
                tempDetail = new InventoryMoveDetail
                {
                    id_inventoryMove = inventoryMove.id,
                    InventoryMove = inventoryMove,

                    id_userCreate = ActiveUser.id,
                    dateCreate = DateTime.Now
                };
                isNew = true;
            }
            tempDetail.isNew = isNew;
            tempDetail.id_item = Iid_item;
            //tempDetail.Item = db.Item.FirstOrDefault(fod => fod.id == Iid_item);

            tempDetail.id_lot = Iid_lot;
            //tempDetail.Lot = db.Lot.FirstOrDefault(fod => fod.id == Iid_lot);

            tempDetail.id_metricUnit = Iid_metricUnit;
            //tempDetail.MetricUnit = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnit);

            tempDetail.id_metricUnitMove = Iid_metricUnitMove;
            //tempDetail.MetricUnit1 = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnitMove);
            tempDetail.unitPriceMove = IunitPriceMove;
            tempDetail.amountMove = IamountMove;

            tempDetail.inMaximumUnit = IinMaximumUnit;

            tempDetail.entryAmount = entry ? Iquantity : 0;
            tempDetail.entryAmountCost = entry ? Iquantity * Iprice : 0;

            tempDetail.exitAmount = entry ? 0 : Iquantity;
            tempDetail.exitAmountCost = entry ? 0 : Iquantity * (lastInventoryMove?.averagePrice ?? 0);

            tempDetail.id_warehouse = Iid_warehouse;
            //tempDetail.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouse);

            tempDetail.id_warehouseLocation = Iid_warehouseLocation;
            //tempDetail.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocation);

            tempDetail.id_warehouseEntry = Iid_warehouseEntry;
            //tempDetail.Warehouse1 = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouseEntry);

            tempDetail.id_warehouseLocationEntry = Iid_warehouseLocationEntry;
            //tempDetail.WarehouseLocation1 = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocationEntry);

            tempDetail.id_inventoryMoveDetailExit = InventoryMoveDetailExit?.id;
            tempDetail.InventoryMoveDetail2 = InventoryMoveDetailExit;

            tempDetail.InventoryMoveDetailPurchaseOrder = null;

            tempDetail.id_userUpdate = ActiveUser.id;
            tempDetail.dateUpdate = DateTime.Now;

            tempDetail.InventoryMoveDetail3 = lastInventoryMove;
            tempDetail.id_inventoryMoveDetailPrevious = lastInventoryMove?.id;

            tempDetail.unitPrice = entry ? Iprice : (lastInventoryMove?.averagePrice ?? 0);
            tempDetail.balance = balanceaux;
            tempDetail.averagePrice = averagePriceAux;
            tempDetail.balanceCost = balanceCost;

            tempDetail.id_costCenter = id_costCenter;
            tempDetail.id_subCostCenter = id_subCostCenter;

            tempDetail.genSecTrans = genSecTrans;

            tempDetail.id_costCenterEntry = id_costCenterEntry;
            tempDetail.id_subCostCenterEntry = id_subCostCenterEntry;

            tempDetail.id_productionCart = id_productionCart;

            tempDetail.ordenProduccion = ordenProduccion;
            tempDetail.lotMarked = lotMarked;
            tempDetail.id_personProcessPlant = id_personProcessPlant;

            //tempDetail.dateCreate.AddSeconds(IsecondsOver);
            if (inventoryMove.Document.DocumentState.code.Equals("01"))
            {
                tempDetail.InventoryMoveDetail3 = null;
                tempDetail.id_inventoryMoveDetailPrevious = null;
            }

            if (isNew)
            {                
                inventoryMove.InventoryMoveDetail.Add(tempDetail);
            }
         
            return tempDetail;
        }


        private static InventoryMoveDetail UpdateInventoryMoveDetailForSP(bool entry,
                                                                          decimal Iquantity,
                                                                          int Iid_item,
                                                                          int? Iid_lot,
                                                                          int Iid_metricUnit,
                                                                          int Iid_metricUnitMove,
                                                                          decimal IunitPriceMove,
                                                                          decimal IamountMove,
                                                                          bool IinMaximumUnit,
                                                                          decimal Iprice,
                                                                          int Iid_warehouse,
                                                                          int Iid_warehouseLocation,
                                                                          InventoryMoveDetail lastInventoryMove,
                                                                          InventoryMove inventoryMove,
                                                                          User ActiveUser,
                                                                          Company ActiveCompany,
                                                                          DBContext db,
                                                                          int? Iid_warehouseEntry = null,
                                                                          InventoryMoveDetail InventoryMoveDetailExit = null,
                                                                          int IsecondsOver = 0,
                                                                          int Iid = 0,
                                                                          int? id_costCenter = null,
                                                                          int? id_subCostCenter = null,
                                                                          bool genSecTrans = false,
                                                                          int? Iid_warehouseLocationEntry = null,
                                                                          int? id_costCenterEntry = null,
                                                                          int? id_subCostCenterEntry = null,
                                                                          int? id_productionCart = null,
                                                                          string ordenProduccion = null,
                                                                          string lotMarked = null,
                                                                          int? id_personProcessPlant = null,
                                                                          string process = null)
        {
            var quantity = (entry ? (Iquantity) : (-Iquantity));
            var quantityCost = (entry ? (Iquantity) * (Iprice) : (-Iquantity) * (lastInventoryMove?.averagePrice ?? 0));
            var balanceaux = (lastInventoryMove?.balance ?? 0) + quantity;
            var balanceCost = (lastInventoryMove?.balanceCost ?? 0) + quantityCost;
            var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);
            InventoryMoveDetail tempDetail = null;
            switch (process)
            {
                case "InventoryMoveExit":
                case "InventoryMoveEntry":
                case "InventoryMoveExitTransfer":
                    tempDetail = inventoryMove
                                        .InventoryMoveDetail
                                        .FirstOrDefault(fod => fod.id == Iid
                                                                && fod.id_warehouse == Iid_warehouse
                                                                && fod.id_warehouseLocation == Iid_warehouseLocation    
                                                                && fod.id_lot == Iid_lot                                                                
                                                                && fod.id_item == Iid_item);
                    break;
                case "OpeningClosingPlateLying":
                    tempDetail = inventoryMove
                                        .InventoryMoveDetail
                                        .FirstOrDefault(fod => fod.id == Iid 
                                                                && fod.id_lot == Iid_lot 
                                                                && fod.id_warehouseEntry == Iid_warehouse
                                                                && fod.id_item == Iid_item 
                                                                && fod.id_productionCart == id_productionCart);
                    break;
            }
            
            var isNew = false;

            if (tempDetail == null)
            {
                tempDetail = new InventoryMoveDetail
                {
                    id_inventoryMove = inventoryMove.id,
                    InventoryMove = inventoryMove,

                    id_userCreate = ActiveUser.id,
                    dateCreate = DateTime.Now
                };
                isNew = true;
            }
            tempDetail.isNew = isNew;
            tempDetail.id_item = Iid_item;
            //tempDetail.Item = db.Item.FirstOrDefault(fod => fod.id == Iid_item);

            tempDetail.id_lot = Iid_lot;
            //tempDetail.Lot = db.Lot.FirstOrDefault(fod => fod.id == Iid_lot);

            tempDetail.id_metricUnit = Iid_metricUnit;
            //tempDetail.MetricUnit = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnit);

            tempDetail.id_metricUnitMove = Iid_metricUnitMove;
            //tempDetail.MetricUnit1 = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnitMove);
            tempDetail.unitPriceMove = IunitPriceMove;
            tempDetail.amountMove = IamountMove;

            tempDetail.inMaximumUnit = IinMaximumUnit;

            tempDetail.entryAmount = entry ? Iquantity : 0;
            tempDetail.entryAmountCost = entry ? Iquantity * Iprice : 0;

            tempDetail.exitAmount = entry ? 0 : Iquantity;
            tempDetail.exitAmountCost = entry ? 0 : Iquantity * (lastInventoryMove?.averagePrice ?? 0);

            tempDetail.id_warehouse = Iid_warehouse;
            //tempDetail.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouse);

            tempDetail.id_warehouseLocation = Iid_warehouseLocation;
            //tempDetail.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocation);

            tempDetail.id_warehouseEntry = Iid_warehouseEntry;
            //tempDetail.Warehouse1 = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouseEntry);

            tempDetail.id_warehouseLocationEntry = Iid_warehouseLocationEntry;
            //tempDetail.WarehouseLocation1 = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocationEntry);

            tempDetail.id_inventoryMoveDetailExit = InventoryMoveDetailExit?.id;
            tempDetail.InventoryMoveDetail2 = InventoryMoveDetailExit;

            tempDetail.InventoryMoveDetailPurchaseOrder = null;

            tempDetail.id_userUpdate = ActiveUser.id;
            tempDetail.dateUpdate = DateTime.Now;

            tempDetail.InventoryMoveDetail3 = lastInventoryMove;
            tempDetail.id_inventoryMoveDetailPrevious = lastInventoryMove?.id;

            tempDetail.unitPrice = entry ? Iprice : (lastInventoryMove?.averagePrice ?? 0);
            tempDetail.balance = balanceaux;
            tempDetail.averagePrice = averagePriceAux;
            tempDetail.balanceCost = balanceCost;

            tempDetail.id_costCenter = id_costCenter;
            tempDetail.id_subCostCenter = id_subCostCenter;

            tempDetail.genSecTrans = genSecTrans;

            tempDetail.id_costCenterEntry = id_costCenterEntry;
            tempDetail.id_subCostCenterEntry = id_subCostCenterEntry;

            tempDetail.id_productionCart = id_productionCart;

            tempDetail.ordenProduccion = ordenProduccion;
            tempDetail.lotMarked = lotMarked;
            tempDetail.id_personProcessPlant = id_personProcessPlant;

            //tempDetail.dateCreate.AddSeconds(IsecondsOver);
            if (inventoryMove.Document.DocumentState.code.Equals("01"))
            {
                tempDetail.InventoryMoveDetail3 = null;
                tempDetail.id_inventoryMoveDetailPrevious = null;
            }

            if (isNew)
            {
                inventoryMove.InventoryMoveDetail.Add(tempDetail);
            }
            db.Entry(tempDetail).State = isNew ? EntityState.Added : EntityState.Modified;

            return tempDetail;
        }
        #endregion

        #region CR
        private static InventoryMoveDetail UpdateInventoryMoveDetailOpeningClose(bool entry,
                                                                       decimal Iquantity,
                                                                       int Iid_item,
                                                                       int? Iid_lot,
                                                                       int Iid_metricUnit,
                                                                       int Iid_metricUnitMove,
                                                                       decimal IunitPriceMove,
                                                                       decimal IamountMove,
                                                                       bool IinMaximumUnit,
                                                                       decimal Iprice,
                                                                       int Iid_warehouse,
                                                                       int Iid_warehouseLocation,
                                                                       InventoryMoveDetail lastInventoryMove,
                                                                       InventoryMove inventoryMove,
                                                                       User ActiveUser,
                                                                       Company ActiveCompany,
                                                                       DBContext db,
                                                                       int? Iid_warehouseEntry = null,
                                                                       InventoryMoveDetail InventoryMoveDetailExit = null,
                                                                       int IsecondsOver = 0,
                                                                       int Iid = 0,
                                                                       int? id_costCenter = null,
                                                                       int? id_subCostCenter = null,
                                                                       bool genSecTrans = false,
                                                                       int? Iid_warehouseLocationEntry = null,
                                                                       int? id_costCenterEntry = null,
                                                                       int? id_subCostCenterEntry = null,
                                                                       int? id_productionCart = null,
                                                                       string ordenProduccion = null,
                                                                       string lotMarked = null,
                                                                       int? id_personProcessPlant = null)
        {
            var quantity = (entry ? (Iquantity) : (-Iquantity));
            var quantityCost = (entry ? (Iquantity) * (Iprice) : (-Iquantity) * (lastInventoryMove?.averagePrice ?? 0));
            var balanceaux = (lastInventoryMove?.balance ?? 0) + quantity;
            var balanceCost = (lastInventoryMove?.balanceCost ?? 0) + quantityCost;
            var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);
            var tempDetail = inventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id == Iid && fod.id_lot == Iid_lot && fod.id_warehouseEntry == Iid_warehouse
            && fod.id_item == Iid_item && fod.id_productionCart == id_productionCart);

            var isNew = false;

            if (tempDetail == null)
            {
                tempDetail = new InventoryMoveDetail
                {
                    id_inventoryMove = inventoryMove.id,
                    InventoryMove = inventoryMove,

                    id_userCreate = ActiveUser.id,
                    dateCreate = DateTime.Now
                };
                isNew = true;
            }

            tempDetail.id_item = Iid_item;
            tempDetail.Item = db.Item.FirstOrDefault(fod => fod.id == Iid_item);

            tempDetail.id_lot = Iid_lot;
            tempDetail.Lot = db.Lot.FirstOrDefault(fod => fod.id == Iid_lot);

            tempDetail.id_metricUnit = Iid_metricUnit;
            //tempDetail.MetricUnit = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnit);

            tempDetail.id_metricUnitMove = Iid_metricUnitMove;
            //tempDetail.MetricUnit1 = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnitMove);
            tempDetail.unitPriceMove = IunitPriceMove;
            tempDetail.amountMove = IamountMove;

            tempDetail.inMaximumUnit = IinMaximumUnit;

            tempDetail.entryAmount = entry ? Iquantity : 0;
            tempDetail.entryAmountCost = entry ? Iquantity * Iprice : 0;

            tempDetail.exitAmount = entry ? 0 : Iquantity;
            tempDetail.exitAmountCost = entry ? 0 : Iquantity * (lastInventoryMove?.averagePrice ?? 0);

            tempDetail.id_warehouse = Iid_warehouse;
            //tempDetail.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouse);

            tempDetail.id_warehouseLocation = Iid_warehouseLocation;
            //tempDetail.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocation);

            tempDetail.id_warehouseEntry = Iid_warehouseEntry;
            //tempDetail.Warehouse1 = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouseEntry);

            tempDetail.id_warehouseLocationEntry = Iid_warehouseLocationEntry;
            //tempDetail.WarehouseLocation1 = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocationEntry);

            tempDetail.id_inventoryMoveDetailExit = InventoryMoveDetailExit?.id;
            tempDetail.InventoryMoveDetail2 = InventoryMoveDetailExit;

            tempDetail.InventoryMoveDetailPurchaseOrder = null;

            tempDetail.id_userUpdate = ActiveUser.id;
            tempDetail.dateUpdate = DateTime.Now;

            tempDetail.InventoryMoveDetail3 = lastInventoryMove;
            tempDetail.id_inventoryMoveDetailPrevious = lastInventoryMove?.id;

            tempDetail.unitPrice = entry ? Iprice : (lastInventoryMove?.averagePrice ?? 0);
            tempDetail.balance = balanceaux;
            tempDetail.averagePrice = averagePriceAux;
            tempDetail.balanceCost = balanceCost;

            tempDetail.id_costCenter = id_costCenter;
            tempDetail.id_subCostCenter = id_subCostCenter;

            tempDetail.genSecTrans = genSecTrans;

            tempDetail.id_costCenterEntry = id_costCenterEntry;
            tempDetail.id_subCostCenterEntry = id_subCostCenterEntry;

            tempDetail.id_productionCart = id_productionCart;

            tempDetail.ordenProduccion = ordenProduccion;
            tempDetail.lotMarked = lotMarked;
            tempDetail.id_personProcessPlant = id_personProcessPlant;

            //tempDetail.dateCreate.AddSeconds(IsecondsOver);
            if (inventoryMove.Document.DocumentState.code.Equals("01"))
            {
                tempDetail.InventoryMoveDetail3 = null;
                tempDetail.id_inventoryMoveDetailPrevious = null;
            }


            if (isNew)
            {
                inventoryMove.InventoryMoveDetail.Add(tempDetail);
            }
            db.Entry(tempDetail).State = isNew ? EntityState.Added : EntityState.Modified;
            //else
            //{
            //    //db.InventoryMoveDetail.Attach(tempDetail);
            //    //db.Entry(tempDetail).State = EntityState.Modified;
            //    db.Entry(tempDetail).State = isNew ? EntityState.Added : EntityState.Modified;
            //}

            //db.SaveChanges();

            return tempDetail;
        }

        #endregion

        private static InventoryMoveDetail UpdateInventoryMoveDetail(bool entry,
                                                                        decimal Iquantity,
                                                                        int Iid_item,
                                                                        int? Iid_lot,
                                                                        int Iid_metricUnit,
                                                                        int Iid_metricUnitMove,
                                                                        decimal IunitPriceMove,
                                                                        decimal IamountMove,
                                                                        bool IinMaximumUnit,
                                                                        decimal Iprice,
                                                                        int Iid_warehouse,
                                                                        int Iid_warehouseLocation,
                                                                        InventoryMoveDetail lastInventoryMove,
                                                                        InventoryMove inventoryMove,
                                                                        User ActiveUser,
                                                                        Company ActiveCompany,
                                                                        DBContext db,
                                                                        int? Iid_warehouseEntry = null,
                                                                        InventoryMoveDetail InventoryMoveDetailExit = null,
                                                                        int IsecondsOver = 0,
                                                                        int Iid = 0,
                                                                        int? id_costCenter = null,
                                                                        int? id_subCostCenter = null,
                                                                        bool genSecTrans = false,
                                                                        int? Iid_warehouseLocationEntry = null,
                                                                        int? id_costCenterEntry = null,
                                                                        int? id_subCostCenterEntry = null,
                                                                        int? id_productionCart = null,
                                                                        string ordenProduccion = null,
                                                                        string lotMarked = null,
                                                                        int? id_personProcessPlant = null)
        {
            var quantity = (entry ? (Iquantity) : (-Iquantity));
            var quantityCost = (entry ? (Iquantity) * (Iprice) : (-Iquantity) * (lastInventoryMove?.averagePrice ?? 0));
            var balanceaux = (lastInventoryMove?.balance ?? 0) + quantity;
            var balanceCost = (lastInventoryMove?.balanceCost ?? 0) + quantityCost;
            var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);
            var tempDetail = inventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id == Iid);
            var isNew = false;

            if (tempDetail == null)
            {
                tempDetail = new InventoryMoveDetail
                {
                    id_inventoryMove = inventoryMove.id,
                    InventoryMove = inventoryMove,

                    id_userCreate = ActiveUser.id,
                    dateCreate = DateTime.Now
                };
                isNew = true;
            }

            tempDetail.id_item = Iid_item;
            tempDetail.Item = db.Item.FirstOrDefault(fod => fod.id == Iid_item);

            tempDetail.id_lot = Iid_lot;
            tempDetail.Lot = db.Lot.FirstOrDefault(fod => fod.id == Iid_lot);

            tempDetail.id_metricUnit = Iid_metricUnit;
            tempDetail.MetricUnit = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnit);

            tempDetail.id_metricUnitMove = Iid_metricUnitMove;
            tempDetail.MetricUnit1 = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnitMove);
            tempDetail.unitPriceMove = IunitPriceMove;
            tempDetail.amountMove = IamountMove;

            tempDetail.inMaximumUnit = IinMaximumUnit;

            tempDetail.entryAmount = entry ? Iquantity : 0;
            tempDetail.entryAmountCost = entry ? Iquantity * Iprice : 0;

            tempDetail.exitAmount = entry ? 0 : Iquantity;
            tempDetail.exitAmountCost = entry ? 0 : Iquantity * (lastInventoryMove?.averagePrice ?? 0);

            tempDetail.id_warehouse = Iid_warehouse;
            tempDetail.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouse);

            tempDetail.id_warehouseLocation = Iid_warehouseLocation;
            tempDetail.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocation);

            tempDetail.id_warehouseEntry = Iid_warehouseEntry;
            tempDetail.Warehouse1 = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouseEntry);

            tempDetail.id_warehouseLocationEntry = Iid_warehouseLocationEntry;
            tempDetail.WarehouseLocation1 = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocationEntry);

            tempDetail.id_inventoryMoveDetailExit = InventoryMoveDetailExit?.id;
            tempDetail.InventoryMoveDetail2 = InventoryMoveDetailExit;

            tempDetail.InventoryMoveDetailPurchaseOrder = null;

            tempDetail.id_userUpdate = ActiveUser.id;
            tempDetail.dateUpdate = DateTime.Now;

            tempDetail.InventoryMoveDetail3 = lastInventoryMove;
            tempDetail.id_inventoryMoveDetailPrevious = lastInventoryMove?.id;

            tempDetail.unitPrice = entry ? Iprice : (lastInventoryMove?.averagePrice ?? 0);
            tempDetail.balance = balanceaux;
            tempDetail.averagePrice = averagePriceAux;
            tempDetail.balanceCost = balanceCost;

            tempDetail.id_costCenter = id_costCenter;
            tempDetail.id_subCostCenter = id_subCostCenter;

            tempDetail.genSecTrans = genSecTrans;

            tempDetail.id_costCenterEntry = id_costCenterEntry;
            tempDetail.id_subCostCenterEntry = id_subCostCenterEntry;

            tempDetail.id_productionCart = id_productionCart;

            tempDetail.ordenProduccion = ordenProduccion;
            tempDetail.lotMarked = lotMarked;
            tempDetail.id_personProcessPlant = id_personProcessPlant;

            //tempDetail.dateCreate.AddSeconds(IsecondsOver);
            if (inventoryMove.Document.DocumentState.code.Equals("01"))
            {
                tempDetail.InventoryMoveDetail3 = null;
                tempDetail.id_inventoryMoveDetailPrevious = null;
            }


            if (isNew)
            {

                db.InventoryMoveDetail.Add(tempDetail);
            }
            else
            {
                //db.InventoryMoveDetail.Attach(tempDetail);
                //db.Entry(tempDetail).State = EntityState.Modified;
                db.Entry(tempDetail).State = isNew ? EntityState.Added : EntityState.Modified;
            }

            db.SaveChanges();

            return tempDetail;
        }

        #region CR | Optimiza 
        private static InventoryMoveDetail UpdateInventoryMoveDetailAutomatic(bool entry,
                                                                decimal Iquantity,
                                                                int Iid_item,
                                                                int? Iid_lot,
                                                                int Iid_metricUnit,
                                                                int Iid_metricUnitMove,
                                                                decimal IunitPriceMove,
                                                                decimal IamountMove,
                                                                bool IinMaximumUnit,
                                                                decimal Iprice,
                                                                int Iid_warehouse,
                                                                int Iid_warehouseLocation,
                                                                InventoryMoveDetail lastInventoryMove,
                                                                InventoryMove inventoryMove,
                                                                User ActiveUser,
                                                                Company ActiveCompany,
                                                                DBContext db,
                                                                int? Iid_warehouseEntry = null,
                                                                InventoryMoveDetail InventoryMoveDetailExit = null,
                                                                int IsecondsOver = 0,
                                                                int Iid = 0,
                                                                int? id_costCenter = null,
                                                                int? id_subCostCenter = null,
                                                                bool genSecTrans = false,
                                                                int? Iid_warehouseLocationEntry = null,
                                                                int? id_costCenterEntry = null,
                                                                int? id_subCostCenterEntry = null,
                                                                int? id_productionCart = null,
                                                                string ordenProduccion = null,
                                                                string lotMarked = null,
                                                                int? id_personProcessPlant = null)
        {
            var quantity = (entry ? (Iquantity) : (-Iquantity));
            var quantityCost = (entry ? (Iquantity) * (Iprice) : (-Iquantity) * (lastInventoryMove?.averagePrice ?? 0));
            var balanceaux = (lastInventoryMove?.balance ?? 0) + quantity;
            var balanceCost = (lastInventoryMove?.balanceCost ?? 0) + quantityCost;
            var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);
            var tempDetail = (Iid == 0) ? null : inventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id == Iid);
            var isNew = false;

            if (tempDetail == null)
            {
                tempDetail = new InventoryMoveDetail
                {
                    id_inventoryMove = inventoryMove.id,
                    InventoryMove = inventoryMove,

                    id_userCreate = ActiveUser.id,
                    dateCreate = DateTime.Now
                };
                isNew = true;
            }

            tempDetail.id_item = Iid_item;
            tempDetail.Item = db.Item.FirstOrDefault(fod => fod.id == Iid_item);

            tempDetail.id_lot = Iid_lot;
            tempDetail.Lot = db.Lot.FirstOrDefault(fod => fod.id == Iid_lot);

            tempDetail.id_metricUnit = Iid_metricUnit;
            tempDetail.MetricUnit = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnit);

            tempDetail.id_metricUnitMove = Iid_metricUnitMove;
            tempDetail.MetricUnit1 = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnitMove);
            tempDetail.unitPriceMove = IunitPriceMove;
            tempDetail.amountMove = IamountMove;

            tempDetail.inMaximumUnit = IinMaximumUnit;

            tempDetail.entryAmount = entry ? Iquantity : 0;
            tempDetail.entryAmountCost = entry ? Iquantity * Iprice : 0;

            tempDetail.exitAmount = entry ? 0 : Iquantity;
            tempDetail.exitAmountCost = entry ? 0 : Iquantity * (lastInventoryMove?.averagePrice ?? 0);

            tempDetail.id_warehouse = Iid_warehouse;
            tempDetail.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouse);

            tempDetail.id_warehouseLocation = Iid_warehouseLocation;
            tempDetail.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocation);

            tempDetail.id_warehouseEntry = Iid_warehouseEntry;
            tempDetail.Warehouse1 = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouseEntry);

            tempDetail.id_warehouseLocationEntry = Iid_warehouseLocationEntry;
            tempDetail.WarehouseLocation1 = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocationEntry);

            tempDetail.id_inventoryMoveDetailExit = InventoryMoveDetailExit?.id;
            tempDetail.InventoryMoveDetail2 = InventoryMoveDetailExit;

            tempDetail.InventoryMoveDetailPurchaseOrder = null;

            tempDetail.id_userUpdate = ActiveUser.id;
            tempDetail.dateUpdate = DateTime.Now;

            tempDetail.InventoryMoveDetail3 = lastInventoryMove;
            tempDetail.id_inventoryMoveDetailPrevious = lastInventoryMove?.id;

            tempDetail.unitPrice = entry ? Iprice : (lastInventoryMove?.averagePrice ?? 0);
            tempDetail.balance = balanceaux;
            tempDetail.averagePrice = averagePriceAux;
            tempDetail.balanceCost = balanceCost;

            tempDetail.id_costCenter = id_costCenter;
            tempDetail.id_subCostCenter = id_subCostCenter;

            tempDetail.genSecTrans = genSecTrans;

            tempDetail.id_costCenterEntry = id_costCenterEntry;
            tempDetail.id_subCostCenterEntry = id_subCostCenterEntry;

            tempDetail.id_productionCart = id_productionCart;

            tempDetail.ordenProduccion = ordenProduccion;
            tempDetail.lotMarked = lotMarked;
            tempDetail.id_personProcessPlant = id_personProcessPlant;

            //tempDetail.dateCreate.AddSeconds(IsecondsOver);
            if (inventoryMove.Document.DocumentState.code.Equals("01"))
            {
                tempDetail.InventoryMoveDetail3 = null;
                tempDetail.id_inventoryMoveDetailPrevious = null;
            }


            if (isNew)
            {
                inventoryMove.InventoryMoveDetail.Add(tempDetail);
                //db.InventoryMoveDetail.Add(tempDetail);
            }
            else
            {
                //db.InventoryMoveDetail.Attach(tempDetail);
                //db.Entry(tempDetail).State = EntityState.Modified;
                //db.Entry(tempDetail).State = isNew ? EntityState.Added : EntityState.Modified;
                db.Entry(tempDetail).State = EntityState.Modified;
            }

            //db.SaveChanges();

            return tempDetail;
        }
        #endregion



        private static InventoryMoveDetail UpdateInventoryMoveDetailPrepareOP(bool entry,
                                                                                decimal Iquantity,
                                                                                int Iid_item,
                                                                                int? Iid_lot,
                                                                                int Iid_metricUnit,
                                                                                int Iid_metricUnitMove,
                                                                                decimal IunitPriceMove,
                                                                                decimal IamountMove,
                                                                                bool IinMaximumUnit,
                                                                                decimal Iprice,
                                                                                int Iid_warehouse,
                                                                                int Iid_warehouseLocation,
                                                                                InventoryMoveDetail lastInventoryMove,
                                                                                InventoryMove inventoryMove,
                                                                                User ActiveUser,
                                                                                Company ActiveCompany,
                                                                                DBContext db,
                                                                                int? Iid_warehouseEntry = null,
                                                                                InventoryMoveDetail InventoryMoveDetailExit = null,
                                                                                int IsecondsOver = 0,
                                                                                int Iid = 0,
                                                                                int? id_costCenter = null,
                                                                                int? id_subCostCenter = null,
                                                                                bool genSecTrans = false,
                                                                                int? Iid_warehouseLocationEntry = null,
                                                                                int? id_costCenterEntry = null,
                                                                                int? id_subCostCenterEntry = null,
                                                                                int? id_productionCart = null,
                                                                                string ordenProduccion = null,
                                                                                string lotMarked = null,
                                                                                int? id_personProcessPlant = null,
                                                                                bool thisToSave = false)
        {
            var quantity = (entry ? (Iquantity) : (-Iquantity));
            var quantityCost = (entry ? (Iquantity) * (Iprice) : (-Iquantity) * (lastInventoryMove?.averagePrice ?? 0));
            var balanceaux = (lastInventoryMove?.balance ?? 0) + quantity;
            var balanceCost = (lastInventoryMove?.balanceCost ?? 0) + quantityCost;
            var averagePriceAux = (balanceaux > 0 ? balanceCost / balanceaux : 0);


            var tempDetail = (Iid == 0) ? null : inventoryMove.InventoryMoveDetail.FirstOrDefault(fod => fod.id == Iid /*&& fod.id_lot == Iid_lot && fod.id_warehouseEntry == Iid_warehouse
            && fod.id_item == Iid_item && fod.id_productionCart == id_productionCart*/);
            var isNew = false;

            if (tempDetail == null)
            {
                tempDetail = new InventoryMoveDetail
                {
                    id_inventoryMove = inventoryMove.id,
                    InventoryMove = inventoryMove,

                    id_userCreate = ActiveUser.id,
                    dateCreate = DateTime.Now
                };
                isNew = true;
            }

            tempDetail.id_item = Iid_item;
            //tempDetail.Item = db.Item.FirstOrDefault(fod => fod.id == Iid_item);

            tempDetail.id_lot = Iid_lot;
            //tempDetail.Lot = db.Lot.FirstOrDefault(fod => fod.id == Iid_lot);

            tempDetail.id_metricUnit = Iid_metricUnit;
            //tempDetail.MetricUnit = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnit);

            tempDetail.id_metricUnitMove = Iid_metricUnitMove;
            //tempDetail.MetricUnit1 = db.MetricUnit.FirstOrDefault(fod => fod.id == Iid_metricUnitMove);
            tempDetail.unitPriceMove = IunitPriceMove;
            tempDetail.amountMove = IamountMove;

            tempDetail.inMaximumUnit = IinMaximumUnit;

            tempDetail.entryAmount = entry ? Iquantity : 0;
            tempDetail.entryAmountCost = entry ? Iquantity * Iprice : 0;

            tempDetail.exitAmount = entry ? 0 : Iquantity;
            tempDetail.exitAmountCost = entry ? 0 : Iquantity * (lastInventoryMove?.averagePrice ?? 0);

            tempDetail.id_warehouse = Iid_warehouse;
            //tempDetail.Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouse);

            tempDetail.id_warehouseLocation = Iid_warehouseLocation;
            //tempDetail.WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocation);

            tempDetail.id_warehouseEntry = Iid_warehouseEntry;
            //tempDetail.Warehouse1 = db.Warehouse.FirstOrDefault(fod => fod.id == Iid_warehouseEntry);

            tempDetail.id_warehouseLocationEntry = Iid_warehouseLocationEntry;
            //tempDetail.WarehouseLocation1 = db.WarehouseLocation.FirstOrDefault(fod => fod.id == Iid_warehouseLocationEntry);

            tempDetail.id_inventoryMoveDetailExit = InventoryMoveDetailExit?.id;
            tempDetail.InventoryMoveDetail2 = InventoryMoveDetailExit;

            tempDetail.InventoryMoveDetailPurchaseOrder = null;

            tempDetail.id_userUpdate = ActiveUser.id;
            tempDetail.dateUpdate = DateTime.Now;

            tempDetail.InventoryMoveDetail3 = lastInventoryMove;
            tempDetail.id_inventoryMoveDetailPrevious = lastInventoryMove?.id;

            tempDetail.unitPrice = entry ? Iprice : (lastInventoryMove?.averagePrice ?? 0);
            tempDetail.balance = balanceaux;
            tempDetail.averagePrice = averagePriceAux;
            tempDetail.balanceCost = balanceCost;

            tempDetail.id_costCenter = id_costCenter;
            tempDetail.id_subCostCenter = id_subCostCenter;

            tempDetail.genSecTrans = genSecTrans;

            tempDetail.id_costCenterEntry = id_costCenterEntry;
            tempDetail.id_subCostCenterEntry = id_subCostCenterEntry;

            tempDetail.id_productionCart = id_productionCart;

            tempDetail.ordenProduccion = ordenProduccion;
            tempDetail.lotMarked = lotMarked;
            tempDetail.id_personProcessPlant = id_personProcessPlant;

            //tempDetail.dateCreate.AddSeconds(IsecondsOver);
            if (inventoryMove.Document.DocumentState.code.Equals("01"))
            {
                tempDetail.InventoryMoveDetail3 = null;
                tempDetail.id_inventoryMoveDetailPrevious = null;
            }
            //tempDetail.isNew = isNew;
            if (isNew)
            {
                inventoryMove.InventoryMoveDetail.Add(tempDetail);
                //db.Entry(tempDetail).State = EntityState.Added;
                //db.InventoryMoveDetail.Add(tempDetail);
            }
            else
            {
                //db.InventoryMoveDetail.Attach(tempDetail);
                //db.Entry(tempDetail).State = EntityState.Modified;
                db.Entry(tempDetail).State = EntityState.Modified;
                //db.Entry(tempDetail).State = isNew ? EntityState.Added : EntityState.Modified;
            }
            //db.SaveChanges();
            //if (thisToSave)
            //{
            //    db.SaveChanges();
            //}

            return tempDetail;
        }

        private static SequentialPar GetNatureSequential(User activeUser, Company activeCompany, DBContext db, bool isEntry, int id_warehouse)
        {
            string sequential = (1).ToString("D9");
            int iSeq = 1;
            var codeNature = isEntry ? "ING" : "EGR";
            var warehouseNatureSequentialAux = db.WarehouseNatureSequential.FirstOrDefault(fod => fod.id_warehouse == id_warehouse && fod.codeNature == codeNature);
            var warehouseAux = db.Warehouse.FirstOrDefault(fod => fod.id == id_warehouse);

            if (warehouseNatureSequentialAux == null)
            {
                warehouseNatureSequentialAux = new WarehouseNatureSequential
                {
                    id = 0,
                    codeNature = codeNature,
                    sequential = 2,
                    id_warehouse = warehouseAux.id,
                    Warehouse = warehouseAux,
                    isActive = true,
                    id_company = activeCompany.id,
                    id_userCreate = activeUser.id,
                    dateCreate = DateTime.Now,
                    id_userUpdate = activeUser.id,
                    dateUpdate = DateTime.Now
                };
                db.WarehouseNatureSequential.Add(warehouseNatureSequentialAux);
                db.WarehouseNatureSequential.Attach(warehouseNatureSequentialAux);
                db.Entry(warehouseNatureSequentialAux).State = EntityState.Added;
            }
            else
            {
                sequential = warehouseNatureSequentialAux.sequential.ToString("D9");
                iSeq = warehouseNatureSequentialAux.sequential;
                warehouseNatureSequentialAux.sequential++;
                db.WarehouseNatureSequential.Attach(warehouseNatureSequentialAux);
                db.Entry(warehouseNatureSequentialAux).State = EntityState.Modified;
            }

            db.SaveChanges();

            return new SequentialPar { sSequential = codeNature + sequential, iSequential = iSeq };
        }

        private static void UpdateStockItem(Item item, decimal quantity, DBContext db)
        {
            if (item?.ItemInventory != null)
            {
                item.ItemInventory.currentStock += quantity;
                db.Item.Attach(item);
                db.Entry(item).State = EntityState.Modified;
            }
        }

        public static ItemInventory UpdateStockInventoryItemOP(int id_item,
            int? id_itemWarehouse, int? id_itemWarehouseLocation, decimal quantity, DBContext db)
        {
            ItemInventory _itemInv = new ItemInventory();
            if (id_item > 0 && id_itemWarehouse > 0 && id_itemWarehouseLocation > 0)
            {
                _itemInv = db.ItemInventory
                                            .FirstOrDefault(fod => fod.id_item == id_item
                                            && fod.id_warehouse == id_itemWarehouse);
                if (_itemInv != null)
                {
                    decimal _currentStock = _itemInv.currentStock;
                    decimal _newStock = _currentStock + quantity;
                    _itemInv.currentStock = _newStock;

                }
            }
            return _itemInv;
        }

        public static void UpdateStockInventoryItem(int id_item,
            int? id_itemWarehouse, int? id_itemWarehouseLocation, decimal quantity, DBContext db)
        {
            if (id_item > 0 && id_itemWarehouse > 0 && id_itemWarehouseLocation > 0)
            {
                ItemInventory _itemInv = db.ItemInventory
                                            .FirstOrDefault(fod => fod.id_item == id_item
                                            && fod.id_warehouse == id_itemWarehouse);
                if (_itemInv != null)
                {
                    decimal _currentStock = _itemInv.currentStock;
                    decimal _newStock = _currentStock + quantity;
                    _itemInv.currentStock = _newStock;
                    #region Optimiza Codigo
                    //db.ItemInventory.Attach(_itemInv);
                    #endregion

                    db.Entry(_itemInv).State = EntityState.Modified;
                }
            }
        }

        private static void UpdateInventoryMoveDetailNext(InventoryMoveDetail InventoryMoveDetailCurrent, InventoryMoveDetail InventoryMoveDetailNext, DBContext db)
        {
            if (InventoryMoveDetailCurrent != null)
            {
                InventoryMoveDetailNext.InventoryMoveDetail4 = InventoryMoveDetailCurrent.InventoryMoveDetail4;
                InventoryMoveDetailNext.id_inventoryMoveDetailNext = InventoryMoveDetailCurrent.id_inventoryMoveDetailNext;

                if (InventoryMoveDetailNext.id != 0)
                {
                    db.InventoryMoveDetail.Attach(InventoryMoveDetailNext);
                    db.Entry(InventoryMoveDetailNext).State = EntityState.Modified;
                    InventoryMoveDetailCurrent.id_inventoryMoveDetailNext = InventoryMoveDetailNext.id;
                }

                InventoryMoveDetailCurrent.InventoryMoveDetail4 = InventoryMoveDetailNext;

                db.InventoryMoveDetail.Attach(InventoryMoveDetailCurrent);
                db.Entry(InventoryMoveDetailCurrent).State = EntityState.Modified;
                if (InventoryMoveDetailNext.InventoryMoveDetail4 != null)
                {
                    if (InventoryMoveDetailNext.id != 0)
                    {
                        InventoryMoveDetailNext.InventoryMoveDetail4.id_inventoryMoveDetailPrevious = InventoryMoveDetailNext.id;
                    }

                    InventoryMoveDetailNext.InventoryMoveDetail4.InventoryMoveDetail3 = InventoryMoveDetailNext;

                    db.InventoryMoveDetail.Attach(InventoryMoveDetailNext.InventoryMoveDetail4);
                    db.Entry(InventoryMoveDetailNext.InventoryMoveDetail4).State = EntityState.Modified;
                }
            }
            else
            {
                var firstMoveDetail =
                               db.InventoryMoveDetail.FirstOrDefault(d =>
                                                            d.InventoryMove.Document.DocumentState.code.Equals("03") &&
                                                            InventoryMoveDetailNext.id != d.id &&
                                                            d.id_lot == InventoryMoveDetailNext.id_lot &&
                                                            d.id_item == InventoryMoveDetailNext.id_item &&
                                                            d.id_warehouse == InventoryMoveDetailNext.Warehouse.id &&
                                                            d.id_warehouseLocation == InventoryMoveDetailNext.WarehouseLocation.id &&
                                                            d.inMaximumUnit == InventoryMoveDetailNext.inMaximumUnit &&
                                                            d.id_inventoryMoveDetailPrevious == null);
                if (firstMoveDetail != null)
                {
                    InventoryMoveDetailNext.InventoryMoveDetail4 = firstMoveDetail;
                    InventoryMoveDetailNext.id_inventoryMoveDetailNext = firstMoveDetail.id;

                    if (InventoryMoveDetailNext.id != 0)
                    {
                        db.InventoryMoveDetail.Attach(InventoryMoveDetailNext);
                        db.Entry(InventoryMoveDetailNext).State = EntityState.Modified;
                        firstMoveDetail.id_inventoryMoveDetailPrevious = InventoryMoveDetailNext.id;
                    }
                    firstMoveDetail.InventoryMoveDetail3 = InventoryMoveDetailNext;

                    db.InventoryMoveDetail.Attach(firstMoveDetail);
                    db.Entry(firstMoveDetail).State = EntityState.Modified;
                }
            }
        }

        private static void RemoveInventoryMoveDetail(InventoryMoveDetail inventoryMoveDetailToRemove, DBContext db, User activeUser)
        {
            if (inventoryMoveDetailToRemove.id_inventoryMoveDetailNext != null)
            {
                inventoryMoveDetailToRemove.InventoryMoveDetail4.id_inventoryMoveDetailPrevious = inventoryMoveDetailToRemove.id_inventoryMoveDetailPrevious;
                inventoryMoveDetailToRemove.InventoryMoveDetail4.InventoryMoveDetail3 = inventoryMoveDetailToRemove.InventoryMoveDetail3;

                db.InventoryMoveDetail.Attach(inventoryMoveDetailToRemove.InventoryMoveDetail4);
                db.Entry(inventoryMoveDetailToRemove.InventoryMoveDetail4).State = EntityState.Modified;
            }

            if (inventoryMoveDetailToRemove.id_inventoryMoveDetailPrevious != null)
            {
                inventoryMoveDetailToRemove.InventoryMoveDetail3.id_inventoryMoveDetailNext = inventoryMoveDetailToRemove.id_inventoryMoveDetailNext;
                inventoryMoveDetailToRemove.InventoryMoveDetail3.InventoryMoveDetail4 = inventoryMoveDetailToRemove.InventoryMoveDetail4;

                db.InventoryMoveDetail.Attach(inventoryMoveDetailToRemove.InventoryMoveDetail3);
                db.Entry(inventoryMoveDetailToRemove.InventoryMoveDetail3).State = EntityState.Modified;
            }
            UpdateBalancesAndCosts(inventoryMoveDetailToRemove.InventoryMoveDetail4, db, activeUser);

            inventoryMoveDetailToRemove.InventoryMoveDetail3 = null;
            inventoryMoveDetailToRemove.id_inventoryMoveDetailPrevious = null;

            inventoryMoveDetailToRemove.InventoryMoveDetail4 = null;
            inventoryMoveDetailToRemove.id_inventoryMoveDetailNext = null;

            db.InventoryMoveDetail.Attach(inventoryMoveDetailToRemove);
            db.Entry(inventoryMoveDetailToRemove).State = EntityState.Modified;
        }

        #region RA  | Optimizacion Fx Inventario - 003
        internal static Tuple<DocumentType, int, string, int> GetDocumentTypeSequentialAndNumber(string codigoDocumentType, DBContext db, Company activeCompany, EmissionPoint ActiveEmissionPoint = null)
        {
            DocumentType documentType = db.DocumentType.FirstOrDefault(d => d.code == codigoDocumentType && d.id_company == activeCompany.id);

            if (documentType == null) throw new Exception("El tipo de documento a intentar procesar no esta configurado");

            string documentNumber = string.Empty;
            if (ActiveEmissionPoint != null)
            {
                documentNumber = $"{ActiveEmissionPoint.BranchOffice.code.ToString().PadLeft(3, '0')}-{ActiveEmissionPoint.code.ToString().PadLeft(3, '0')}-{(documentType?.currentNumber ?? 0)}";
            }


            int sequential = (documentType?.currentNumber ?? 0);
            int next = sequential + 1;
            return new Tuple<DocumentType, int, string, int>(documentType, sequential, documentNumber, next);
        }
        #endregion RA  | Optimizacion Fx Inventario - 003

        protected static int GetDocumentSequential(int id_documentType, DBContext db, Company activeCompany)
        {
            DocumentType documentType = db.DocumentType.FirstOrDefault(d => d.id == id_documentType && d.id_company == activeCompany.id);
            return documentType?.currentNumber ?? 0;
        }

        protected static string GetDocumentNumber(int id_documentType, DBContext db, Company ActiveCompany, EmissionPoint ActiveEmissionPoint)
        {
            string number = GetDocumentSequential(id_documentType, db, ActiveCompany).ToString().PadLeft(9, '0');
            string documentNumber = string.Empty;
            documentNumber = $"{ActiveEmissionPoint.BranchOffice.code.ToString().PadLeft(3, '0')}-{ActiveEmissionPoint.code.ToString().PadLeft(3, '0')}-{number}";
            return documentNumber;
        }

        public static WarehouseLocation GetWarehouseLocationProvider(
                int? id_provider,
                DBContext db,
                Company activeCompany,
                User activeUser

                )
        {
            Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == id_provider);
            Warehouse warehouseAux = db.Warehouse.FirstOrDefault(fod => fod.code == "VIRPRO");

            var warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id_person == id_provider);
            if (id_provider == null)
            {
                warehouseLocationAux = null;
            }
            else
            {
                if (warehouseLocationAux == null && warehouseAux != null)
                {
                    warehouseLocationAux = new WarehouseLocation
                    {
                        code = "PRO" + id_provider,
                        id_warehouse = warehouseAux.id,
                        Warehouse = warehouseAux,
                        name = "Ubicación Proveedor: " + providerAux.Person.fullname_businessName,
                        description = "Ubicación Proveedor: " + providerAux.Person.fullname_businessName,
                        id_person = id_provider,
                        Person = providerAux.Person,
                        isRolling = false,
                        isActive = true,
                        id_company = activeCompany.id,
                        id_userCreate = activeUser.id,
                        dateCreate = DateTime.Now,
                        id_userUpdate = activeUser.id,
                        dateUpdate = DateTime.Now
                    };

                    db.WarehouseLocation.Add(warehouseLocationAux);

                    db.SaveChanges();
                }
            }
            return warehouseLocationAux;
        }


        #endregion Auxiliar

        #region SAVE

        public static string Save(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";
            try
            {
                if (inventoryMove.InventoryEntryMove != null && inventoryMove.InventoryExitMove == null)
                {
                    result = SaveEntryMove(inventoryMove, db);
                }
                else if (inventoryMove.InventoryExitMove != null && inventoryMove.InventoryEntryMove == null)
                {
                    result = SaveExitMove(inventoryMove, db);
                }
                else if (inventoryMove.InventoryExitMove != null && inventoryMove.InventoryEntryMove != null)
                {
                    result = SaveTransfeMove(inventoryMove, db);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        private static string SaveEntryMove(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";

            try
            {
                var model = db.InventoryMove;

                if (inventoryMove.InventoryMoveDetail != null)
                {
                    foreach (var inventoryDetail in inventoryMove.InventoryMoveDetail)
                    {
                        decimal quantity = inventoryDetail.entryAmount;

                        foreach (var purchaseDetail in inventoryDetail.InventoryMoveDetailPurchaseOrder)
                        {
                            PurchaseOrderDetail orderDetail = db.PurchaseOrderDetail.FirstOrDefault(d => d.id_purchaseOrder == purchaseDetail.id_purchaseOrder && d.id_item == inventoryDetail.id_item);
                            if (orderDetail != null)
                            {
                                decimal remainingQuantity = orderDetail.quantityApproved - orderDetail.quantityReceived;

                                if (remainingQuantity <= quantity)
                                {
                                    orderDetail.quantityReceived += remainingQuantity;
                                    quantity -= remainingQuantity;
                                }
                                else
                                {
                                    orderDetail.quantityReceived += quantity;
                                    quantity = 0.0M;
                                }

                                if (quantity > 0.0M && purchaseDetail == inventoryDetail.InventoryMoveDetailPurchaseOrder.Last())
                                {
                                    orderDetail.quantityReceived += quantity;
                                    quantity = 0.0M;
                                }
                            }
                        }
                    }
                }

                model.Add(inventoryMove);
                db.SaveChanges();
            }
            catch (Exception e)
            {
                result = e.Message;
            }

            return result;
        }

        private static string SaveExitMove(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";

            try
            {
                var model = db.InventoryMove;

                if (inventoryMove.InventoryMoveDetail != null)
                {
                    foreach (var inventoryDetail in inventoryMove.InventoryMoveDetail)
                    {
                        decimal quantity = inventoryDetail.exitAmount;
                    }
                }

                model.Add(inventoryMove);
                db.SaveChanges();
            }
            catch (Exception e)
            {
                result = e.Message;
            }

            return result;
        }

        private static string SaveTransfeMove(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";

            try
            {
                var model = db.InventoryMove;

                model.Add(inventoryMove);
                db.SaveChanges();
            }
            catch (Exception e)
            {
                result = e.Message;
            }

            return result;
        }

        #endregion SAVE

        #region COMMIT

        public static string Commit(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";
            try
            {
                if (inventoryMove.InventoryEntryMove != null && inventoryMove.InventoryExitMove == null)
                {
                    result = CommitEntryMove(inventoryMove, db);
                }
                else if (inventoryMove.InventoryExitMove != null && inventoryMove.InventoryEntryMove == null)
                {
                    result = CommitExitMove(inventoryMove, db);
                }
                else if (inventoryMove.InventoryExitMove != null && inventoryMove.InventoryEntryMove != null)
                {
                    result = CommitTransfeMove(inventoryMove, db);
                }
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }

            return result;
        }

        private static string CommitEntryMove(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";

            try
            {
                if (inventoryMove.InventoryMoveDetail != null)
                {
                    foreach (var inventoryDetail in inventoryMove.InventoryMoveDetail)
                    {
                        decimal quantity = inventoryDetail.entryAmount;

                        foreach (var purchaseDetail in inventoryDetail.InventoryMoveDetailPurchaseOrder)
                        {
                            PurchaseOrderDetail orderDetail = db.PurchaseOrderDetail.FirstOrDefault(d => d.id_purchaseOrder == purchaseDetail.id_purchaseOrder && d.id_item == inventoryDetail.id_item);
                            if (orderDetail != null)
                            {
                                Item item = db.Item.FirstOrDefault(i => i.id == inventoryDetail.id_item);
                                if (item?.ItemInventory != null)
                                {
                                    item.ItemInventory.currentStock += quantity;
                                }
                            }
                        }

                        if (!inventoryDetail.InventoryMove.Document.DocumentState.code.Equals("03") &&
                            !inventoryDetail.InventoryMove.Document.DocumentState.code.Equals("06"))
                        {
                            List<InventoryMoveDetail> lastsMoveDetails =
                            db.InventoryMoveDetail.Where(d =>
                                                         d.id_lot == inventoryDetail.id_lot &&
                                                         d.id_item == inventoryDetail.id_item &&
                                                         d.id_warehouse == inventoryDetail.id_warehouse &&
                                                         d.id_warehouseLocation == inventoryDetail.id_warehouseLocation &&
                                                         (d.InventoryMove.Document.DocumentState.code.Equals("03") ||
                                                          d.InventoryMove.Document.DocumentState.code.Equals("06"))).ToList();

                            lastsMoveDetails = lastsMoveDetails.OrderByDescending(d => d.dateUpdate).ToList();

                            InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                                    ? lastsMoveDetails.First()
                                                                    : null;

                            inventoryDetail.balance = (lastInventoryMove?.balance ?? 0) + quantity;
                        }

                        inventoryDetail.dateUpdate = DateTime.Now;
                    }
                }

                db.InventoryMove.Attach(inventoryMove);
                db.Entry(inventoryMove).State = EntityState.Modified;
            }
            catch (Exception e)
            {
                result = e.Message;
            }

            return result;
        }

        private static string CommitExitMove(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";

            try
            {
                if (inventoryMove.InventoryMoveDetail != null)
                {
                    foreach (var inventoryDetail in inventoryMove.InventoryMoveDetail)
                    {
                        decimal quantity = inventoryDetail.exitAmount;

                        Item item = db.Item.FirstOrDefault(i => i.id == inventoryDetail.id_item);
                        if (item?.ItemInventory != null)
                        {
                            item.ItemInventory.currentStock -= quantity;
                        }

                        if (!inventoryDetail.InventoryMove.Document.DocumentState.code.Equals("03") &&
                            !inventoryDetail.InventoryMove.Document.DocumentState.code.Equals("06"))
                        {
                            List<InventoryMoveDetail> lastsMoveDetails =
                            db.InventoryMoveDetail.Where(d =>
                                                         d.id_lot == inventoryDetail.id_lot &&
                                                         d.id_item == inventoryDetail.id_item &&
                                                         d.id_warehouse == inventoryDetail.id_warehouse &&
                                                         d.id_warehouseLocation == inventoryDetail.id_warehouseLocation &&
                                                         (d.InventoryMove.Document.DocumentState.code.Equals("03") ||
                                                          d.InventoryMove.Document.DocumentState.code.Equals("06"))).ToList();

                            lastsMoveDetails = lastsMoveDetails.OrderByDescending(d => d.dateUpdate).ToList();

                            InventoryMoveDetail lastInventoryMove = (lastsMoveDetails.Count > 0)
                                                                    ? lastsMoveDetails.First()
                                                                    : null;

                            inventoryDetail.balance = (lastInventoryMove?.balance ?? 0) - quantity;
                        }

                        inventoryDetail.dateUpdate = DateTime.Now;
                    }
                }

                db.InventoryMove.Attach(inventoryMove);
                db.Entry(inventoryMove).State = EntityState.Modified;
            }
            catch (Exception e)
            {
                result = e.Message;
            }

            return result;
        }

        private static string CommitTransfeMove(InventoryMove inventoryMove, DBContext db)
        {
            string result = "";

            try
            {
                db.InventoryMove.Attach(inventoryMove);
                db.Entry(inventoryMove).State = EntityState.Modified;
            }
            catch (Exception e)
            {
                result = e.Message;
            }

            return result;
        }

        #endregion COMMIT

        #region UpdateInventoryMoveLogisticsFixed

        public static string UpdateInventaryMoveTransferDispatchMaterialsLogisticFixed(User ActiveUser,
                                                        Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
                                                        RemissionGuide remissionGuide, DBContext db,
                                                        bool reverse
                                                        , DateTime? dtTransaction
                                                        , InventoryMove inventoryMoveToReverseExit = null,
                                                        InventoryMove inventoryMoveToReverseEntry = null,
                                                        bool isInSameTransaction = false,
                                                        List<RequestInventoryMoveDetailModelP> lstRimDetail = null,
                                                        int id_rim = 0,
                                                        int? idWarehouse = 0)
        {
            string result = "";
            string str_item = "";
            try
            {
                #region Check a Param of Exit automatic

                var aprobarReversarSE = reverse ? "Reversarse" : "Aprobarse";
                Setting settingAEMD = db.Setting.FirstOrDefault(t => t.code == "AEMD");
                Setting settingFechaMovimientoInventario = db.Setting.FirstOrDefault(fod => fod.code.Equals("FAMIMA"));

                bool isDateManual = false;
                if (settingFechaMovimientoInventario != null)
                    isDateManual = settingFechaMovimientoInventario.value.Equals("Y") ? true : false;

                if (settingAEMD == null)
                {
                    throw new Exception("No puede " + aprobarReversarSE + " la Guía debido a no estar configurado el Parámetro de: Automático Egreso de Materiales de Despacho con código(AEMD) " +
                                        "necesario para egresar los materiales de despacho de manera automática o no");
                }

                if (settingAEMD.value == "0")
                {
                    return result;
                }

                #endregion Check a Param of Exit automatic

                #region Get Last InventoryMoveDetail

                List<ItemInvMoveDetail> _lstInvDetail = new List<ItemInvMoveDetail>();
                List<ItemInvMoveDetail> _lstInvDetailProvider = new List<ItemInvMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();
                if (lstRimDetail != null && lstRimDetail.Count() > 0)
                {
                    var lstIdRimDetail = lstRimDetail.Select(s => s.id_item).ToList();
                    itemDetail = itemDetail.Where(w => lstIdRimDetail.Contains(w.id_item)).ToList();
                }

                #endregion Get Last InventoryMoveDetail

                int id_WarehouseProvider = 0;

                DateTime dt = DateTime.Now;

                if (isDateManual && dtTransaction != null)
                    dt = (DateTime)dtTransaction;
                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(dt);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(dt);

                #region SOLUTION FOR INVENTORY MOVE DETAIL

                foreach (var _detMat in itemDetail)
                {
                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverseExit.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == _detMat.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Setting settingUUDEMD = db.Setting.FirstOrDefault(t => t.code == "UUDEMD");
                        var id_warehouseLocationAuxInt = _detMat.id_warehouselocation;
                        if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                        {
                            Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                            if (settingUDLI == null)
                            {
                                throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                    "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }

                            var id_inventoryLineAux = _detMat.Item.id_inventoryLine.ToString();
                            var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                            if (id_warehouseLocationAux == null)
                            {
                                throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                " para la linea de inventario " + _detMat.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }
                            id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                        }
                        id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? _detMat.Item.ItemInventory.id_warehouseLocation;
                        warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);
                    }
                    if (warehouseLocationAux != null)
                    {
                        str_item = str_item + _detMat.id_item.ToString() + ","
                        + warehouseLocationAux.Warehouse.id.ToString() + ","
                        + warehouseLocationAux.id.ToString() + ",;";
                    }
                }

                #region QUERY LAST INVENTORYMOVEDETAIL

                ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                _param.str_item = str_item;
                _param.emissiondate = dt.ToIsoDateFormat();
                _param.houremissiondate = dtHourEmissionDate;

                _lstInvDetail = GetLastMoveDetail(_param);

                #endregion QUERY LAST INVENTORYMOVEDETAIL

                #endregion SOLUTION FOR INVENTORY MOVE DETAIL

                str_item = "";

                #region SOLUTION FOR INVENTORY MOVE DETAIL

                foreach (var _detMat in itemDetail)
                {
                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverseExit.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == _detMat.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProvider(remissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);

                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                        else
                        {
                            id_WarehouseProvider = warehouseLocationAux.Warehouse.id;
                        }
                    }
                    if (warehouseLocationAux != null)
                    {
                        str_item = str_item + _detMat.id_item.ToString() + ","
                        + warehouseLocationAux.Warehouse.id.ToString() + ","
                        + warehouseLocationAux.id.ToString() + ",;";
                    }
                }

                #region QUERY LAST INVENTORYMOVEDETAIL

                ParamForQueryInvMoveDetail _param2 = new ParamForQueryInvMoveDetail();
                _param2.str_item = str_item;
                _param2.emissiondate = dt.ToIsoDateFormat();
                _param2.houremissiondate = dtHourEmissionDate;

                _lstInvDetailProvider = GetLastMoveDetail(_param2);

                #endregion QUERY LAST INVENTORYMOVEDETAIL

                #endregion SOLUTION FOR INVENTORY MOVE DETAIL

                var inventoryMoveExit = UpdateInventaryMoveExitDispatchMaterialsLogisticFixed(ActiveUser
                    , ActiveCompany, ActiveEmissionPoint, remissionGuide, db, reverse
                    , dt, inventoryMoveToReverseExit, null, false, lstRimDetail, id_rim, _lstInvDetail, idWarehouse);
                UpdateInventaryMoveEntryDispatchMaterialsLogisticFixed(ActiveUser, ActiveCompany
                    , ActiveEmissionPoint, remissionGuide, db, reverse, dt
                    , inventoryMoveToReverseEntry, inventoryMoveExit, true
                    , lstRimDetail, id_rim, _lstInvDetailProvider, id_WarehouseProvider);
            }
            catch (Exception e)
            {
                result = e.Message;
                throw e;
            }
            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryDispatchMaterialsLogisticFixed(User ActiveUser,
                                                        Company ActiveCompany, EmissionPoint ActiveEmissionPoint,
                                                        RemissionGuide remissionGuide, DBContext db, bool reverse, DateTime dtNew
                                                        , InventoryMove inventoryMoveToReverse = null,
                                                        InventoryMove inventoryMoveExit = null,
                                                        bool isInSameTransaction = false,
                                                        List<RequestInventoryMoveDetailModelP> lstRimDetail = null,
                                                        int id_rim = 0, List<ItemInvMoveDetail> lstLastInv = null,
                                                        int? idWarehouse = 0, bool isDateManual = false)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            _IinvMd = lstLastInv;
            int idCCsett = 0, idSCCsett = 0;

            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;
                bool _validate = inventoryMoveToReverse != null ? true : false;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, _validate, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse == null)
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = dtNew;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = dtNew;
                    document.emissionDate = dtNew;
                }
                else
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, remissionGuide.Document, db);
                Document _doRim = db.Document.FirstOrDefault(fod => fod.id == id_rim);
                if (_doRim != null)
                {
                    UpdateDocumentSource(document, _doRim, db);
                }
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("IPTAMDL"));
                inventoryMove.InventoryReason = inventoryReason ?? throw new Exception("No puede Aprobarse la Guía debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Materiales de Despacho en Logistica con código(IPTAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryEntryMove = new InventoryEntryMove
                {
                    id_warehouseEntry = null,
                    id_warehouseLocationEntry = null,
                    id_receiver = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateEntry = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();
                if (lstRimDetail != null && lstRimDetail.Count() > 0)
                {
                    var lstIdRimDetail = lstRimDetail.Select(s => s.id_item).ToList();
                    itemDetail = itemDetail.Where(w => lstIdRimDetail.Contains(w.id_item)).ToList();
                }

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProvider(remissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationAux == null)
                        {
                            throw new Exception("No puede Aprobarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = lstRimDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.quantityUpdate ?? i.sourceExitQuantity;

                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;
                    InventoryMoveDetail inventoryMoveDetailExitAux = null;

                    #region APROBAR

                    Setting settingUUDEMD = db.Setting.FirstOrDefault(t => t.code == "UUDEMD");
                    var id_warehouseLocationAuxInt = i.id_warehouselocation;
                    if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                    {
                        Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                        id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                    }

                    id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? i.Item.ItemInventory.id_warehouseLocation;
                    var warehouseLocation2Aux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);

                    inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                        fod.id_item == i.id_item &&
                                                                                                        fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                        fod.id_warehouseLocation == warehouseLocation2Aux.id);

                    #endregion APROBAR

                    unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                    unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux
                                                                                , id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false
                                                                                , unitPriceInvAux, warehouseLocationAux.Warehouse.id
                                                                                , warehouseLocationAux.id, lastInventoryMove, inventoryMove
                                                                                , ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Guía debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (!reverse)
                    {
                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = amountMoveAux
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, amountInvAux, db);
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitDispatchMaterialsLogisticFixed(User ActiveUser, Company ActiveCompany,
                                                        EmissionPoint ActiveEmissionPoint, RemissionGuide remissionGuide,
                                                        DBContext db, bool reverse, DateTime dtNew,
                                                        InventoryMove inventoryMoveToReverse = null,
                                                        InventoryMove inventoryMoveExit = null,
                                                        bool isInSameTransaction = false,
                                                        List<RequestInventoryMoveDetailModelP> lstRimDetail = null,
                                                        int id_rim = 0, List<ItemInvMoveDetail> lstLastInv = null,
                                                        int? idWarehouse = 0, bool isDateManual = false)
        {
            InventoryMove result = null;
            int id_imd;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            _IinvMd = lstLastInv;
            int idCCsett = 0, idSCCsett = 0;

            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;
                bool _validate = inventoryMoveToReverse != null ? true : false;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, _validate, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = db
                                    .Setting
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = db.SettingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse == null)
                {
                    document.dateCreate = dtNew;
                    document.dateUpdate = dtNew;
                    document.emissionDate = dtNew;
                }
                else
                {
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }

                document.id_userCreate = ActiveUser.id;
                document.id_userUpdate = ActiveUser.id;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, remissionGuide.Document, db);
                Document _doRim = db.Document.FirstOrDefault(fod => fod.id == id_rim);
                if (_doRim != null)
                {
                    UpdateDocumentSource(document, _doRim, db);
                }
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.code.Equals("EPTAMDL"));

                if (inventoryReason == null)
                {
                    throw new Exception("No puede Aprobarse la Guia debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Materiales de Despacho en Logistica con código(EPTAMDL) necesario para realizar la transferencia de Materiales de Despacho en Logística, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }

                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;
                inventoryMove.isAuthomatic = true;
                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();
                if (lstRimDetail != null && lstRimDetail.Count() > 0)
                {
                    var lstIdRimDetail = lstRimDetail.Select(s => s.id_item).ToList();
                    itemDetail = itemDetail.Where(w => lstIdRimDetail.Contains(w.id_item)).ToList();
                }

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    Setting settingUUDEMD = db.Setting.FirstOrDefault(t => t.code == "UUDEMD");
                    var id_warehouseLocationAuxInt = i.id_warehouselocation;
                    if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                    {
                        Setting settingUDLI = db.Setting.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new Exception("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                        id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                    }
                    id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? i.Item.ItemInventory.id_warehouseLocation;
                    warehouseLocationAux = db.WarehouseLocation.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = lstRimDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.quantityUpdate ?? i.sourceExitQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux,
                                                                                id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser,
                                                                               ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new Exception("No puede " + action + " la Guía debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailExitDispatchMaterials = i.InventoryMoveDetailExitDispatchMaterials.FirstOrDefault(fod => fod.id_remissionGuideDispatchMaterial == i.id);
                        i.InventoryMoveDetailExitDispatchMaterials.Remove(detailInventoryMoveDetailExitDispatchMaterials);
                        db.Entry(detailInventoryMoveDetailExitDispatchMaterials).State = EntityState.Deleted;

                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        WarehouseLocation warehouseLocationProviderAux = GetWarehouseLocationProvider(remissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationProviderAux == null)
                        {
                            throw new Exception("No puede Reversarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                        var inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == warehouseLocationProviderAux.Warehouse.id &&
                                                                                                           fod.id_warehouseLocation == warehouseLocationProviderAux.id);

                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = amountMoveAux
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                    else
                    {
                        i.InventoryMoveDetailExitDispatchMaterials = new List<InventoryMoveDetailExitDispatchMaterials>();
                        var newInventoryMoveDetailExitDispatchMaterials = new InventoryMoveDetailExitDispatchMaterials
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_remissionGuideDispatchMaterial = i.id,
                            RemissionGuideDispatchMaterial = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailExitDispatchMaterials.Add(newInventoryMoveDetailExitDispatchMaterials);
                    }

                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, -amountInvAux, db);
                }

                #endregion Details
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        #endregion UpdateInventoryMoveLogisticsFixed

        #region Inventory Move Liquidation Material
        #region CR Optimizacion Codigo 
        public static InventoryMove UpdateInventoryMoveLiquidationMaterialExit(User ActiveUser, Company ActiveCompany,
                                                        EmissionPoint ActiveEmissionPoint, LiquidationMaterialSupplies liqMatSupplies,
                                                        DBContext db, bool reverse, DateTime dtNew,
                                                        Setting[] settings, SettingDetail[] settingDetail,
                                                        DocumentState[] documentStateList,
                                                        EmissionPoint[] emissionPoint,
                                                        WarehouseLocation[] warehouseLocations,
                                                        InventoryMove inventoryMoveToReverse = null,
                                                        InventoryMove inventoryMoveExit = null,
                                                        List<LiquidationMaterialSuppliesDetail> lstLiqMatDetail = null,
                                                        int id_rg = 0, int? idWarehouse = 0, int? idWarehouseLocation = 0,
                                                        int idDocType = 0, int idInventoryReason = 0)
        {
            InventoryMove result = null;
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;
                bool _validate = inventoryMoveToReverse != null ? true : false;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, _validate, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = settings
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = settingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = settingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.id == idDocType);
                document.DocumentType = documentType;
                document.id_documentType = idDocType;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse == null)
                {
                    document.dateCreate = dtNew;
                    document.dateUpdate = dtNew;
                    document.emissionDate = dtNew;
                }
                else
                {
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }

                document.id_userCreate = ActiveUser.id;
                document.id_userUpdate = ActiveUser.id;

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    //db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, liqMatSupplies.Document, db, false);

                Document _doRg = db.Document.FirstOrDefault(fod => fod.id == id_rg);
                if (_doRg != null)
                {
                    UpdateDocumentSource(document, _doRg, db);
                }
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region Fecha Emision

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion Fecha Emision

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == idInventoryReason);
                inventoryMove.InventoryReason = inventoryReason ?? throw new Exception("No puede Autorizarse la Liquidación debido a que no existe el Motivo de Inventario del Sistema, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;
                inventoryMove.isAuthomatic = true;
                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = lstLiqMatDetail.ToList();

                foreach (var i in itemDetail)
                {
                    WarehouseLocation warehouseLocationAux = null;

                    Setting settingUUDEMD = settings.FirstOrDefault(t => t.code == "UUDEMD");

                    if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                    {
                        Setting settingUDLI = settings.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new ProdHandlerException("No se pudo autorizar la Liquidación porque no se pudo Egresar debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new ProdHandlerException("No se pudo autorizar la Liquidación porque no se pudo Egresar debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                    }

                    warehouseLocationAux = warehouseLocations.FirstOrDefault(fod => fod.id == idWarehouseLocation);

                    decimal amountMoveAux = i.quantity ?? 0;

                    amountMoveAux = amountMoveAux > 0 ? amountMoveAux : amountMoveAux * -1;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(false, amountInvAux, i.idItem, null, id_metricUnitInvAux,
                                                                                id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, null, inventoryMove, ActiveUser,
                                                                               ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.idItem, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new ProdHandlerException("No puede " + action + " la Liquídación debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == liqMatSupplies.idProvider);
                    WarehouseLocation warehouseLocationProviderAux = GetWarehouseLocationProvider(liqMatSupplies.idProvider, db, ActiveCompany, ActiveUser);
                    if (warehouseLocationProviderAux == null)
                    {
                        throw new ProdHandlerException("No puede Reversarse la Liquídación debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }

                    UpdateStockInventoryItem(i.idItem, idWarehouse, idWarehouseLocation, -amountInvAux, db);
                }

                #endregion Details
            }
            catch (ProdHandlerException e)
            {
                throw e;
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }





        public static InventoryMove UpdateInventoryMoveLiquidationMaterialEntry(User ActiveUser, Company ActiveCompany,
                                                        EmissionPoint ActiveEmissionPoint, LiquidationMaterialSupplies liqMatSupplies,
                                                        DBContext db, bool reverse, DateTime dtNew,
                                                         Setting[] settings, SettingDetail[] settingDetail,
                                                        DocumentState[] documentStateList,
                                                        EmissionPoint[] emissionPoint,
                                                        WarehouseLocation[] warehouseLocations,
                                                        InventoryMove inventoryMoveToReverse = null,
                                                        InventoryMove inventoryMoveExit = null,
                                                        List<LiquidationMaterialSuppliesDetail> lstLiqMatDetail = null,
                                                        int id_rg = 0, int? idWarehouse = 0, int? idWarehouseLocation = 0,
                                                        int idDocType = 0, int idInventoryReason = 0)
        {
            InventoryMove result = null;
            int idCCsett = 0, idSCCsett = 0;
            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;
                bool _validate = inventoryMoveToReverse != null ? true : false;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, _validate, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = settings
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = settingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = settingDetail
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                    && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                DocumentType documentType = db.DocumentType.FirstOrDefault(t => t.id == idDocType);
                document.DocumentType = documentType;
                document.id_documentType = idDocType;

                DocumentState documentState = db.DocumentState.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = db.EmissionPoint.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse == null)
                {
                    document.dateCreate = dtNew;
                    document.dateUpdate = dtNew;
                    document.emissionDate = dtNew;
                }
                else
                {
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }

                document.sequential = GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentType.currentNumber + 1;
                    //db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, liqMatSupplies.Document, db, false);
                Document _doRim = db.Document.FirstOrDefault(fod => fod.id == id_rg);
                if (_doRim != null)
                {
                    UpdateDocumentSource(document, _doRim, db);
                }
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                var inventoryReason = db.InventoryReason.FirstOrDefault(fod => fod.id == idInventoryReason);
                inventoryMove.InventoryReason = inventoryReason ?? throw new Exception("No puede Autorizarse la Liquidación debido a que no existe el Motivo de Inventario del Sistema, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryEntryMove = new InventoryEntryMove
                {
                    id_warehouseEntry = null,
                    id_warehouseLocationEntry = null,
                    id_receiver = ActiveUser.id_employee ?? 0,
                    Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateEntry = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;
                inventoryMove.isAuthomatic = true;
                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = lstLiqMatDetail.ToList();

                foreach (var i in itemDetail)
                {
                    WarehouseLocation warehouseLocationAux = null;

                    Setting settingUUDEMD = settings.FirstOrDefault(t => t.code == "UUDEMD");

                    if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                    {
                        Setting settingUDLI = settings.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new Exception("No se pudo autorizar la Liquidación porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new Exception("No se pudo autorizar la Liquidación porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                    }

                    warehouseLocationAux = warehouseLocations.FirstOrDefault(fod => fod.id == idWarehouseLocation);

                    decimal amountMoveAux = i.quantity ?? 0;

                    amountMoveAux = amountMoveAux > 0 ? amountMoveAux : amountMoveAux * -1;

                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new Exception("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(true, amountInvAux, i.idItem, null, id_metricUnitInvAux,
                                                                                id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, null, inventoryMove, ActiveUser,
                                                                               ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.idItem, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new ProdHandlerException("No puede " + action + " la Liquidación debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == liqMatSupplies.idProvider);
                    WarehouseLocation warehouseLocationProviderAux = GetWarehouseLocationProvider(liqMatSupplies.idProvider, db, ActiveCompany, ActiveUser);
                    if (warehouseLocationProviderAux == null)
                    {
                        throw new ProdHandlerException("No puede Reversarse la Liquidación debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                            providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                    }

                    UpdateStockInventoryItem(i.idItem, idWarehouse, idWarehouseLocation, -amountInvAux, db);
                }

                #endregion Details
            }
            catch (ProdHandlerException e)
            {
                throw e;
            }
            catch (Exception e)
            {
                throw e;
            }

            return result;
        }

        #endregion

        #endregion Inventory Move Liquidation Material

        #region Service Request Inventory Move

        public static IEnumerable KardexResults()
        {
            return null;
        }

        #endregion Service Request Inventory Move

        #region Auxiliar Get Balance

        public static decimal GetWarehouseBalance(int? idWarehouse, int? idItem, DBContext db, DateTime? dt = null)
        {
            var lstInvMoveDetail = db.InventoryMoveDetail
                                        .Where(w => w.InventoryMove.idWarehouse == idWarehouse
                                        && w.id_item == idItem
                                        && w.InventoryMove.Document.DocumentState.code.Equals("03"));

            var balance = (from a in lstInvMoveDetail
                           select a.entryAmount - a.exitAmount).Sum();

            return balance;
        }

        public class SaldoProductoLote
        {
            public int id_item { get; set; }
            public int? id_lote { get; set; }
            public decimal saldo { get; set; }
            public string lot_market { get; set; }
            public string number { get; set; }
            public string internalNumber { get; set; }
            public int id_metricUnit { get; set; }
            public DateTime? receptionDate { get; set; }
            public int? id_warehouseLocation { get; set; }
        }

        public decimal GetSaldosProductoLote(int companyId, int id_lot, DateTime? fechaEmision = null)
        {

            var resultItemsLotSaldo = ServiceInventoryBalance.ValidateBalanceGeneral(new InvParameterBalanceGeneral
            {
                requiresLot = true,
                id_Warehouse = null,
                id_WarehouseLocation = null,
                id_Item = null,
                id_ProductionLot = id_lot,
                lotMarket = null,
                id_productionCart = null,
                cut_Date = fechaEmision,
                id_company = companyId,
                consolidado = true,
                groupby = ServiceInventoryGroupBy.GROUPBY_ITEM_LOTE

            }, modelSaldoProductlote: true);
            var saldos = resultItemsLotSaldo.Item2;
            return saldos
                       .Sum(e => e.saldo);

            //return GetSaldosProductoLote(true,
            //    null, null, null, id_lot, null, fechaEmision, null)
            //    .Sum(e => e.saldo);
        }

        public decimal GetSaldosProductoLoteFinalize(int companyId, int id_lot, DateTime? fechaEmision = null)
        {
            return GetSaldosProductoLote(true,
                null, null, null, id_lot, null, fechaEmision, null)
                .Sum(e => e.saldo);
        }


        public SaldoProductoLote[] GetSaldosProductoLote(bool requiresLot,
            int? id_warehouse, int? id_warehouseLocation = null, int? id_item = null,
            int? id_lot = null, string lotMarket = null, DateTime? fechaEmision = null,
            int? id_productionCart = null)
        {
            var sqlParam = new[]
            {
                new ParamSQL()
                {
                    Nombre = "@requiresLot",
                    TipoDato = DbType.Boolean,
                    Valor = requiresLot,
                },
                new ParamSQL()
                {
                    Nombre = "@id_warehouse",
                    TipoDato = DbType.Int64,
                    Valor = id_warehouse,
                },
                new ParamSQL()
                {
                    Nombre = "@id_warehouseLocation",
                    TipoDato = DbType.Int64,
                    Valor = id_warehouseLocation,
                },
                new ParamSQL()
                {
                    Nombre = "@id_item",
                    TipoDato = DbType.Int64,
                    Valor = id_item,
                },
                new ParamSQL()
                {
                    Nombre = "@id_lot",
                    TipoDato = DbType.Int64,
                    Valor = id_lot,
                },
                new ParamSQL()
                {
                    Nombre = "@lotMarket",
                    TipoDato = DbType.String,
                    Valor = lotMarket,
                },
                new ParamSQL()
                {
                    Nombre = "@fechaEmision",
                    TipoDato = DbType.Int64,
                    Valor = fechaEmision.HasValue
                        ? (int?)(fechaEmision.Value.Year * 10000 + fechaEmision.Value.Month * 100 + fechaEmision.Value.Day)
                        : null,
                },
                new ParamSQL()
                {
                    Nombre = "@id_productionCart",
                    TipoDato = DbType.Int64,
                    Valor = id_productionCart,
                },
            };

            string _cadenaConexion = ConfigurationManager.ConnectionStrings["DBContextNE"].ConnectionString;
            string _rutaLog = (string)ConfigurationManager.AppSettings["rutaLog"];

            DataSet dataSet = AccesoDatos.MSSQL.MetodosDatos2
                .ObtieneDatos(_cadenaConexion, "Get_Saldo_Lote_Producto", _rutaLog,
                    "ServiceInventoryMove", "PROD", sqlParam.ToList());

            if (dataSet != null && dataSet.Tables.Count > 0)
            {
                var resultados = dataSet.Tables[0].AsEnumerable();

                return resultados
                    .Select(e => new SaldoProductoLote()
                    {
                        id_item = e.Field<Int32>("id_item"),
                        id_lote = e.Field<Int32?>("id_lote"),
                        saldo = e.Field<Decimal>("saldo"),
                        lot_market = e.Field<String>("lot_market"),
                        number = e.Field<String>("number"),
                        id_metricUnit = e.Field<Int32>("unidadMedida"),
                        internalNumber = e.Field<String>("internalNumber"),
                        receptionDate = e.Field<DateTime?>("receptionDate"),
                    })
                    .ToArray();
            }
            else
            {
                return new SaldoProductoLote[] { };
            }
        }

        #endregion Auxiliar Get Balance

        #region Optimizacion Ingreso Transferencia
        public static ServiceInventoryMoveAux UpdateInventaryMoveTransferEntryValidateOP
            (
            bool approve,
            User ActiveUser,
            Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove,
            DBContext db,
            bool reverse,
            InventoryMove inventoryMoveToReverse = null,
            decimal priceLbs = 0,
            Warehouse[] warehouses = null,
            WarehouseLocation[] warehouseLocations = null
            )
        {
            InventoryMove InventoryMoveFind = null;
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            try
            {
                if (!reverse)
                {
                    InventoryMoveFind = db.InventoryMove.FirstOrDefault(fod => fod.id == paramInventoryMove.id);
                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, true, paramInventoryMove.idWarehouse);

                    if (approve)
                    {
                        var resultVirtualCompanyExitValidate = UpdateInventaryMoveVirtualCompanyExitValidateOP(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramInventoryMove, db, reverse, null);
                        if (!string.IsNullOrEmpty(resultVirtualCompanyExitValidate.message)) throw new ProdHandlerException(resultVirtualCompanyExitValidate.message);
                        result.inventoryMoveAux = resultVirtualCompanyExitValidate.inventoryMove;
                        result.isNewMoveAux = (result.inventoryMoveAux == null);

                    }
                    if (InventoryMoveFind == null)
                    {
                        #region Details
                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        foreach (var i in itemDetail)
                        {
                            if (i.id_warehouseLocation == 0 || i.id_warehouseLocation == null)
                            {
                                throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                            }

                            foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                var warehouseExit = warehouses.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                var warehouseLocationExit = warehouseLocations.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                {
                                    throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                                if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                {
                                    throw new ProdHandlerException("No se puede aprobar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                            }


                        }

                        #endregion
                    }
                    else
                    {
                        #region Details
                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();
                        foreach (var i in itemDetail)
                        {
                            if (i.id_warehouseLocation == 0 || i.id_warehouseLocation == null)
                            {
                                throw new ProdHandlerException("No puede guardarse el detalle sin ubicación. Configúrelo, e intente de nuevo");
                            }

                            foreach (var detailInventoryMoveDetailTransfer1 in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveExit = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_inventoryMoveExit);
                                var warehouseExit = warehouses.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseExit);
                                var warehouseLocationExit = warehouseLocations.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer1.id_warehouseLocationExit);

                                if (detailInventoryMoveDetailTransfer1.id_inventoryMoveDetailExit == null)
                                {
                                    throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia sin la referencia de el detalle de movimiento de egreso por transferencia del cual surge este." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                                if (detailInventoryMoveDetailTransfer1.InventoryMove.Document.DocumentState.code != "03")
                                {
                                    throw new ProdHandlerException("No se puede guardar un detalle de movimiento de ingreso por tranferencia por tener la referencia de el detalle de movimiento de egreso por transferencia del cual surge este, no aprobado." +
                                                        " Esto sucede en el detalle de el movimiento con número de movimiento de egreso por transferencia: " + inventoryMoveExit.Document.number + ", Bodega: " + warehouseExit.name + " y ubicación: " + warehouseLocationExit.name + ".Elimine este detalle o anule este movimiento y vuelva a crear otro equivalente.");
                                };
                            }

                        }

                        #endregion

                    }



                }

                result.inventoryMove = InventoryMoveFind;
                result.isNew = (InventoryMoveFind == null);

            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralIngresoTransferencia;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }
            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveVirtualCompanyExitValidateOP(
            bool approve,
            User ActiveUser,
            Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove,
            DBContext db,
            bool reverse,
            InventoryMove inventoryMoveToReverse = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            try
            {

                if (!reverse)
                {
                    var codigoCBVE = db.Setting.FirstOrDefault(fod2 => fod2.code == "CBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCBVE))
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseVIREMP = db.Warehouse.FirstOrDefault(fod => fod.code == codigoCBVE);
                    if (warehouseVIREMP == null)
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido la bodega (con código: " + codigoCBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var codigoCUBVE = db.Setting.FirstOrDefault(fod2 => fod2.code == "CUBVE")?.value ?? "";
                    if (string.IsNullOrEmpty(codigoCUBVE))
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido el Parámetro (con código CUBVE). Configúrelo e inténtelo de nuevo.");
                    }
                    var warehouseLocationEMPGEN = db.WarehouseLocation.FirstOrDefault(fod => fod.code == codigoCUBVE);
                    if (warehouseLocationEMPGEN == null)
                    {
                        throw new ProdHandlerException("No puede Guardarse Egreso a Bodega Virtual de Empresa debido a no tener definido la ubicacion (con código: " + codigoCUBVE + "). Configúrelo e inténtelo de nuevo.");
                    }

                    var id_inventaryMoveVirtualCompanyExit = db.DocumentSource.FirstOrDefault(fod => fod.id_document == paramInventoryMove.id &&
                                                                   fod.Document1.DocumentState.code.Equals("01") &&
                                                                   fod.Document1.DocumentType.code.Equals("128"))?.id_documentOrigin;
                    inventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveVirtualCompanyExit);

                    ValidateEmissionDateInventoryMove(db, paramInventoryMove.Document.emissionDate, false, warehouseVIREMP.id);

                }

                result.inventoryMove = inventoryMove;
                result.isNew = (inventoryMove == null);
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgresoBodegaVirtual;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        private static bool okToSave(int count, int interval, int maxRecord)
        {
            return ((count % interval) == 0) || (count == maxRecord);
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveTransferEntryOP(
            IDbConnection conection,
            bool approve,
            User ActiveUser,
            Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove,
            DBContext db,
            bool reverse,
            InventoryMove inventoryMoveToReverse = null,
            decimal priceLbs = 0,
            ServiceInventoryMoveAux serviceInventoryMoveAux = null,
            InventoryMove inventaryMoveVirtualCompanyExit = null,
            DocumentState[] documentStates = null,
            EmissionPoint[] emissionPoints = null,
            InventoryReason[] inventoryReasons = null,
            Employee[] employees = null,
            Warehouse[] warehouses = null,
            WarehouseLocation[] warehouseLocations = null,
            MetricUnit[] metricUnits = null,
            MetricUnitConversion[] metricUnitConversions = null,
            Setting[] settings = null

            )
        {

            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            //InventoryMove inventaryMoveVirtualCompanyExit = null;
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();

            bool validExecLastMov = false;
            int interval = 10;

            try
            {
                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var id_inventaryMoveVirtualCompanyExitToReverse = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMoveToReverse.id &&
                                                                   fod.Document1.DocumentState.code.Equals("03") &&
                                                                   fod.Document1.DocumentType.code.Equals("128")).id_documentOrigin;
                    var inventaryMoveVirtualCompanyExitToReverse = db.InventoryMove.FirstOrDefault(fod => fod.id == id_inventaryMoveVirtualCompanyExitToReverse);
                    UpdateInventaryMoveVirtualCompanyExit(approve, ActiveUser, ActiveCompany, ActiveEmissionPoint, paramInventoryMove, db, reverse, inventaryMoveVirtualCompanyExitToReverse);

                    DocumentState documentStatePendiente = db.DocumentState.FirstOrDefault(s => s.code == "01");

                    inventaryMoveVirtualCompanyExitToReverse.Document.id_documentState = documentStatePendiente.id;
                    inventaryMoveVirtualCompanyExitToReverse.Document.DocumentState = documentStatePendiente;

                    db.InventoryMove.Attach(inventaryMoveVirtualCompanyExitToReverse);
                    db.Entry(inventaryMoveVirtualCompanyExitToReverse).State = EntityState.Modified;

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, -i.entryAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    if (serviceInventoryMoveAux == null) throw new ProdHandlerException("Ha ocurrido un error al procesar las validaciones del Ingreso de Inventario.");
                    inventoryMove = serviceInventoryMoveAux.inventoryMove;

                    List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        string tipoDocumentoCode = (reverse ? "35" : "34");

                        var resultDocumentType = GetDocumentTypeSequentialAndNumber(tipoDocumentoCode, db, ActiveCompany, ActiveEmissionPoint); //db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "35" : "34")); 
                        DocumentType documentType = resultDocumentType.Item1;
                        document.id_documentType = resultDocumentType.Item1.id;

                        DocumentState documentState = documentStates.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = emissionPoints.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = resultDocumentType.Item2; //GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = resultDocumentType.Item3; //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (resultDocumentType.Item1 != null)
                        {
                            documentType.currentNumber = resultDocumentType.Item4; //documentType.currentNumber + 1;
                            db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        if (inventaryMoveVirtualCompanyExit != null)
                        {
                            UpdateDocumentSource(document, inventaryMoveVirtualCompanyExit.Document, db);
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        var inventoryReason = inventoryReasons.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryEntryMove = new InventoryEntryMove
                        {
                            id_warehouseEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouse,
                            id_warehouseLocationEntry = paramInventoryMove.InventoryMoveDetail.FirstOrDefault()?.id_warehouseLocation,
                            id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver,
                            Employee = employees.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver),
                            dateEntry = DateTime.Now
                        };

                        inventoryMove.idWarehouse = paramInventoryMove.idWarehouse;
                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)paramInventoryMove.idWarehouse);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();
                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 

                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion

                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL


                        #region  -- Optimizacion consulta Saldo --
                        //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                        //                                                   i.id_item,
                        //                                                   i.id_warehouse,
                        //                                                   i.id_warehouseLocation,
                        //                                                   i.id_lot,
                        //                                                   db,
                        //                                                   null,
                        //                                                   i.lotMarked);

                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        int warehouseId = itemDetail.FirstOrDefault().id_warehouse;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                warehouseId, //inventoryMove.idWarehouse,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = r.id_warehouseLocation,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }

                        #endregion

                        int countToSave = 1;
                        int maxDetail = itemDetail.Count();

                        foreach (var i in itemDetail)
                        {
                            countToSave++;
                            var secondsOver = 0;
                            if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnits.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }
                            bool toSave = okToSave(countToSave, interval, maxDetail);
                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailPrepareOP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                                i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant,
                                                                                                thisToSave: toSave);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                            .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                        && r.id_lote == i.id_lot
                                                                        && r.id_item == i.id_item)?
                                                            .Sum(r => r.saldo) ?? 0);

                                //GetRemainingBalance(ActiveCompany.id,
                                //                     i.id_item,
                                //                     i.id_warehouse,
                                //                     i.id_warehouseLocation,
                                //                     i.id_lot,
                                //                     db,
                                //                     null,
                                //                     i.lotMarked);
                                var amountMove = (reverse) ? (tempDetail.amountMove) : (tempDetail.amountMove * -1);
                                //if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.entryAmount, db);
                            }

                            tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                            foreach (var detailInventoryMoveDetailTransfer in i.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                decimal amountPurAux = 0;
                                factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountPurAux = amountMoveAux * factorConversion;
                                }

                                var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                                {
                                    id_inventoryMoveDetailExit = detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit,
                                    InventoryMoveDetail = inventoryMoveDetailAux,
                                    id_inventoryMoveExit = detailInventoryMoveDetailTransfer.id_inventoryMoveExit,
                                    InventoryMove = db.InventoryMove.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveExit),
                                    id_warehouseExit = detailInventoryMoveDetailTransfer.id_warehouseExit,
                                    Warehouse = warehouses.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseExit),
                                    id_warehouseLocationExit = detailInventoryMoveDetailTransfer.id_warehouseLocationExit,
                                    WarehouseLocation = warehouseLocations.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_warehouseLocationExit),
                                    id_inventoryMoveDetailEntry = tempDetail.id,
                                    InventoryMoveDetail1 = tempDetail,
                                    quantity = amountPurAux
                                };
                                tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                                //OJO con esta actualizacion,que diablos es esto !!!!
                                newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                                // fin  que diablos es esto !!!!
                                UpdateDocumentSource(inventoryMove.Document, newInventoryMoveDetailTransfer.InventoryMove.Document, db);
                            }

                            //tempDetails.Add(tempDetail);

                        }

                        #endregion Details

                        inventoryMove.Document.number = inventoryMove.natureSequential;
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = documentStates.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        if (inventaryMoveVirtualCompanyExit != null)
                        {
                            var documentSourceAux = db.DocumentSource.FirstOrDefault(fod => fod.id_document == inventoryMove.id && fod.id_documentOrigin == inventaryMoveVirtualCompanyExit.id);
                            if (documentSourceAux == null)
                            {
                                UpdateDocumentSource(inventoryMove.Document, inventaryMoveVirtualCompanyExit.Document, db);
                            }
                        }

                        #endregion Document

                        #region InventoryMove

                        var inventoryReason = inventoryReasons.FirstOrDefault(fod => fod.id == paramInventoryMove.id_inventoryReason);
                        inventoryMove.InventoryReason = inventoryReason;
                        inventoryMove.id_inventoryReason = paramInventoryMove.id_inventoryReason;

                        inventoryMove.InventoryEntryMove.id_receiver = paramInventoryMove.InventoryEntryMove.id_receiver;
                        inventoryMove.InventoryEntryMove.Employee = employees.FirstOrDefault(fod => fod.id == paramInventoryMove.InventoryEntryMove.id_receiver);
                        inventoryMove.InventoryEntryMove.dateEntry = DateTime.Now;

                        inventoryMove.isAuthomatic = false;
                        inventoryMove.id_costCenter = paramInventoryMove.id_costCenter;
                        inventoryMove.id_subCostCenter = paramInventoryMove.id_subCostCenter;

                        inventoryMove.id_customer = paramInventoryMove.id_customer;
                        inventoryMove.id_seller = paramInventoryMove.id_seller;
                        inventoryMove.id_Invoice = paramInventoryMove.id_Invoice;
                        inventoryMove.noFactura = paramInventoryMove.noFactura;
                        inventoryMove.contenedor = paramInventoryMove.contenedor;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 

                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;
                        if (!validExecLastMov)
                        {
                            _IinvMd = GetLastMoveDetailBulk(_param);
                        }

                        #endregion QUERY LAST INVENTORYMOVEDETAIL


                        #region  -- Optimizacion consulta Saldo --
                         
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        int warehouseId = itemDetail.FirstOrDefault().id_warehouse;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                            warehouseId,//inventoryMove.idWarehouse,
                                                                            itemDetail.Select(r => new SaldoProductoLote
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouseLocation = r.id_warehouseLocation,
                                                                                id_lote = r.id_lot

                                                                            }).ToArray(),
                                                                            db,
                                                                            null);
                        }


                        #endregion

                        int countToSave = 0;
                        int maxDetail = itemDetail.Count();

                        foreach (var i in itemDetail)
                        {
                            countToSave++;

                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnits.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            bool toSave = okToSave(countToSave, interval, maxDetail);
                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailPrepareOP(!reverse, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, i.id_warehouse,
                                                                                                i.id_warehouseLocation.Value, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, i.id, i.id_costCenter, i.id_subCostCenter, false, null, null, null, null, i.ordenProduccion, i.lotMarked, i.id_personProcessPlant,
                                                                                                thisToSave: toSave);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                        .Where(r => r.id_warehouseLocation == i.id_warehouseLocation
                                                                    && r.id_lote == i.id_lot
                                                                    && r.id_item == i.id_item)?
                                                        .Sum(r => r.saldo) ?? 0);

                             ;
                                var amountMove = (reverse) ? (tempDetail.amountMove) : (tempDetail.amountMove * -1);
                                //if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                if (!i.Warehouse.allowsNegativeBalances && (remainingBalance - amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }

                                UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.entryAmount, db);
                            }

                            foreach (var detailInventoryMoveDetailTransfer in tempDetail.InventoryMoveDetailTransfer1)
                            {
                                var inventoryMoveDetailAux = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == detailInventoryMoveDetailTransfer.id_inventoryMoveDetailExit);
                                var id_metricUnitMovExitAux = inventoryMoveDetailAux.id_metricUnitMove;

                                decimal amountPurAux = 0;
                                factorConversion = (id_metricUnitMovExitAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                            fod.id_metricDestiny == id_metricUnitMovExitAux)?.factor ?? 0 : 1;
                                if (factorConversion == 0)
                                {
                                    throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + inventoryMoveDetailAux.MetricUnit1.code + ".Necesario para la cantidad recibida de la orden de Compra Origen Configúrelo, e intente de nuevo");
                                }
                                else
                                {
                                    amountPurAux = amountMoveAux * factorConversion;
                                }
                                detailInventoryMoveDetailTransfer.quantity = amountPurAux;
                                db.Entry(detailInventoryMoveDetailTransfer).State = EntityState.Modified;
                            }

                            //tempDetails.Add(tempDetail);


                        }

                        #endregion Details
                    }

                    int batchSize = 50; // Tamaño del lote
                    int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                    int index = 0;

                    using (var transaction = db.Database.BeginTransaction())
                    {
                        try
                        {
                            while (index <= totalDetalles)
                            {
                                var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList(); // Obtener un lote de detalles
                                foreach (var detalle in batchDetalles)
                                {
                                    if (detalle.id == 0)
                                    {
                                        db.InventoryMoveDetail.Add(detalle);
                                    }

                                }

                                //Guardar los cambios en el contexto
                                db.SaveChanges();

                                index += batchSize;
                            }
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            // Revertir la transacción en caso de error
                            //result.message = ex.Message;
                            MetodosEscrituraLogs.EscribeExcepcionLogNest(ex, getRutaLog(), "ServiceInventoryMove", "Produccion");
                            transaction.Rollback();
                            throw; // O manejar el error de otra manera
                        }


                    }






                }

                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralIngresoTransferencia;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        public static ServiceInventoryMoveAux UpdateInventaryMoveVirtualCompanyExitOP(

            bool approve,
            User ActiveUser,
            Company ActiveCompany,
            EmissionPoint ActiveEmissionPoint,
            InventoryMove paramInventoryMove,
            DBContext db,
            bool reverse,
            InventoryMove inventoryMoveToReverse = null,
            ServiceInventoryMoveAux serviceInventoryMoveAux = null,
            DocumentState[] documentStates = null,
            EmissionPoint[] emissionPoints = null,
            InventoryReason[] inventoryReasons = null,
            Setting[] settings = null,
            Warehouse[] warehouses = null,
            WarehouseLocation[] warehouseLocations = null,
            Employee[] employees = null,
            MetricUnit[] metricUnits = null,
            MetricUnitConversion[] metricUnitConversions = null)
        {
            var result = new ServiceInventoryMoveAux() { inventoryMove = null, message = null };
            InventoryMove inventoryMove = null;
            string str_item = "";
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            int interval = 10;
            int[] inventoryMoveDeleteForDelete = Array.Empty<int>();
            try
            {
                var codigoCBVE = settings.FirstOrDefault(fod2 => fod2.code == "CBVE")?.value ?? "";
                var warehouseVIREMP = warehouses.FirstOrDefault(fod => fod.code == codigoCBVE);
                var codigoCUBVE = settings.FirstOrDefault(fod2 => fod2.code == "CUBVE")?.value ?? "";
                var warehouseLocationEMPGEN = warehouseLocations.FirstOrDefault(fod => fod.code == codigoCUBVE);


                if (reverse)
                {
                    #region Validar Fecha emision de Reversión

                    if (inventoryMoveToReverse != null)
                    {
                        ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, true, inventoryMoveToReverse.idWarehouse);
                    }

                    #endregion Validar Fecha emision de Reversión

                    var itemDetail = inventoryMoveToReverse.InventoryMoveDetail.ToList();

                    foreach (var i in itemDetail)
                    {
                        UpdateStockInventoryItem(i.id_item, i.id_warehouse, i.id_warehouseLocation, i.exitAmount, db);
                    }

                    inventoryMove = inventoryMoveToReverse;
                }
                else
                {
                    if (serviceInventoryMoveAux == null) throw new ProdHandlerException("Ha ocurrido un error al procesar las validaciones del Ingreso de Inventario.");

                    inventoryMove = serviceInventoryMoveAux.inventoryMoveAux;


                    List<InventoryMoveDetail> tempDetails = new List<InventoryMoveDetail>();

                    if (inventoryMove == null)
                    {
                        #region Document

                        Document document = new Document();

                        string documentTypeCode = (reverse ? "127" : "128");
                        var resultDocumentType = GetDocumentTypeSequentialAndNumber(documentTypeCode, db, ActiveCompany, ActiveEmissionPoint);
                        DocumentType documentType = resultDocumentType.Item1; //db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "127" : "128"));
                        document.DocumentType = documentType;
                        document.id_documentType = documentType.id;

                        DocumentState documentState = documentStates.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        document.DocumentState = documentState;
                        document.id_documentState = documentState.id;

                        document.EmissionPoint = emissionPoints.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                        document.id_emissionPoint = ActiveEmissionPoint.id;

                        document.id_userCreate = ActiveUser.id;
                        document.dateCreate = DateTime.Now;
                        document.id_userUpdate = ActiveUser.id;
                        document.dateUpdate = DateTime.Now;

                        document.sequential = resultDocumentType.Item2; //GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                        document.number = resultDocumentType.Item3;  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                        document.emissionDate = paramInventoryMove.Document.emissionDate;
                        document.description = paramInventoryMove.Document.description;

                        if (documentType != null)
                        {
                            documentType.currentNumber = resultDocumentType.Item4; //documentType.currentNumber + 1;
                            //db.DocumentType.Attach(documentType);
                            db.Entry(documentType).State = EntityState.Modified;
                        }

                        #endregion Document

                        #region InventoryMove

                        inventoryMove = new InventoryMove();
                        inventoryMove.Document = document;
                        inventoryMove.id = document.id;

                        inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                        inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                        if (reverse)
                        {
                            var inventoryReason = inventoryReasons.FirstOrDefault(fod => fod.code.Equals("IABVETM"));

                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Reversarse el egreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Ingreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(IABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryEntryMove = new InventoryEntryMove
                            {
                                id_warehouseEntry = warehouseVIREMP.id,
                                id_warehouseLocationEntry = warehouseLocationEMPGEN.id,
                                id_receiver = ActiveUser.id_employee ?? 0,
                                Employee = db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateEntry = DateTime.Now
                            };
                        }
                        else
                        {
                            var inventoryReason = inventoryReasons.FirstOrDefault(fod => fod.code.Equals("EABVETM"));

                            if (inventoryReason == null)
                            {
                                throw new ProdHandlerException("No puede Aprobarse el egreso automática en la bodega Virtual de la Empresa debido a que no existe el Motivo de Inventario del Sistema, Egreso Automático en Bodega Virtual de Empresa por Transferencia Manual con código(EABVETM), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                            }
                            inventoryMove.InventoryReason = inventoryReason;
                            inventoryMove.id_inventoryReason = inventoryReason.id;

                            inventoryMove.InventoryExitMove = new InventoryExitMove
                            {
                                id_warehouseExit = warehouseVIREMP.id,
                                id_warehouseLocationExit = warehouseLocationEMPGEN.id,
                                id_dispatcher = ActiveUser.id_employee ?? 0,
                                Employee = employees.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                dateExit = DateTime.Now
                            };
                        }
                        inventoryMove.idWarehouse = warehouseVIREMP.id;

                        inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;

                        SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)warehouseVIREMP.id);
                        inventoryMove.natureSequential = _sp.sSequential;
                        inventoryMove.sequential = _sp.iSequential;
                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                        #endregion FECHA EMISION

                        inventoryMove.Document.number = inventoryMove.natureSequential;

                        #region Details

                        inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 

                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL

                        #region  -- Optimizacion consulta Saldo --
                        //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                        //                                                    i.id_item,
                        //                                                    warehouseVIREMP.id,
                        //                                                    warehouseLocationEMPGEN.id,
                        //                                                    i.id_lot,
                        //                                                    db);
                        //
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                warehouseVIREMP.id,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = warehouseLocationEMPGEN.id,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }

                        #endregion

                        int countToSave = 0;
                        int maxDetail = itemDetail.Count();
                        foreach (var i in itemDetail)
                        {
                            countToSave++;
                            var secondsOver = 0;
                            if (i.Item?.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnits.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            bool toSave = okToSave(countToSave, interval, maxDetail);
                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailPrepareOP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                                    warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans,
                                                                                                    thisToSave: toSave);

                            //tempDetails.Add(tempDetail);

                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                            .Where(r => r.id_warehouseLocation == warehouseLocationEMPGEN.id
                                                                        && r.id_lote == i.id_lot
                                                                        && r.id_item == i.id_item)?
                                                            .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_item,
                                //                                            warehouseVIREMP.id,
                                //                                            warehouseLocationEMPGEN.id,
                                //                                            i.id_lot,
                                //                                            db);

                                if (!warehouseVIREMP.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, -amountInvAux, db);
                            }
                        }

                        #endregion Details

                        //db.InventoryMove.Add(inventoryMove);
                    }
                    else
                    {
                        #region Document

                        DocumentState documentState = documentStates.FirstOrDefault(s => s.code == (approve ? "03" : "01"));
                        inventoryMove.Document.DocumentState = documentState;
                        inventoryMove.Document.id_documentState = documentState.id;

                        inventoryMove.Document.id_userUpdate = ActiveUser.id;
                        inventoryMove.Document.dateUpdate = DateTime.Now;

                        inventoryMove.Document.emissionDate = paramInventoryMove.Document.emissionDate;
                        inventoryMove.Document.description = paramInventoryMove.Document.description;

                        #endregion Document

                        #region InventoryMove

                        inventoryMove.InventoryExitMove.id_dispatcher = ActiveUser.id_employee ?? 0;
                        inventoryMove.InventoryExitMove.Employee = employees.FirstOrDefault(fod => fod.id == ActiveUser.id_employee);
                        inventoryMove.InventoryExitMove.dateExit = DateTime.Now;

                        inventoryMove.isAuthomatic = true;

                        #endregion InventoryMove

                        #region FECHA EMISION

                        string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(inventoryMove.Document.emissionDate);
                        string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(inventoryMove.Document.emissionDate);

                        #endregion FECHA EMISION

                        #region Details

                        //List<InventoryMoveDetail> detailToDeletes = new List<InventoryMoveDetail>();
                        result.inventoryMoveDetailIdsForDelete = inventoryMove
                                                                    .InventoryMoveDetail
                                                                    .Select(r => r.id)
                                                                    .ToArray();
                                                                        
                        for (int i = inventoryMove.InventoryMoveDetail.Count - 1; i >= 0; i--)
                        {
                            var detail = inventoryMove.InventoryMoveDetail.ElementAt(i);
                            //detailToDeletes.Add(detail);
                            //#region Optimiza Codigo
                            ////ValidateInventoryMoveDetailToRemove(db, detail);
                            //#endregion
                            inventoryMove.InventoryMoveDetail.Remove(detail);
                            db.Entry(detail).State = EntityState.Detached;
                        }
                        //DapperConnection.BulkDeleteTransaction<InventoryMoveDetail>(detailToDeletes.ToArray(), conection, transaction);

                        var itemDetail = paramInventoryMove.InventoryMoveDetail.ToList();

                        #region Optimizacion Aprobacion | Tabla de saldo 

                        ParamModelInveMvDetailBulk[] paramInvDetail = itemDetail
                                                                            .Select(r => new ParamModelInveMvDetailBulk
                                                                            {
                                                                                id_item = r.id_item,
                                                                                id_warehouse = r.id_warehouse,
                                                                                id_warehouselocation = (r.id_warehouseLocation ?? 0)
                                                                            })
                                                                            .ToArray();
                        str_item = JsonConvert.SerializeObject(paramInvDetail);

                        //foreach (var _detMat in itemDetail)
                        //{
                        //    str_item = str_item + _detMat.id_item.ToString() + ","
                        //   + _detMat.id_warehouse.ToString() + ","
                        //   + _detMat.id_warehouseLocation.ToString() + ",;";
                        //}
                        #endregion


                        #region QUERY LAST INVENTORYMOVEDETAIL

                        ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                        _param.str_item = str_item;
                        _param.emissiondate = inventoryMove.Document.emissionDate.ToIsoDateFormat();
                        _param.houremissiondate = dtHourEmissionDate;

                        _IinvMd = GetLastMoveDetailBulk(_param);

                        #endregion QUERY LAST INVENTORYMOVEDETAIL


                        #region  -- Optimizacion consulta Saldo --
                        //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                        //                                                 i.id_item,
                        //                                                 warehouseVIREMP.id,
                        //                                                 warehouseLocationEMPGEN.id,
                        //                                                 i.id_lot,
                        //                                                 db);
                        //
                        SaldoProductoLote[] SaldoValidaAprobacion = null;
                        if (approve)
                        {
                            SaldoValidaAprobacion = GetRemainingBalanceBulk(ActiveCompany.id,
                                                                                warehouseVIREMP.id,
                                                                                itemDetail.Select(r => new SaldoProductoLote
                                                                                {
                                                                                    id_item = r.id_item,
                                                                                    id_warehouseLocation = warehouseLocationEMPGEN.id,
                                                                                    id_lote = r.id_lot

                                                                                }).ToArray(),
                                                                                db,
                                                                                null);
                        }

                        #endregion

                        int countToSave = 0;
                        int maxDetail = itemDetail.Count();
                        foreach (var i in itemDetail)
                        {
                            countToSave++;
                            var secondsOver = 0;
                            if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;

                            if (i.amountMove == 0) continue;

                            id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                            InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                            decimal amountMoveAux = i.amountMove.Value;
                            decimal amountInvAux = 0;

                            decimal unitPriceMoveAux = i.unitPriceMove ?? 0m;
                            decimal unitPriceInvAux = 0;

                            var metricUnitMovAux = metricUnits.FirstOrDefault(fod => fod.id == i.id_metricUnitMove);
                            int id_metricUnitMovAux = metricUnitMovAux.id;
                            int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;
                            var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                        fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                            if (factorConversion == 0)
                            {
                                throw new ProdHandlerException("Falta el Factor de Conversión entre : " + metricUnitMovAux.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                            }
                            else
                            {
                                amountInvAux = amountMoveAux * factorConversion;
                                unitPriceInvAux = unitPriceMoveAux * factorConversion;
                            }

                            bool toSave = okToSave(countToSave, interval, maxDetail);
                            InventoryMoveDetail tempDetail = UpdateInventoryMoveDetailPrepareOP(false, amountInvAux, i.id_item, i.id_lot, id_metricUnitInvAux, id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false, unitPriceInvAux, warehouseVIREMP.id,
                                                                                       warehouseLocationEMPGEN.id, lastInventoryMove, inventoryMove, ActiveUser, ActiveCompany, db, null, null, secondsOver, 0, i.id_costCenter, i.id_subCostCenter, i.genSecTrans,
                                                                                       thisToSave: toSave);

                            //tempDetails.Add(tempDetail);
                            if (approve)
                            {
                                var remainingBalance = (SaldoValidaAprobacion?
                                                        .Where(r => r.id_warehouseLocation == warehouseLocationEMPGEN.id
                                                                    && r.id_lote == i.id_lot
                                                                    && r.id_item == i.id_item)?
                                                        .Sum(r => r.saldo) ?? 0);

                                //var remainingBalance = GetRemainingBalance(ActiveCompany.id,
                                //                                            i.id_item,
                                //                                            warehouseVIREMP.id,
                                //                                            warehouseLocationEMPGEN.id,
                                //                                            i.id_lot,
                                //                                            db);

                                if (!warehouseVIREMP.allowsNegativeBalances && (remainingBalance - tempDetail.amountMove) < 0)
                                {
                                    var action = reverse ? "Reversarse" : "Aprobarse";
                                    var lotNumber = tempDetail.Lot == null ? "" : ", perteneciente al Lote: " + tempDetail.Lot.number;
                                    throw new ProdHandlerException("No puede " + action + " el Movimiento de Inventario debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                                        tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name + lotNumber);
                                }
                                UpdateStockInventoryItem(i.id_item, warehouseVIREMP.id, warehouseLocationEMPGEN.id, -amountInvAux, db);
                            }
                        }

                        #endregion Details


                        //db.Entry(inventoryMove).State =EntityState.Modified;
                    }


                    int batchSize = 50; // Tamaño del lote
                    int totalDetalles = inventoryMove.InventoryMoveDetail.Count();
                    int index = 0;

                    using (var transaction = db.Database.BeginTransaction())
                    {
                        try
                        {
                            while (index <= totalDetalles)
                            {
                                var batchDetalles = inventoryMove.InventoryMoveDetail.Skip(index).Take(batchSize).ToList(); // Obtener un lote de detalles
                                foreach (var detalle in batchDetalles)
                                {
                                    if (detalle.id == 0)
                                    {
                                        db.InventoryMoveDetail.Add(detalle);
                                    }

                                }

                                //Guardar los cambios en el contexto
                                db.SaveChanges();

                                index += batchSize;
                            }
                            transaction.Commit();
                        }
                        catch (Exception ex)
                        {
                            // Revertir la transacción en caso de error
                            //result.message = ex.Message;
                            MetodosEscrituraLogs.EscribeExcepcionLogNest(ex, getRutaLog(), "ServiceInventoryMove", "Produccion");
                            transaction.Rollback();
                            throw; // O manejar el error de otra manera
                        }


                    }



                }

                result.inventoryMove = inventoryMove;
            }
            catch (ProdHandlerException e)
            {
                result.message = e.Message;
                result.inventoryMove = inventoryMove;
            }
            catch (Exception e)
            {
                result.message = GenericError.ErrorGeneralEgresoBodegaVirtual;
                result.inventoryMove = inventoryMove;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
            }

            return result;
        }

        #endregion

        #region Optmizacion Requerimiento Inventario
        public static string UpdateInventaryMoveTransferDispatchMaterialsLogisticFixedOP(
                                                        User ActiveUser,
                                                        Company ActiveCompany,
                                                        EmissionPoint ActiveEmissionPoint,
                                                        RemissionGuide remissionGuide,
                                                        DBContext db,
                                                        bool reverse,
                                                        DateTime? dtTransaction,
                                                        Setting[] settings,  // --- Nuevos Parametros
                                                        WarehouseLocation[] warehouseLocations,
                                                        Provider providerAux, // -- db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                                                        Warehouse[] warehouses,
                                                        SettingDetail[] settingDetails,
                                                        DocumentState[] documentStates,
                                                        EmissionPoint[] emissionPoints,
                                                        InventoryReason[] inventoryReasons,
                                                        Employee employee, // -- db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                                        MetricUnitConversion[] metricUnitConversions,
                                                        InventoryMove inventoryMoveToReverseExit = null,
                                                        InventoryMove inventoryMoveToReverseEntry = null,
                                                        bool isInSameTransaction = false,
                                                        List<RequestInventoryMoveDetailModelP> lstRimDetail = null,
                                                        int id_rim = 0,
                                                        int? idWarehouse = 0)
        {
            string result = "";
            string str_item = "";
            try
            {
                #region Check a Param of Exit automatic

                var aprobarReversarSE = reverse ? "Reversarse" : "Aprobarse";
                Setting settingAEMD = settings.FirstOrDefault(t => t.code == "AEMD");
                Setting settingFechaMovimientoInventario = settings.FirstOrDefault(fod => fod.code.Equals("FAMIMA"));

                bool isDateManual = false;
                if (settingFechaMovimientoInventario != null)
                    isDateManual = settingFechaMovimientoInventario.value.Equals("Y") ? true : false;

                if (settingAEMD == null)
                {
                    throw new ProdHandlerException($"No puede {aprobarReversarSE} la Guía debido a no estar configurado el Parámetro de: Automático Egreso de Materiales de Despacho con código(AEMD) necesario para egresar los materiales de despacho de manera automática o no");
                }

                if (settingAEMD.value == "0")
                {
                    return result;
                }

                #endregion Check a Param of Exit automatic

                #region Get Last InventoryMoveDetail

                List<ItemInvMoveDetail> _lstInvDetail = new List<ItemInvMoveDetail>();
                List<ItemInvMoveDetail> _lstInvDetailProvider = new List<ItemInvMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();
                if (lstRimDetail != null && lstRimDetail.Count() > 0)
                {
                    var lstIdRimDetail = lstRimDetail.Select(s => s.id_item).ToList();
                    itemDetail = itemDetail.Where(w => lstIdRimDetail.Contains(w.id_item)).ToList();
                }

                #endregion Get Last InventoryMoveDetail

                int id_WarehouseProvider = 0;

                DateTime dt = DateTime.Now;

                if (isDateManual && dtTransaction != null)
                    dt = (DateTime)dtTransaction;
                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(dt);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(dt);

                #region SOLUTION FOR INVENTORY MOVE DETAIL

                #region -- Optimizacion Velocidad Detail 1 --
                List<ParamModelInveMvDetailBulk> paramInvDetail = new List<ParamModelInveMvDetailBulk>();
                #endregion -- Optimizacion Velocidad Detail 1 --

                foreach (var _detMat in itemDetail)
                {
                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverseExit.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == _detMat.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Setting settingUUDEMD = settings.FirstOrDefault(t => t.code == "UUDEMD");
                        var id_warehouseLocationAuxInt = _detMat.id_warehouselocation;
                        if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                        {
                            Setting settingUDLI = settings.FirstOrDefault(t => t.code == "UDLI");
                            if (settingUDLI == null)
                            {
                                throw new ProdHandlerException("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                    "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }

                            var id_inventoryLineAux = _detMat.Item.id_inventoryLine.ToString();
                            var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                            if (id_warehouseLocationAux == null)
                            {
                                throw new ProdHandlerException("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                " para la linea de inventario " + _detMat.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                            }
                            id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                        }
                        id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? _detMat.Item.ItemInventory.id_warehouseLocation;
                        warehouseLocationAux = warehouseLocations.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);
                    }
                    if (warehouseLocationAux != null)
                    {
                        //str_item = str_item + _detMat.id_item.ToString() + ","
                        //+ warehouseLocationAux.Warehouse.id.ToString() + ","
                        //+ warehouseLocationAux.id.ToString() + ",;";

                        paramInvDetail.Add(new ParamModelInveMvDetailBulk
                        {
                            id_item = _detMat.id_item,
                            id_warehouse = warehouseLocationAux.Warehouse.id,
                            id_warehouselocation = warehouseLocationAux.id
                        });
                    }
                }

                #region -- Optimizacion Velocidad Detail 2 --
                str_item = JsonConvert.SerializeObject(paramInvDetail.ToArray());
                #endregion -- Optimizacion Velocidad Detail 2 --

                #region QUERY LAST INVENTORYMOVEDETAIL

                ParamForQueryInvMoveDetail _param = new ParamForQueryInvMoveDetail();
                _param.str_item = str_item;
                _param.emissiondate = dt.ToIsoDateFormat();
                _param.houremissiondate = dtHourEmissionDate;

                _lstInvDetail = GetLastMoveDetailBulk(_param);

                #endregion QUERY LAST INVENTORYMOVEDETAIL

                #endregion SOLUTION FOR INVENTORY MOVE DETAIL

                str_item = "";

                #region SOLUTION FOR INVENTORY MOVE DETAIL

                foreach (var _detMat in itemDetail)
                {
                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverseExit.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == _detMat.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        //Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProviderOP(remissionGuide.id_providerRemisionGuide,
                                                                                db,
                                                                                ActiveCompany,
                                                                                ActiveUser,
                                                                                providerAux,
                                                                                warehouses,
                                                                                warehouseLocations);

                        if (warehouseLocationAux == null)
                        {
                            throw new ProdHandlerException("No puede Aprobarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                        else
                        {
                            id_WarehouseProvider = warehouseLocationAux.Warehouse.id;
                        }
                    }
                    if (warehouseLocationAux != null)
                    {
                        //str_item = str_item + _detMat.id_item.ToString() + ","
                        //+ warehouseLocationAux.Warehouse.id.ToString() + ","
                        //+ warehouseLocationAux.id.ToString() + ",;";

                        paramInvDetail.Add(new ParamModelInveMvDetailBulk
                        {
                            id_item = _detMat.id_item,
                            id_warehouse = warehouseLocationAux.Warehouse.id,
                            id_warehouselocation = warehouseLocationAux.id
                        });
                    }
                }

                #region -- Optimizacion Velocidad Detail 2 --
                str_item = JsonConvert.SerializeObject(paramInvDetail.ToArray());
                #endregion -- Optimizacion Velocidad Detail 2 --

                #region QUERY LAST INVENTORYMOVEDETAIL

                ParamForQueryInvMoveDetail _param2 = new ParamForQueryInvMoveDetail();
                _param2.str_item = str_item;
                _param2.emissiondate = dt.ToIsoDateFormat();
                _param2.houremissiondate = dtHourEmissionDate;

                _lstInvDetailProvider = GetLastMoveDetailBulk(_param2);

                #endregion QUERY LAST INVENTORYMOVEDETAIL

                #endregion SOLUTION FOR INVENTORY MOVE DETAIL

                var inventoryMoveExit = UpdateInventaryMoveExitDispatchMaterialsLogisticFixedOP(
                                                ActiveUser,
                                                ActiveCompany,
                                                ActiveEmissionPoint,
                                                remissionGuide,
                                                db,
                                                reverse,
                                                dt,
                                                settings: settings,
                                                settingDetails: settingDetails,
                                                documentStates: documentStates,
                                                emissionPoints: emissionPoints,
                                                inventoryReasons: inventoryReasons,
                                                employee: employee,
                                                warehouseLocations: warehouseLocations,
                                                inventoryMoveToReverseExit,
                                                null,
                                                false,
                                                lstRimDetail,
                                                id_rim,
                                                _lstInvDetail,
                                                idWarehouse);

                UpdateInventaryMoveEntryDispatchMaterialsLogisticFixedOP(
                    ActiveUser,
                    ActiveCompany,
                    ActiveEmissionPoint,
                    remissionGuide,
                    db,
                    reverse,
                    dt,
                    settings: settings,
                    settingDetails: settingDetails,
                    documentStates: documentStates,
                    emissionPoints: emissionPoints,
                    inventoryReasons: inventoryReasons,
                    warehouses: warehouses,
                    warehouseLocations: warehouseLocations,
                    metricUnitConversions: metricUnitConversions,
                    employee: employee,
                    provider: providerAux,
                    inventoryMoveToReverseEntry,
                    inventoryMoveExit,
                    true,
                    lstRimDetail,
                    id_rim,
                    _lstInvDetailProvider,
                    id_WarehouseProvider);
            }
            catch (ProdHandlerException e)
            {
                result = e.Message;
            }
            catch (Exception e)
            {
                result = GenericError.ErrorGeneralTransferDispatchMaterials;
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");

            }
            return result;
        }

        public static InventoryMove UpdateInventaryMoveExitDispatchMaterialsLogisticFixedOP(
                                                        User ActiveUser,
                                                        Company ActiveCompany,
                                                        EmissionPoint ActiveEmissionPoint,
                                                        RemissionGuide remissionGuide,
                                                        DBContext db,
                                                        bool reverse,
                                                        DateTime dtNew,
                                                        Setting[] settings, // --  Parametros nuevos
                                                        SettingDetail[] settingDetails,
                                                        DocumentState[] documentStates,
                                                        EmissionPoint[] emissionPoints,
                                                        InventoryReason[] inventoryReasons,
                                                        Employee employee, // -- db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                                        WarehouseLocation[] warehouseLocations,
                                                        InventoryMove inventoryMoveToReverse = null,
                                                        InventoryMove inventoryMoveExit = null,
                                                        bool isInSameTransaction = false,
                                                        List<RequestInventoryMoveDetailModelP> lstRimDetail = null,
                                                        int id_rim = 0, List<ItemInvMoveDetail> lstLastInv = null,
                                                        int? idWarehouse = 0,
                                                        bool isDateManual = false)
        {
            InventoryMove result = null;
            int id_imd;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            _IinvMd = lstLastInv;
            int idCCsett = 0, idSCCsett = 0;

            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;
                bool _validate = inventoryMoveToReverse != null ? true : false;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, _validate, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = settings
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = settingDetails
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                                            && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = settingDetails
                                    .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                                            && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();
                string codeDocumentType = (reverse ? "58" : "57");
                var documentTypeResult = GetDocumentTypeSequentialAndNumber(codeDocumentType, db, ActiveCompany, ActiveEmissionPoint);
                DocumentType documentType = documentTypeResult.Item1; //db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "58" : "57")); document.DocumentType = documentType;
                document.id_documentType = documentType.id;

                DocumentState documentState = documentStates.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = emissionPoints.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse == null)
                {
                    document.dateCreate = dtNew;
                    document.dateUpdate = dtNew;
                    document.emissionDate = dtNew;
                }
                else
                {
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }

                document.id_userCreate = ActiveUser.id;
                document.id_userUpdate = ActiveUser.id;

                document.sequential = documentTypeResult.Item2;   //GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = documentTypeResult.Item3;  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentTypeResult.Item4; //documentType.currentNumber + 1;
                    //db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, remissionGuide.Document, db);
                Document _doRim = db.Document.FirstOrDefault(fod => fod.id == id_rim);
                if (_doRim != null)
                {
                    UpdateDocumentSource(document, _doRim, db);
                }
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                result = inventoryMove;
                var inventoryReason = inventoryReasons.FirstOrDefault(fod => fod.code.Equals("EPTAMDL"));

                if (inventoryReason == null)
                {
                    throw new ProdHandlerException("No puede Aprobarse la Guia debido a que no existe el Motivo de Inventario del Sistema, Egreso Por Transferencia Automática Materiales de Despacho en Logistica con código(EPTAMDL) necesario para realizar la transferencia de Materiales de Despacho en Logística, que el administrador del sistema lo configure e intente esta opción de nuevo.");
                }

                inventoryMove.InventoryReason = inventoryReason;
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryExitMove = new InventoryExitMove
                {
                    id_warehouseExit = null,
                    id_warehouseLocationExit = null,
                    id_dispatcher = ActiveUser.id_employee ?? 0,
                    Employee = employee,
                    dateExit = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;
                inventoryMove.isAuthomatic = true;
                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, false, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();
                if (lstRimDetail != null && lstRimDetail.Count() > 0)
                {
                    var lstIdRimDetail = lstRimDetail.Select(s => s.id_item).ToList();
                    itemDetail = itemDetail.Where(w => lstIdRimDetail.Contains(w.id_item)).ToList();
                }

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    Setting settingUUDEMD = settings.FirstOrDefault(t => t.code == "UUDEMD");
                    var id_warehouseLocationAuxInt = i.id_warehouselocation;
                    if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                    {
                        Setting settingUDLI = settings.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new ProdHandlerException("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new ProdHandlerException("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                        id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                    }
                    id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? i.Item.ItemInventory.id_warehouseLocation;
                    warehouseLocationAux = warehouseLocations.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = lstRimDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.quantityUpdate ?? i.sourceExitQuantity;
                    decimal amountInvAux = 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? db.MetricUnitConversion.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new ProdHandlerException("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux,
                                                                                id_metricUnitMovAux, 0, amountMoveAux, false, 0, warehouseLocationAux.Warehouse.id,
                                                                               warehouseLocationAux.id, lastInventoryMove, inventoryMove, ActiveUser,
                                                                               ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new ProdHandlerException("No puede " + action + " la Guía debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (reverse)
                    {
                        var detailInventoryMoveDetailExitDispatchMaterials = i.InventoryMoveDetailExitDispatchMaterials.FirstOrDefault(fod => fod.id_remissionGuideDispatchMaterial == i.id);
                        i.InventoryMoveDetailExitDispatchMaterials.Remove(detailInventoryMoveDetailExitDispatchMaterials);
                        db.Entry(detailInventoryMoveDetailExitDispatchMaterials).State = EntityState.Deleted;

                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        WarehouseLocation warehouseLocationProviderAux = GetWarehouseLocationProvider(remissionGuide.id_providerRemisionGuide, db, ActiveCompany, ActiveUser);
                        if (warehouseLocationProviderAux == null)
                        {
                            throw new ProdHandlerException("No puede Reversarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                        var inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                           fod.id_item == i.id_item &&
                                                                                                           fod.id_warehouse == warehouseLocationProviderAux.Warehouse.id &&
                                                                                                           fod.id_warehouseLocation == warehouseLocationProviderAux.id);

                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = db.Warehouse.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = db.WarehouseLocation.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = amountMoveAux
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                    else
                    {
                        i.InventoryMoveDetailExitDispatchMaterials = new List<InventoryMoveDetailExitDispatchMaterials>();
                        var newInventoryMoveDetailExitDispatchMaterials = new InventoryMoveDetailExitDispatchMaterials
                        {
                            id_inventoryMoveDetail = tempDetail.id,
                            InventoryMoveDetail = tempDetail,
                            id_remissionGuideDispatchMaterial = i.id,
                            RemissionGuideDispatchMaterial = i,
                            quantity = amountMoveAux
                        };
                        i.InventoryMoveDetailExitDispatchMaterials.Add(newInventoryMoveDetailExitDispatchMaterials);
                    }

                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, -amountInvAux, db);
                }

                #endregion Details
            }
            catch (Exception e)
            {
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
                throw;
            }

            return result;
        }

        public static InventoryMove UpdateInventaryMoveEntryDispatchMaterialsLogisticFixedOP(
                                                        User ActiveUser,
                                                        Company ActiveCompany,
                                                        EmissionPoint ActiveEmissionPoint,
                                                        RemissionGuide remissionGuide,
                                                        DBContext db,
                                                        bool reverse,
                                                        DateTime dtNew,
                                                        Setting[] settings, // -- Parametros nuevos
                                                        SettingDetail[] settingDetails,
                                                        DocumentState[] documentStates,
                                                        EmissionPoint[] emissionPoints,
                                                        InventoryReason[] inventoryReasons,
                                                        Warehouse[] warehouses,
                                                        WarehouseLocation[] warehouseLocations,
                                                        MetricUnitConversion[] metricUnitConversions,
                                                        Employee employee, // db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                                                        Provider provider, // db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                                                        InventoryMove inventoryMoveToReverse = null,
                                                        InventoryMove inventoryMoveExit = null,
                                                        bool isInSameTransaction = false,
                                                        List<RequestInventoryMoveDetailModelP> lstRimDetail = null,
                                                        int id_rim = 0, List<ItemInvMoveDetail> lstLastInv = null,
                                                        int? idWarehouse = 0,
                                                        bool isDateManual = false)
        {
            InventoryMove result = null;
            int id_imd = 0;
            List<ItemInvMoveDetail> _IinvMd = new List<ItemInvMoveDetail>();
            _IinvMd = lstLastInv;
            int idCCsett = 0, idSCCsett = 0;

            try
            {
                idWarehouse = idWarehouse == 0 ? null : idWarehouse;
                bool _validate = inventoryMoveToReverse != null ? true : false;

                #region Validar Fecha emision de Reversión

                if (inventoryMoveToReverse != null)
                {
                    ValidateEmissionDateInventoryMove(db, inventoryMoveToReverse.Document.emissionDate, _validate, idWarehouse);
                }

                #endregion Validar Fecha emision de Reversión

                var _settingCCCL = settings
                                    .FirstOrDefault(fod => fod.code.Equals("CCCL"));

                if (_settingCCCL != null && _settingCCCL.value.Equals("Y"))
                {
                    var sIdCCsett = settingDetails
                                        .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                                                && fod.value.Equals("CCLOG"))?.valueAux ?? "0";

                    var sIdSCCsett = settingDetails
                                        .FirstOrDefault(fod => fod.id_setting == _settingCCCL.id
                                                                && fod.value.Equals("SCLOG"))?.valueAux ?? "0";

                    if (!sIdCCsett.Equals("0"))
                    {
                        idCCsett = Convert.ToInt32(sIdCCsett);
                    }
                    if (!sIdSCCsett.Equals("0"))
                    {
                        idSCCsett = Convert.ToInt32(sIdSCCsett);
                    }
                }

                #region Document

                Document document = new Document();

                string codigoDocumentType = (reverse ? "60" : "59");
                var documentTypeResult = GetDocumentTypeSequentialAndNumber(codigoDocumentType, db, ActiveCompany, ActiveEmissionPoint); //db.DocumentType.FirstOrDefault(t => t.code == (reverse ? "60" : "59")); document.DocumentType = documentType;
                DocumentType documentType = documentTypeResult.Item1;
                document.id_documentType = documentType.id;

                DocumentState documentState = documentStates.FirstOrDefault(s => s.code == "03");
                document.DocumentState = documentState;
                document.id_documentState = documentState.id;

                document.EmissionPoint = emissionPoints.FirstOrDefault(e => e.id == ActiveEmissionPoint.id);
                document.id_emissionPoint = ActiveEmissionPoint.id;

                if (inventoryMoveToReverse == null)
                {
                    document.id_userCreate = ActiveUser.id;
                    document.dateCreate = dtNew;
                    document.id_userUpdate = ActiveUser.id;
                    document.dateUpdate = dtNew;
                    document.emissionDate = dtNew;
                }
                else
                {
                    document.id_userCreate = inventoryMoveToReverse.Document.id_userCreate;
                    document.dateCreate = inventoryMoveToReverse.Document.dateCreate;
                    document.id_userUpdate = inventoryMoveToReverse.Document.id_userUpdate;
                    document.dateUpdate = inventoryMoveToReverse.Document.dateUpdate;
                    document.emissionDate = inventoryMoveToReverse.Document.emissionDate;
                }

                document.sequential = documentTypeResult.Item2;  //GetDocumentSequential(document.id_documentType, db, ActiveCompany);
                document.number = documentTypeResult.Item3;  //GetDocumentNumber(document.id_documentType, db, ActiveCompany, ActiveEmissionPoint);

                ValidateEmissionDateInventoryMove(db, document.emissionDate, false, idWarehouse);
                if (documentType != null)
                {
                    documentType.currentNumber = documentTypeResult.Item4;  //documentType.currentNumber + 1;
                    //db.DocumentType.Attach(documentType);
                    db.Entry(documentType).State = EntityState.Modified;
                }

                UpdateDocumentSource(document, remissionGuide.Document, db);
                Document _doRim = db.Document.FirstOrDefault(fod => fod.id == id_rim);
                if (_doRim != null)
                {
                    UpdateDocumentSource(document, _doRim, db);
                }
                if (inventoryMoveExit != null) UpdateDocumentSource(document, inventoryMoveExit.Document, db);

                #endregion Document

                #region FECHA EMISION

                string dtEmissionDate = GeneralStr.GetDateFormatStringFromDatetime(document.emissionDate);
                string dtHourEmissionDate = GeneralStr.GetTimeFormatStringFromDatetime(document.emissionDate);

                #endregion FECHA EMISION

                #region InventoryMove

                InventoryMove inventoryMove = new InventoryMove();
                inventoryMove.Document = document;
                inventoryMove.id = document.id;

                inventoryMove.id_inventoryMoveToReverse = inventoryMoveToReverse?.id;
                inventoryMove.InventoryMove2 = inventoryMoveToReverse;

                var inventoryReason = inventoryReasons.FirstOrDefault(fod => fod.code.Equals("IPTAMDL"));
                inventoryMove.InventoryReason = inventoryReason ?? throw new ProdHandlerException("No puede Aprobarse la Guía debido a que no existe el Motivo de Inventario del Sistema, Ingreso Por Transferencia Automática Materiales de Despacho en Logistica con código(IPTAMDL), que el administrador del sistema lo configure e intente esta opción de nuevo.");
                inventoryMove.id_inventoryReason = inventoryReason.id;

                inventoryMove.InventoryEntryMove = new InventoryEntryMove
                {
                    id_warehouseEntry = null,
                    id_warehouseLocationEntry = null,
                    id_receiver = ActiveUser.id_employee ?? 0,
                    Employee = employee, //db.Employee.FirstOrDefault(fod => fod.id == ActiveUser.id_employee),
                    dateEntry = DateTime.Now
                };

                inventoryMove.idNatureMove = inventoryMove?.InventoryReason?.idNatureMove;
                inventoryMove.idWarehouse = idWarehouse;

                inventoryMove.isAuthomatic = true;

                if (inventoryMoveToReverse == null)
                {
                    SequentialPar _sp = GetNatureSequential(ActiveUser, ActiveCompany, db, true, (int)idWarehouse);
                    inventoryMove.natureSequential = _sp.sSequential;
                    inventoryMove.sequential = _sp.iSequential;
                }
                else
                {
                    inventoryMove.natureSequential = inventoryMoveToReverse.natureSequential;
                    inventoryMove.sequential = inventoryMoveToReverse.sequential;
                }

                #endregion InventoryMove

                #region Details

                inventoryMove.InventoryMoveDetail = new List<InventoryMoveDetail>();

                var itemDetail = remissionGuide.RemissionGuideDispatchMaterial.ToList();
                if (lstRimDetail != null && lstRimDetail.Count() > 0)
                {
                    var lstIdRimDetail = lstRimDetail.Select(s => s.id_item).ToList();
                    itemDetail = itemDetail.Where(w => lstIdRimDetail.Contains(w.id_item)).ToList();
                }

                foreach (var i in itemDetail)
                {
                    if (i.Item.ItemInventory?.id_metricUnitInventory == null) continue;
                    if (!i.isActive) continue;

                    WarehouseLocation warehouseLocationAux = null;

                    if (reverse)
                    {
                        warehouseLocationAux = inventoryMoveToReverse.InventoryMoveDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.WarehouseLocation;
                    }
                    else
                    {
                        Provider providerAux = db.Provider.FirstOrDefault(fod => fod.id == remissionGuide.id_providerRemisionGuide);
                        warehouseLocationAux = GetWarehouseLocationProviderOP(remissionGuide.id_providerRemisionGuide,
                                                                                db,
                                                                                ActiveCompany,
                                                                                ActiveUser,
                                                                                providerAux,
                                                                                warehouses: warehouses,
                                                                                warehouseLocations: warehouseLocations);
                        if (warehouseLocationAux == null)
                        {
                            throw new ProdHandlerException("No puede Aprobarse la Guía debido a no existir la bodega Virtual de Proveedores con codigo(VIRPRO) necesaria para crear la ubicación del proveedor: " +
                                                providerAux.Person.fullname_businessName + " y realizar la reversión. El administrador del sistema debe configurar la opción y después intentelo de nuevo");
                        }
                    }

                    id_imd = _IinvMd.FirstOrDefault(fod => fod.id_item == i.id_item)?.id_inventorymovedetail ?? 0;
                    InventoryMoveDetail lastInventoryMove = db.InventoryMoveDetail.FirstOrDefault(fod => fod.id == id_imd);

                    decimal amountMoveAux = lstRimDetail.FirstOrDefault(fod => fod.id_item == i.id_item)?.quantityUpdate ?? i.sourceExitQuantity;

                    decimal amountInvAux = 0;

                    decimal unitPriceMoveAux = 0;
                    decimal unitPriceInvAux = 0;
                    InventoryMoveDetail inventoryMoveDetailExitAux = null;

                    #region APROBAR

                    Setting settingUUDEMD = settings.FirstOrDefault(t => t.code == "UUDEMD");
                    var id_warehouseLocationAuxInt = i.id_warehouselocation;
                    if (settingUUDEMD == null || settingUUDEMD?.value == "1")
                    {
                        Setting settingUDLI = settings.FirstOrDefault(t => t.code == "UDLI");
                        if (settingUDLI == null)
                        {
                            throw new ProdHandlerException("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                                "necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }

                        var id_inventoryLineAux = i.Item.id_inventoryLine.ToString();
                        var id_warehouseLocationAux = settingUDLI.SettingDetail.FirstOrDefault(fod => fod.value == id_inventoryLineAux)?.valueAux;
                        if (id_warehouseLocationAux == null)
                        {
                            throw new ProdHandlerException("No se pudo aprobar la Guía porque no se pudo Egresar Automaticamente el material de despacho debido a no estar configurado el Parámetro de: Ubicación por Defecto por Linea de Inventario con código(UDLI) " +
                                            " para la linea de inventario " + i.Item.InventoryLine.name + " necesario para saber en que Bodega-Ubicación se egresa el mismo");
                        }
                        id_warehouseLocationAuxInt = int.Parse(id_warehouseLocationAux);
                    }

                    id_warehouseLocationAuxInt = id_warehouseLocationAuxInt ?? i.Item.ItemInventory.id_warehouseLocation;
                    var warehouseLocation2Aux = warehouseLocations.FirstOrDefault(fod => fod.id == id_warehouseLocationAuxInt);

                    inventoryMoveDetailExitAux = inventoryMoveExit?.InventoryMoveDetail.FirstOrDefault(fod => fod.id_lot == null &&
                                                                                                        fod.id_item == i.id_item &&
                                                                                                        fod.id_warehouse == warehouseLocation2Aux.Warehouse.id &&
                                                                                                        fod.id_warehouseLocation == warehouseLocation2Aux.id);

                    #endregion APROBAR

                    unitPriceMoveAux = inventoryMoveDetailExitAux?.unitPriceMove ?? 0;
                    unitPriceInvAux = inventoryMoveDetailExitAux?.unitPrice ?? 0;

                    int id_metricUnitMovAux = i.Item.ItemInventory.id_metricUnitInventory;
                    int id_metricUnitInvAux = i.Item.ItemInventory.id_metricUnitInventory;

                    var factorConversion = (id_metricUnitInvAux != id_metricUnitMovAux) ? metricUnitConversions.FirstOrDefault(fod => fod.id_metricOrigin == id_metricUnitMovAux &&
                                                                                                                                fod.id_metricDestiny == id_metricUnitInvAux)?.factor ?? 0 : 1;
                    if (factorConversion == 0)
                    {
                        throw new ProdHandlerException("Falta el Factor de Conversión entre : " + i.Item.ItemInventory.MetricUnit.code + " y " + i.Item.ItemInventory.MetricUnit.code + ".Necesario para el precio Configúrelo, e intente de nuevo");
                    }
                    else
                    {
                        amountInvAux = amountMoveAux * factorConversion;
                        unitPriceInvAux = unitPriceMoveAux * factorConversion;
                    }

                    InventoryMoveDetail tempDetail = UpdateInventoryMoveDetail(!reverse, amountInvAux, i.id_item, null, id_metricUnitInvAux
                                                                                , id_metricUnitMovAux, unitPriceMoveAux, amountMoveAux, false
                                                                                , unitPriceInvAux, warehouseLocationAux.Warehouse.id
                                                                                , warehouseLocationAux.id, lastInventoryMove, inventoryMove
                                                                                , ActiveUser, ActiveCompany, db, null, null, 0, 0, idCCsett, idSCCsett);
                    //var _dBalanceWarehouse = GetWarehouseBalance(idWarehouse, i.id_item, db, null);
                    var _dBalanceWarehouse = GetRemainingBalance(ActiveCompany.id,
                                                                    i.id_item,
                                                                    idWarehouse,
                                                                    id_warehouseLocation: null,
                                                                    id_lot: null,
                                                                    db: db,
                                                                    id_productionCart: null,
                                                                    lotMarked: null,
                                                                    fechaCorte: null);

                    if (!warehouseLocationAux.Warehouse.allowsNegativeBalances && _dBalanceWarehouse < 0)
                    {
                        var action = reverse ? "Reversarse" : "Aprobarse";
                        throw new ProdHandlerException("No puede " + action + " la Guía debido a que no hay suficiente Stock y este quedara en negativo, para el producto: " +
                                            tempDetail.Item.name + ", en la Bodega: " + tempDetail.Warehouse.name + ", en la Ubicación: " + tempDetail.WarehouseLocation.name);
                    }

                    if (!reverse)
                    {
                        tempDetail.InventoryMoveDetailTransfer = new List<InventoryMoveDetailTransfer>();
                        var newInventoryMoveDetailTransfer = new InventoryMoveDetailTransfer
                        {
                            id_inventoryMoveDetailExit = inventoryMoveDetailExitAux.id,
                            InventoryMoveDetail = inventoryMoveDetailExitAux,
                            id_inventoryMoveExit = inventoryMoveExit.id,
                            InventoryMove = inventoryMoveExit,
                            id_warehouseExit = inventoryMoveDetailExitAux.id_warehouse,
                            Warehouse = warehouses.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouse),
                            id_warehouseLocationExit = inventoryMoveDetailExitAux.id_warehouseLocation.Value,
                            WarehouseLocation = warehouseLocations.FirstOrDefault(fod => fod.id == inventoryMoveDetailExitAux.id_warehouseLocation),
                            id_inventoryMoveDetailEntry = tempDetail.id,
                            InventoryMoveDetail1 = tempDetail,
                            quantity = amountMoveAux
                        };
                        tempDetail.InventoryMoveDetailTransfer1.Add(newInventoryMoveDetailTransfer);
                        newInventoryMoveDetailTransfer.InventoryMoveDetail.InventoryMoveDetailTransfer.Add(newInventoryMoveDetailTransfer);
                    }
                    UpdateStockInventoryItem(i.id_item, idWarehouse, i.id_warehouselocation, amountInvAux, db);
                }

                #endregion Details
            }
            catch (Exception e)
            {
                MetodosEscrituraLogs.EscribeExcepcionLogNest(e, getRutaLog(), "ServiceInventoryMove", "Produccion");
                throw;
            }

            return result;
        }

        public static WarehouseLocation GetWarehouseLocationProviderOP(
                int? id_provider,
                DBContext db,
                Company activeCompany,
                User activeUser,
                Provider provider, // --db.Provider.FirstOrDefault(fod => fod.id == id_provider);
                Warehouse[] warehouses,
                WarehouseLocation[] warehouseLocations)
        {
            Provider providerAux = provider;
            Warehouse warehouseAux = warehouses.FirstOrDefault(fod => fod.code == "VIRPRO");

            var warehouseLocationAux = warehouseLocations.FirstOrDefault(fod => fod.id_person == id_provider);
            if (id_provider == null)
            {
                warehouseLocationAux = null;
            }
            else
            {
                if (warehouseLocationAux == null && warehouseAux != null)
                {
                    warehouseLocationAux = new WarehouseLocation
                    {
                        code = "PRO" + id_provider,
                        id_warehouse = warehouseAux.id,
                        Warehouse = warehouseAux,
                        name = $"Ubicación Proveedor: {providerAux.Person.fullname_businessName}",
                        description = $"Ubicación Proveedor: {providerAux.Person.fullname_businessName}",
                        id_person = id_provider,
                        Person = providerAux.Person,
                        isRolling = false,
                        isActive = true,
                        id_company = activeCompany.id,
                        id_userCreate = activeUser.id,
                        dateCreate = DateTime.Now,
                        id_userUpdate = activeUser.id,
                        dateUpdate = DateTime.Now
                    };

                    db.WarehouseLocation.Add(warehouseLocationAux);

                    db.SaveChanges();
                }
            }
            return warehouseLocationAux;
        }
        #endregion

        private static DbTransaction getDbTransaction()
        {
            var _dbContext = new DBContext();
            DbContextTransaction trans = _dbContext.Database.BeginTransaction();
            DbTransaction transaction = trans.UnderlyingTransaction;
            return transaction;
        }

        private static void FullLog(Exception e,
                                     string seccion = null,
                                     string extraInfo = null,
                                     [CallerFilePath] string callFilePath = "",
                                     [CallerMemberName] string memberName = "",
                                     [CallerLineNumber] int lineNumber = 0)
        {
            string rutaLog = getRutaLog();
            string origen = nameof(ServiceInventoryMove);
            string app = "Produccion";
            MetodosEscrituraLogs.EscribeExcepcionLogNest(e,
                                                         rutaLog,
                                                         origen,
                                                         app,
                                                         seccion: seccion,
                                                         extraInfo: extraInfo,
                                                         callFilePath: callFilePath,
                                                         memberName: memberName,
                                                         lineNumber: lineNumber);
        }

        private static string getRutaLog()
        {
            if (RUTALOG == null)
            {
                RUTALOG = ConfigurationManager.AppSettings.Get("rutalog");
            }
            return RUTALOG;
        }

        private static void LogInfo(string mensaje, DateTime fechaHora)
        {
            string app = "Produccion";
            string origen = nameof(ServiceInventoryMove);
            string rutaLog = getRutaLog();
            MetodosEscrituraLogs.EscribeMensajeLog($"{mensaje} - {fechaHora}", rutaLog, origen, app);
        }
    }
}